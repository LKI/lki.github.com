<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 浮云计算</title>
    <link>https://liriansu.com/posts/</link>
    <description>Recent content in Posts on 浮云计算</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Apr 2021 20:14:38 +0800</lastBuildDate><atom:link href="https://liriansu.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>近日杂思</title>
      <link>https://liriansu.com/posts/2021-04-28-thoughts-these-days/</link>
      <pubDate>Wed, 28 Apr 2021 20:14:38 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2021-04-28-thoughts-these-days/</guid>
      <description>&lt;p&gt;近两周在旅途上的时间不少，&lt;br /&gt;
看了两本书，&lt;br /&gt;
要写篇文章。&lt;br /&gt;
大概这就是“读在飞机，写在高铁”的都市虚假成年知识分子吧。&lt;/p&gt;

&lt;h2 id=&#34;一&#34;&gt;（一）&lt;/h2&gt;

&lt;p&gt;上周看完了一本《定投十年财务自由》，&lt;br /&gt;
除了学习到各种宽基指数，以及各种名词以外。&lt;/p&gt;

&lt;p&gt;“十年”这样的字眼，&lt;br /&gt;
也像定期的心理按摩一样，&lt;br /&gt;
使我看得账上的 -15% 总收益慈眉善目起来。&lt;/p&gt;

&lt;p&gt;就像巴菲特说过的那样：&lt;br /&gt;
“活着才有输出。”&lt;br /&gt;
不论你年收益率是 5% 还是 10%，&lt;br /&gt;
活得越久，总是收益率更高的那个。&lt;/p&gt;

&lt;p&gt;当然了，虚空第一件装备就出龙心的时候，&lt;br /&gt;
“活着才有输出”这句话可不是有力的证词。&lt;/p&gt;

&lt;h2 id=&#34;二&#34;&gt;（二）&lt;/h2&gt;

&lt;p&gt;想到 dota，不禁感慨最近玩大型游戏的时间变少了。&lt;/p&gt;

&lt;p&gt;以前总有人教育我：“游戏有什么好玩的，你长大了自然就不喜欢玩了。”&lt;br /&gt;
现在我才体会到，游戏是一种我挤时间也想玩的东西。&lt;/p&gt;

&lt;p&gt;最近的时间也只够玩玩《明日方舟》这种上海本土游戏，&lt;br /&gt;
不过也是奇妙，我两年前访谈里一句“我喜欢玩明日方舟”，&lt;br /&gt;
居然认识了熊博士这个好友。&lt;/p&gt;

&lt;p&gt;以至于我每个月给鹰角冲月卡，&lt;br /&gt;
都理直气壮地对熊博士说：&lt;br /&gt;
“给你男人发工资了，不用谢！”&lt;/p&gt;

&lt;h2 id=&#34;三&#34;&gt;（三）&lt;/h2&gt;

&lt;p&gt;“你工资里有我的一份。”&lt;br /&gt;
我也会对在莉莉丝干活的 hulucc 这么说，&lt;br /&gt;
不过这种歧义诱导生不了效，&lt;br /&gt;
他并不会给我返利。&lt;/p&gt;

&lt;p&gt;只是以前 Mia 在看跳槽机会的时候，&lt;br /&gt;
会让我问 hulucc：&lt;br /&gt;
“你们这种二次元公司，HR 真的不需要强制 cosplay？”&lt;/p&gt;

&lt;p&gt;我作为专业的传话中间人，&lt;br /&gt;
就像中学时候帮忙递纸条但一定会拆开看的同学一样：&lt;br /&gt;
冷静思考、放弃思考、大声赞扬、好！cosplay 好啊！&lt;/p&gt;

&lt;h2 id=&#34;四&#34;&gt;（四）&lt;/h2&gt;

&lt;p&gt;Mia 的跳槽之路比较漫长。&lt;/p&gt;

&lt;p&gt;有个老美说过一句话：&lt;br /&gt;
随着逐年晋升，每个人都将被提拔到他无法胜任的位置上。&lt;/p&gt;

&lt;p&gt;Mia 在现在的公司尽心尽力做了三年多，&lt;br /&gt;
一路高升，直系老板都换了四五个。&lt;br /&gt;
这导致工作 5 年的她，现在看的职位都要求 7 年甚至 10 年以上的工作经验。&lt;/p&gt;

&lt;p&gt;“要不咱把加班时间算上，凑个十年？”&lt;br /&gt;
我在一旁出馊主意，Mia 不置可否。&lt;/p&gt;

&lt;p&gt;不过被嫌弃年龄太小经验不足，&lt;br /&gt;
也确实是个幸福的烦恼。&lt;br /&gt;
不像写代码的，老是被嫌弃体力不如年轻人，&lt;br /&gt;
说的好像写代码就是青春饭似的！&lt;br /&gt;
这世上绝无这样的道理！&lt;br /&gt;
我祖上一直是程序员！&lt;br /&gt;
我至少能干到 36 岁！&lt;/p&gt;

&lt;p&gt;Mia 赶忙安慰加速主义发作的我：&lt;br /&gt;
“没事没事以后我养你。”&lt;/p&gt;

&lt;h2 id=&#34;五&#34;&gt;（五）&lt;/h2&gt;

&lt;p&gt;可能是因为当成年人当太久了，&lt;br /&gt;
最近 Mia 与我都在讨论“如何健康工作五十年”这个话题。&lt;/p&gt;

&lt;p&gt;在短暂的交流以后，&lt;br /&gt;
我们初步商定了以后我当 CEO，&lt;br /&gt;
她当 HRD 的分工。&lt;br /&gt;
鉴于“不与同公司 HR 发生恋爱关系”的职场原则，&lt;br /&gt;
我们也基本确定了不在同一家公司就职。&lt;/p&gt;

&lt;p&gt;这个目标很明确，&lt;br /&gt;
就像高考只要 700 分就能上清华了。&lt;br /&gt;
冲啊！&lt;/p&gt;

&lt;p&gt;不过俗话也说“多条退路多条路”，&lt;br /&gt;
我也安排了一下当不上 CEO 的退路：&lt;br /&gt;
可以去美团送外卖。&lt;br /&gt;
毕竟我现在了解单车的扫码与开锁、熟悉电梯按钮的点击与撤销、清楚“我能不能提前点个送达”的问询话术。&lt;/p&gt;

&lt;h2 id=&#34;六&#34;&gt;（六）&lt;/h2&gt;

&lt;p&gt;梦想归梦想，玩笑归玩笑。&lt;br /&gt;
认真考虑的话，未来的路还是要对自己负责。&lt;/p&gt;

&lt;p&gt;以前跟 Mia 在交大散步的时候，&lt;br /&gt;
我们就会畅想以后会不会一人读书、一人养家。&lt;br /&gt;
最近发现时机合适，&lt;br /&gt;
我们也就生出了报考在职 MBA 的想法，&lt;br /&gt;
毕竟名人自传里，&lt;br /&gt;
好像都有一段一边工作一边读书的时光呢。&lt;/p&gt;

&lt;p&gt;“那么问题来了，上海 MBA 读哪家？”&lt;br /&gt;
听到这个问题，我想也不想地回答：&lt;br /&gt;
“当然是交大啦！不然你还想当个自由而无用的灵魂吗？”&lt;/p&gt;

&lt;p&gt;罪过。&lt;br /&gt;
向受影响的复旦灵魂们道个歉。&lt;/p&gt;

&lt;h2 id=&#34;七&#34;&gt;（七）&lt;/h2&gt;

&lt;p&gt;报考 MBA 首先要了解 MBA，&lt;br /&gt;
MBA 的全称是 Married But Available，&lt;br /&gt;
许多人通过读书找到了第一个或者第几个真爱。&lt;br /&gt;
但这个是考上了才要考虑的问题，不重要。&lt;/p&gt;

&lt;p&gt;在面试的时候，&lt;br /&gt;
会有这么三个固定模式的问题出现：&lt;br /&gt;
“你为什么要报考 MBA？为什么选我们学校？你读完 MBA 的五年计划是怎么样的？”&lt;/p&gt;

&lt;p&gt;这种问题一定要好好演练，&lt;br /&gt;
并且最好反复询问自己、重复回答。&lt;/p&gt;

&lt;p&gt;于是我每天都在 Mia 耳旁念叨：&lt;br /&gt;
“闲着也是闲着，交大离家近，读完再说…”&lt;/p&gt;

&lt;p&gt;好在 Mia 已经对爱搞事的我生出了免疫力了。&lt;/p&gt;

&lt;h2 id=&#34;八&#34;&gt;（八）&lt;/h2&gt;

&lt;p&gt;小学时候我喜欢看一个叫《信不信由你 Believe it or not》的节目，&lt;br /&gt;
里面会半真半假地讲述四个故事，&lt;br /&gt;
然后让嘉宾与电视观众们猜哪个是真的。&lt;/p&gt;

&lt;p&gt;我也很喜欢跟朋友们讲述这类故事，&lt;br /&gt;
比如意大利面其实是一个宗教的神、&lt;br /&gt;
每个月的 14 号都是情人节、&lt;br /&gt;
12月12号晚上12点拨打12个0会听到“对不起你拨打的是空号”等等。&lt;/p&gt;

&lt;p&gt;久而久之身边的同事朋友们也滋生出了免疫力。&lt;/p&gt;

&lt;p&gt;希望以后通过我的努力，&lt;br /&gt;
所有中国人都能这么自信、自知、自强，&lt;br /&gt;
对谣言有抵抗力，&lt;br /&gt;
做到不信谣、不传谣。&lt;/p&gt;

&lt;h2 id=&#34;九&#34;&gt;（九）&lt;/h2&gt;

&lt;p&gt;京沪高铁此时已经驶过济南。&lt;br /&gt;
这次到北京与 ldsink/allen 短暂地聚了一次，&lt;br /&gt;
不知不觉他们创业也数载了，&lt;br /&gt;
都在感慨时间变化真快。&lt;/p&gt;

&lt;p&gt;我上家公司有不少十年老员工，&lt;br /&gt;
但目前我司却一个十年老员工都没有，&lt;br /&gt;
真是气抖冷，吃人的互联网行业换血太快啦！&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;当然了，同样的道理也适用于 90 后程序员朋友们：&lt;br /&gt;
震惊！到现在为止，没一个90后程序员活过40岁！&lt;/p&gt;

&lt;h2 id=&#34;十&#34;&gt;（十）&lt;/h2&gt;

&lt;p&gt;年初的时候，&lt;br /&gt;
公司一个好友问我：&lt;br /&gt;
“你是如何在这家公司呆五年还不跑的？”&lt;/p&gt;

&lt;p&gt;我论公司与个人的共同成长、论正确战略与慢就是快、论从零到一的异世界之旅讲了一通。&lt;br /&gt;
好友听的头昏脑胀，只得问了一句：&lt;br /&gt;
“所以其实你还是看好公司的？”&lt;/p&gt;

&lt;p&gt;我仔细愣住，冷静无语，放弃推论，讲出大白话：&lt;br /&gt;
“当然啦！我要觉得我呆的地方不好，我早跑了！”&lt;/p&gt;

&lt;p&gt;某种意义上，工作与谈恋爱也是一样的。&lt;br /&gt;
不管如何细数优缺点，&lt;br /&gt;
爱了就是爱了，&lt;br /&gt;
不爱了也就是不爱了。&lt;/p&gt;

&lt;h2 id=&#34;结&#34;&gt;（结）&lt;/h2&gt;

&lt;p&gt;除了投资类的书，&lt;br /&gt;
最近我还在看《西行漫记》（又名《红心照耀中国》）。&lt;/p&gt;

&lt;p&gt;书中“一个党员的由来”一章，&lt;br /&gt;
看得我关联记忆不停。&lt;br /&gt;
一会儿是《金色的鱼钩》闯入脑海，&lt;br /&gt;
一会儿又是《小萝卜头》唤起回忆。&lt;/p&gt;

&lt;p&gt;有许多事情，&lt;br /&gt;
当时看可能是平凡人做的平凡事，&lt;br /&gt;
后来回味起来却历久弥香，&lt;br /&gt;
浓缩成了一个个可以传下去的故事。&lt;/p&gt;

&lt;p&gt;这或许就是时间的魅力吧。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的金钱观</title>
      <link>https://liriansu.com/posts/2021-03-18-my-concept-of-money/</link>
      <pubDate>Thu, 18 Mar 2021 20:41:35 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2021-03-18-my-concept-of-money/</guid>
      <description>&lt;p&gt;天生我材必有用，&lt;br /&gt;
千金散尽还复来。&lt;/p&gt;

&lt;p&gt;前几天一次内部周常分享，&lt;br /&gt;
我讲了“事业计划”的话题。&lt;br /&gt;
果然，成年人们还是对“如何搞钱”这个话题最感兴趣，&lt;br /&gt;
在讲这一小节的时候，大家都放下了手机，热情地参与了讨论。&lt;/p&gt;

&lt;p&gt;这几天我又细想了几回，&lt;br /&gt;
我对“如何搞钱”这个话题的理解，&lt;br /&gt;
其实就是“我的金钱观”了。&lt;br /&gt;
今晚可能是个合适的时间，&lt;br /&gt;
可以用个合适的姿势，&lt;br /&gt;
在博文里写下来。&lt;/p&gt;

&lt;p&gt;财富在我理解中，&lt;br /&gt;
是由家族基业、劳动收入、投资理财、风险收益等多方面组成的。&lt;/p&gt;

&lt;h2 id=&#34;家族基业&#34;&gt;家族基业&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;有的人用一生治愈童年，&lt;br /&gt;
有的人用童年治愈一生。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;阶级论是最近甚嚣尘上的一种观点。&lt;br /&gt;
经过建国几十年的财富积累，&lt;br /&gt;
时运、机遇、奋斗导致了各个家庭财富积累的不一。&lt;br /&gt;
但撇去使矛盾激化的拱火观点，&lt;br /&gt;
“人生而平等，而有人更加平等”是一个确凿的事实。&lt;/p&gt;

&lt;p&gt;在《全面战争·三国》游戏中有一个设定：&lt;br /&gt;
不同的势力基础家业是不一样的。&lt;br /&gt;
比如卖草席出身的刘备，虽是中山靖王之后，&lt;br /&gt;
但没有任何遗产，每回合只有0的家族基业收入。&lt;br /&gt;
河北袁绍，往上数四世三公，&lt;br /&gt;
不说继承的领土，每回合光家族基业收入就有4000之多。&lt;/p&gt;

&lt;p&gt;人类也是如此。&lt;br /&gt;
不说“含着金钥匙出生”的王思聪、姚安娜、潘瑞，&lt;br /&gt;
即使是坐在同一个教室上着同一节课的学生们，&lt;br /&gt;
毕业以后也会发现，&lt;br /&gt;
家境的差别确实很难只用几十年的奋斗来追平。&lt;/p&gt;

&lt;p&gt;当我们谈论个人的金钱时，&lt;br /&gt;
家族基业确实是一个需要直面的话题。&lt;/p&gt;

&lt;h2 id=&#34;劳动收入&#34;&gt;劳动收入&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“听说搞IT的培训三个月就月入上万，是真的吗？”&lt;br /&gt;
“可以是真的。”&lt;br /&gt;
《&lt;a href=&#34;https://liriansu.com/is-it-possible-to-be-rich-easily-by-programming&#34;&gt;链家小哥问我：听说搞IT的培训三个月就可以月入上万，是真的吗？&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;劳动最光荣是中华民族的传统美德。&lt;br /&gt;
程序员朋友们的绝大部分收入都来自于劳动，&lt;br /&gt;
也就是码代码。&lt;br /&gt;
因为成年人最关心搞钱，&lt;br /&gt;
所以程序员聚集的地方大家都会讨论薪资、奖金、涨幅。&lt;/p&gt;

&lt;p&gt;但除了算996时薪之外，&lt;br /&gt;
我很少看见有人会量化地去计算劳动的金钱转化率。&lt;br /&gt;
其实可以用积分的思想，&lt;br /&gt;
来估计一个当代程序员一辈子可以通过劳动赚取报酬的量级。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/coder_salary.png&#34; alt=&#34;coder&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👆“写代码只是青春饭，生化环材越老越吃香”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们以上图橙线（码农）的薪酬线，尝试做一个很粗糙的估计：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;假设每级灰色横线代表 5W 的年薪差别&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;假设码农年薪最高点，38岁时年收入 48W&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;那么码农22岁起薪大概是 22W&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;健康工作五十年，70岁时年收入是 25W&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在粗糙的估计之下，很容易得出一个结论：&lt;br /&gt;
&lt;strong&gt;程序员（码农）朋友们一辈子的劳动收入，量级是千万级&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;大家可以尝试做一个量级的粗糙估计，&lt;br /&gt;
甚至可以加上“996拼搏三年”、“35岁收入断崖式下降”或者“40岁提前退休”之类的设定，&lt;br /&gt;
也可以得出类似的答案。&lt;/p&gt;

&lt;p&gt;虽然一千万也是千万级，&lt;br /&gt;
八千万也是千万级，&lt;br /&gt;
但光量级上来说：&lt;br /&gt;
程序员健康工作一辈子，&lt;br /&gt;
劳动收入大概就是千万级。&lt;/p&gt;

&lt;p&gt;所以许多程序员朋友对薪资不满意，&lt;br /&gt;
或许是他们处在更窘迫的青年时代，&lt;br /&gt;
又或许是他们的理想比千万这个量级要更广阔。&lt;/p&gt;

&lt;h2 id=&#34;投资理财&#34;&gt;投资理财&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/my_fund.jpg&#34; alt=&#34;fund&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👆“要做时间的朋友。”我这么安慰自己。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;读完了《小狗钱钱》以后，&lt;br /&gt;
年初我就准备学习一个理财，&lt;br /&gt;
我便开始用工资买基金。&lt;br /&gt;
一月份买了 1W 元小赚 2% 以后，&lt;br /&gt;
我找 Mia 追加投资了 4W 元，&lt;br /&gt;
然后从山顶一直滑翔至今，&lt;br /&gt;
期间收获了无数的表情包、梗图以及段子笑话。&lt;/p&gt;

&lt;p&gt;在《&lt;a href=&#34;https://liriansu.com/a-chat-with-roommates&#34;&gt;室友聊天&lt;/a&gt;》的年代，&lt;br /&gt;
我便抱着一种朴素的财富自由观：&lt;/p&gt;

&lt;p&gt;假设工作 10 年攒够 100W，&lt;br /&gt;
只要我理财收益率能到 5%，&lt;br /&gt;
那我每年都会进账 5W，&lt;br /&gt;
省着点就完全够花啦！&lt;br /&gt;
就算考虑 CPI 什么的，&lt;br /&gt;
把本金、收益率想想办法搞一搞也没问题。&lt;/p&gt;

&lt;p&gt;这种朴素的财富自由观，&lt;br /&gt;
一直伴随我到现今。&lt;br /&gt;
我也逐渐地往上打了更多的补丁：&lt;/p&gt;

&lt;p&gt;一是，我大概也许确实会工作一辈子，&lt;br /&gt;
就算撇去自我价值的实现只谈钱，&lt;br /&gt;
10W 的年薪在 10% 的收益率下也相当于 100W 的稳定资产包。&lt;/p&gt;

&lt;p&gt;二是，我对收益率确实不能太乐观，&lt;br /&gt;
5% 到 10% 我或许可以奢望下，&lt;br /&gt;
但 10% 到 15% 乃至 20% 是一个需要学习的系统工程，&lt;br /&gt;
毕竟巴菲特这么多年也才 20%+ 的年化收益率。&lt;/p&gt;

&lt;h2 id=&#34;风险收益&#34;&gt;风险收益&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;你甘愿一直默默无闻，还是希望一鸣惊人？&lt;/p&gt;

&lt;p&gt;—— 杰克 from 夜之城&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;财富某种意义上是很公平的。&lt;br /&gt;
有人可以一辈子只吃家族基业，&lt;br /&gt;
也有人的家族基业让他背上一辈子的负债。&lt;br /&gt;
有人杠杆短线成为股神一代传奇，&lt;br /&gt;
也有人一家五口接连在天台一跃而下。&lt;br /&gt;
所有的回报都伴随着风险，&lt;br /&gt;
每一条冒险路都有一个宝箱。&lt;/p&gt;

&lt;p&gt;重疾险是一个确实值得购买的保险。&lt;br /&gt;
虽然许多企业已经把重疾险纳入了员工保障计划，&lt;br /&gt;
但个人而言是值得花时间去研究一下的。&lt;br /&gt;
有这么一个（危言耸听的）说法：&lt;br /&gt;
“一百万能治好很多病；&lt;br /&gt;
而一百万也治不好的，&lt;br /&gt;
可能五百万也治不好。”&lt;/p&gt;

&lt;p&gt;重疾险是一款针对风险的兜底，&lt;br /&gt;
那期权、股票是一款针对收益的兜底。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1gx411R7ke&#34;&gt;zettaranc 在B站讲过&lt;/a&gt;他长期看好并持有李宁，&lt;br /&gt;
资产翻四倍的故事。&lt;br /&gt;
在我的观点里，&lt;br /&gt;
假如程序员希望获得比千万级更高的量级收益，&lt;br /&gt;
那么期权股票是必须要了解的。&lt;/p&gt;

&lt;p&gt;不论是在市场上长期看好抄底持有，&lt;br /&gt;
还是以劳动附加价值的方式，&lt;br /&gt;
找一个小独角兽公司，&lt;br /&gt;
陪着它长大。&lt;/p&gt;

&lt;h2 id=&#34;仓位管理&#34;&gt;仓位管理&lt;/h2&gt;

&lt;p&gt;家族基业、劳动收入、投资理财、风险收益这四部分构成了一人一世的财富。&lt;br /&gt;
而其中不同的仓位占比，&lt;br /&gt;
甚至会影响到一个人的人生观、世界观、价值观。&lt;/p&gt;

&lt;p&gt;比如“富二代”的财富构成中，&lt;br /&gt;
家族基业占比高达九成以上。&lt;br /&gt;
别说劳动收入了，&lt;br /&gt;
像投资理财等操作，&lt;br /&gt;
能有正向的收益就已经很不错了（参见 pandaTV）。&lt;/p&gt;

&lt;p&gt;那对于家族基业占比九成以上的人类而言，&lt;br /&gt;
以财富的视角来看，拼命劳动完全没有收益。&lt;br /&gt;
这时候要么切换成“自我实现”的价值观视角，&lt;br /&gt;
要么切换成“我也不知道干嘛，但孝敬好父母就对了”的咸鱼心态。&lt;/p&gt;

&lt;p&gt;那对于“奋斗逼”（中性），&lt;br /&gt;
为什么他要全身心投入工作呢？&lt;br /&gt;
因为也许他是一个财富积累主要靠工作薪资的人类，&lt;br /&gt;
劳动收入在财富中构成占比极大。&lt;br /&gt;
相比其它选择，&lt;br /&gt;
显然是加大自己对“劳动”的投入收益更高。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我的梦想是：&lt;br /&gt;
&lt;strong&gt;世界和平&lt;/strong&gt;，&lt;br /&gt;
&lt;strong&gt;我爱的人跟爱我的人都能幸福&lt;/strong&gt;，&lt;br /&gt;
&lt;strong&gt;我要成为温柔的强者&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而在我心中，&lt;br /&gt;
要实现我的梦想我需要远比千万级更高的财富量级。&lt;br /&gt;
以为人一世的时间维度去看，&lt;br /&gt;
家族基业、劳动收入或许只是我奋斗的一小步，&lt;br /&gt;
我真正要做的，&lt;br /&gt;
或许是把再惠做上市以后（x&lt;br /&gt;
某一天去创立一份未竟的事业，&lt;br /&gt;
有可能的话兼济天下，&lt;br /&gt;
大庇天下寒士俱欢颜吧。&lt;/p&gt;

&lt;h2 id=&#34;杂记&#34;&gt;杂记&lt;/h2&gt;

&lt;p&gt;我总跟 Mia 念叨：&lt;br /&gt;
“别看我们现在不富有,&lt;br /&gt;
but we will be rich.”&lt;/p&gt;

&lt;p&gt;Mia 也总是安慰我：&lt;br /&gt;
“我没你那么志向远大，&lt;br /&gt;
我尽量在你 35 岁失业的时候能养的起你吧。”&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我言、我知、我行</title>
      <link>https://liriansu.com/posts/2021-03-15-say-think-behave/</link>
      <pubDate>Mon, 15 Mar 2021 23:03:39 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2021-03-15-say-think-behave/</guid>
      <description>&lt;p&gt;“人家是说了再做，我是做了再说。”&lt;br /&gt;
——闻一多&lt;/p&gt;

&lt;h1 id=&#34;言易知难-知易行难&#34;&gt;言易知难，知易行难&lt;/h1&gt;

&lt;p&gt;人活在世界上，诉说着、思考着、行动着。&lt;br /&gt;
标题的这句话，就是我对人类交互的一个思考。&lt;/p&gt;

&lt;p&gt;言，说话，是人类最基础的一个交流功能。&lt;br /&gt;
人类是一个奇特的物种。&lt;br /&gt;
像《乡村教师》里感慨的那样，&lt;br /&gt;
明明信息交流只能靠喉咙震动通过声波传播，&lt;br /&gt;
但文化硬是传承发展了几千年。&lt;/p&gt;

&lt;p&gt;知，思想，往往只能通过说话来表达。&lt;br /&gt;
在工作以后，&lt;br /&gt;
不少朋友会感慨很少有机会能跟他人深度交流了。&lt;br /&gt;
他们偶尔会怀念学校时候的夜聊，&lt;br /&gt;
虽然可能大部分时候讲的是学习、老师、校园的日常，&lt;br /&gt;
但也总有成年人独居生活时不会发生的人生、世界、价值的探讨。&lt;/p&gt;

&lt;p&gt;行，行动，因为过于具象而经常被忽视。&lt;br /&gt;
而行动，却是这三者中最能表达立场的铁证。&lt;br /&gt;
不论是极端的“父亲的爱逼死孩子”中错位的表达与行动，&lt;br /&gt;
还是日常经常发生的“白天一起玩晚上偷偷学习”中流露的真实认知，&lt;br /&gt;
无一不说明着行动本身的价值。&lt;/p&gt;

&lt;p&gt;所以说，&lt;strong&gt;言易知难，知易行难&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;学习-教育改变命运&#34;&gt;学习·教育改变命运&lt;/h2&gt;

&lt;p&gt;在我上学的年代，&lt;br /&gt;
考完试以后大家对完答案，&lt;br /&gt;
就会互相捧对方：&lt;br /&gt;
“哎呀我这次雪崩！”&lt;br /&gt;
“周神你肯定又第一啦！”&lt;br /&gt;
“学渣啦我也就三流成绩！”&lt;br /&gt;
结果成绩一出来，&lt;br /&gt;
排名竞争更加激烈。&lt;/p&gt;

&lt;p&gt;学习、教育上，&lt;br /&gt;
说话只要重复一句“教育改变命运”或者“啊呀也太卷了”的抱怨就行了。&lt;/p&gt;

&lt;p&gt;但“认为教育是能改变命运”的这种思想其实是更难得的（虽然中国很普遍）。&lt;br /&gt;
《贫穷的本质》中提到，&lt;br /&gt;
统计学上越富裕的人越舍得在教育上投资。&lt;br /&gt;
这也是一种思想的偏好。&lt;/p&gt;

&lt;p&gt;行动本身就更难了。&lt;br /&gt;
现代学生除了懒惰还要抵御电子产品的诱惑，&lt;br /&gt;
成年人也如是，&lt;br /&gt;
许多人不仅放弃了读书的习惯，还放弃了探索未知的好奇心。&lt;/p&gt;

&lt;p&gt;所以真的贯彻“教育改变命运”，&lt;br /&gt;
不能只靠口号，&lt;br /&gt;
也需要知行合一地持续付出。&lt;/p&gt;

&lt;h2 id=&#34;事业-穷则独善其身-达则兼济天下&#34;&gt;事业·穷则独善其身，达则兼济天下&lt;/h2&gt;

&lt;p&gt;面试的时候除了专业问题，&lt;br /&gt;
我有两个喜欢问的个人问题。&lt;br /&gt;
一个是“给我讲讲你最喜欢的一次项目内容”，&lt;br /&gt;
另一个是“你以后想成为什么样的人”。&lt;br /&gt;
虽然可能会有离题的回答，&lt;br /&gt;
但我不止一次在一双眼睛中看到了燃烧起来热情的火光。&lt;/p&gt;

&lt;p&gt;关于工作本身的社会舆论一直在变化，&lt;br /&gt;
从以前的“支持宣扬狼性文化”到现在的“警惕提防996资本吸血”也不过数年时间。&lt;br /&gt;
但随着舆论两边踏浪的大众，&lt;br /&gt;
会有多少人真正思考过自己的事业、阶段、坚持、独特、苦难与成就呢？&lt;br /&gt;
个中之人，能坚持自己独立思考并走一条不后悔的路也是少之又少。&lt;/p&gt;

&lt;p&gt;之前与Mia聊天时，提到过一个好玩现象，我称之为“沉默的大多数”。&lt;br /&gt;
在我们观察中，群体对公司的看法往往是单元的，但个体的行动却是复杂的。&lt;br /&gt;
比如一个团队中，内部以公司不好的看法为主流，那认为公司还不错的员工也不会发声，以免被孤立。&lt;br /&gt;
但同样的团队，却也能表现出韧性，工作上的困难能客观分析并解决，并且离职率保持在可接受的范围内。&lt;/p&gt;

&lt;p&gt;所以在攀登事业山峰的路上，&lt;br /&gt;
会有复杂的舆论干扰人的想法，&lt;br /&gt;
但最终最确定的，还是抛去杂念、端正认知以后一步一个脚印的行动。&lt;/p&gt;

&lt;h2 id=&#34;爱情-这简单又强烈的感情支配了一生&#34;&gt;爱情·这简单又强烈的感情支配了一生&lt;/h2&gt;

&lt;p&gt;与朋友们聊天时，经常戏谑一句话叫“男人的嘴骗人的鬼”。&lt;br /&gt;
去年流行的“小丑竟是我自己”的舔狗2.0这个梗，&lt;br /&gt;
本质上也是心口不一导致的戏剧化满载。&lt;/p&gt;

&lt;p&gt;《新鸳鸯蝴蝶梦》里唱到：&lt;br /&gt;
是要问一个明白，&lt;br /&gt;
还是要装作糊涂？&lt;br /&gt;
知多知少难知足…&lt;/p&gt;

&lt;p&gt;同一件事情，&lt;br /&gt;
叠加上言、知、行三者，&lt;br /&gt;
真值就有八种可能性。&lt;/p&gt;

&lt;p&gt;所以为了避免误会、揣测、猜疑等古典狗血，&lt;br /&gt;
一条可行的路是三者合一：&lt;br /&gt;
我言、我知、我行。&lt;/p&gt;

&lt;p&gt;但复读“不以结婚为目的的恋爱都是耍流氓”的人，&lt;br /&gt;
有多少人是真的这么想的呢？&lt;br /&gt;
又有多少人能真的这么做到呢？&lt;/p&gt;

&lt;h2 id=&#34;生死-或重于泰山-或轻于鸿毛&#34;&gt;生死·或重于泰山，或轻于鸿毛&lt;/h2&gt;

&lt;p&gt;就如同在&lt;a href=&#34;https://liriansu.com/carpe-diem&#34;&gt;《消逝的此刻》&lt;/a&gt;中感慨的一样，&lt;br /&gt;
我一直不太能接受“人固有一死”这个事实。&lt;/p&gt;

&lt;p&gt;有这么一把达摩克利斯之剑悬在头上，&lt;br /&gt;
我便执行着战术上重视、战略上藐视的策略。&lt;/p&gt;

&lt;p&gt;“死亡，不足为惧也。”&lt;br /&gt;
我说着这样的话。&lt;br /&gt;
同时每天躺在床上看着天花板，&lt;br /&gt;
我开始了三省吾身：&lt;br /&gt;
“明早吃啥？明中午吃啥？明晚上吃啥？”&lt;br /&gt;
噢不好意思，没吃饱，想岔了，我又开始了三省吾身：&lt;br /&gt;
“今天有什么话我能表达的更好？&lt;br /&gt;
我有什么想法是不该有的？&lt;br /&gt;
未来我要怎么改变自己的行动？”&lt;/p&gt;

&lt;p&gt;今天的我比昨天的我更好了，值了。&lt;/p&gt;

&lt;h1 id=&#34;知行合一-言行不一&#34;&gt;知行合一，言行不一&lt;/h1&gt;

&lt;p&gt;真正去观察着生活，&lt;br /&gt;
就感知到“言易知难，知易行难”就像是宇宙的规约一样，&lt;br /&gt;
限制着人类的交互。&lt;/p&gt;

&lt;p&gt;假如你是个知行合一的人，&lt;br /&gt;
那么恭喜你，&lt;br /&gt;
你现在的状态是我设想中的完美状态，&lt;br /&gt;
剩下的就只需要调整说的话，&lt;br /&gt;
表达自己就行了。&lt;/p&gt;

&lt;p&gt;假如你意识到“知我”与“行我”是部分分裂的，&lt;br /&gt;
那也恭喜你，&lt;br /&gt;
你的意识更加强大了，能超脱地观察自己的言行了。&lt;/p&gt;

&lt;p&gt;而倘若摄像机调转方位，&lt;br /&gt;
我们来观察芸芸众生，&lt;br /&gt;
就会发现大地上战栗的一个个个体。&lt;br /&gt;
他们的“言我”、“知我”与“行我”，&lt;br /&gt;
或隐藏、或纠结、或一统、或漠视。&lt;/p&gt;

&lt;p&gt;这种时候，掏出绝世武功一看，&lt;br /&gt;
上面释义“让行动与认知统一、但不必说出来”的一句话赫然在目：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;知行合一，&lt;br /&gt;
言行不一。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的世界观</title>
      <link>https://liriansu.com/posts/2021-01-20-my-worldview/</link>
      <pubDate>Wed, 20 Jan 2021 22:31:35 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2021-01-20-my-worldview/</guid>
      <description>&lt;p&gt;罗马军队大破希拉库扎国时，&lt;br /&gt;
一个带头挥着刀冲锋的士兵被一位蹲在地上的老人挡住了。&lt;br /&gt;
士兵吼着：“给我滚开你个老家伙！”&lt;br /&gt;
老人头都没抬地说：“不要弄坏我的圆！”&lt;br /&gt;
阿基米德，死于公元前 212 年。&lt;/p&gt;

&lt;h2 id=&#34;一&#34;&gt;（一）&lt;/h2&gt;

&lt;p&gt;最近跟 Mia 在路上玩猜人名游戏，&lt;br /&gt;
一方想人名另一方问，&lt;br /&gt;
问题只会得到“是”或“不是”的答案，&lt;br /&gt;
如此反复直到猜出来或者猜不下去。&lt;/p&gt;

&lt;p&gt;当我猜出来 Mia 想的是阿基米德时，&lt;br /&gt;
我脑海中除了 &lt;code&gt;Aha moment&lt;/code&gt;, &lt;code&gt;F = P水gV排&lt;/code&gt;，&lt;br /&gt;
还浮现出了本文最开始的那个故事。&lt;/p&gt;

&lt;p&gt;就像《百年孤独》的经典开头一样，&lt;br /&gt;
《进击的巨人》开头语也为粉丝们津津乐道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那一天，&lt;br /&gt;
人类终于回想起来了，&lt;br /&gt;
曾经一度被它们支配的恐怖，&lt;br /&gt;
还有被困在牢笼的那份屈辱。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;数学本身，也像这样的文字一样，&lt;br /&gt;
即使经历了数次危机，&lt;br /&gt;
也在费马、牛顿、高斯等伟人的掌舵下成为人类智慧的源泉。&lt;/p&gt;

&lt;h2 id=&#34;二&#34;&gt;（二）&lt;/h2&gt;

&lt;p&gt;即便是小学级别的数学，&lt;br /&gt;
也会让人有仰望天空的冲动。&lt;/p&gt;

&lt;p&gt;最开始从整数、小数，&lt;br /&gt;
了解到了负数、分数，&lt;br /&gt;
再到无理数、复数的认知过程，&lt;br /&gt;
我就像一个第一次被放在星空下的孩子，&lt;br /&gt;
看着满天前辈留下的星星，&lt;br /&gt;
闪烁得一句话也说不出来。&lt;/p&gt;

&lt;p&gt;那个时候坐我舅开的车，&lt;br /&gt;
他是当时我身边的最“理科”的人了，&lt;br /&gt;
我跟他讲述了我的新发现：&lt;br /&gt;
“Π是个无理数，意味着我们对Π的探索就是无穷尽的，也意味着Π里面可以含有全世界！”&lt;/p&gt;

&lt;p&gt;后来细细想来，&lt;br /&gt;
Π一个数字包含的随机混沌，&lt;br /&gt;
就是我认识的世界的本质。&lt;/p&gt;

&lt;h2 id=&#34;三&#34;&gt;（三）&lt;/h2&gt;

&lt;p&gt;04年的时候看《儿童文学》，&lt;br /&gt;
里面连载了一篇李志伟写的中篇小说&lt;a href=&#34;https://book.douban.com/subject/1064307/&#34;&gt;《圣域传说》&lt;/a&gt;，&lt;br /&gt;
情节跟后来的&lt;a href=&#34;https://www.bilibili.com/video/BV1az4y1D73Y&#34;&gt;《异次元骇客》&lt;/a&gt;异常同步。&lt;br /&gt;
大致讲的就是主角创造了一个电脑世界，&lt;br /&gt;
但后来主角发现现实也不过是被创造的另一个虚拟世界。&lt;br /&gt;
这样的套娃故事简单来说，&lt;br /&gt;
可以通过“我思故我在”的思辨逃避过去，&lt;br /&gt;
但当时给我的冲击不亚于第一次看完《楚门的世界》的重生感。&lt;/p&gt;

&lt;p&gt;从那时候开始，直到现在，&lt;br /&gt;
我一直在思考这个问题：&lt;br /&gt;
“我是谁？”&lt;/p&gt;

&lt;p&gt;那时留校培训，我们几个好伙伴会挤在一间寝室睡觉。&lt;br /&gt;
晚上夜话时，我跟 FHN 聊到了世界观，&lt;br /&gt;
我说了“世界有可能是被创造出来的”后，&lt;br /&gt;
他拍床而起：“对！我也是这么觉得的！”&lt;br /&gt;
后来我们一电脑室的人都在《Ever17》中找到了观测者原理的绝妙故事。&lt;/p&gt;

&lt;p&gt;中学时，我非常敬佩教我物理的万老师，&lt;br /&gt;
那时他是我认识的最“理科”的人。&lt;br /&gt;
在一天中午，跟他讨论完题目后论道中，&lt;br /&gt;
我顺着逻辑说出了一段日后反复咀嚼了十几年的话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人生是没有实际意义的。&lt;/p&gt;

&lt;p&gt;为什么呢？我们来尝试反证法。&lt;br /&gt;
首先假设人生有意义。&lt;/p&gt;

&lt;p&gt;这个意义是寄托于心灵（意识）的吗？&lt;br /&gt;
不是，因为我只要否定心灵它就不存在了。&lt;/p&gt;

&lt;p&gt;那这个意义是存在现实世界（物质）的吗？&lt;br /&gt;
不是，我相信科学，我不信来生。&lt;br /&gt;
宇宙会毁灭，一切物质都会消亡。&lt;/p&gt;

&lt;p&gt;所以，论实际意义的话，&lt;br /&gt;
人生就是没有实际意义的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在物理竞赛题目上能教导我的万老师，&lt;br /&gt;
对这番“中二”的言论也是无语，&lt;br /&gt;
挥了挥手让我自己去继续我个人的思考了。&lt;/p&gt;

&lt;h2 id=&#34;四&#34;&gt;（四）&lt;/h2&gt;

&lt;p&gt;所以我困惑就更大了。&lt;/p&gt;

&lt;p&gt;人生没意义的话？为什么人还要活着呢？&lt;br /&gt;
但我迷恋于雨后路边浮上来的扭曲蚯蚓壮观场面，&lt;br /&gt;
揪心于恋爱时两颗心撞击的揪心情感，&lt;br /&gt;
沉浸于游戏版编码思维宫殿里的心流。&lt;br /&gt;
那世界肯定有一个理由，让我灿烂地活下去。&lt;/p&gt;

&lt;p&gt;于是我寻找了许多的思想实验。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/adult-life-memories&#34;&gt;《毕业五年-回忆》&lt;/a&gt;里，提过一嘴“忒修斯之船”，&lt;br /&gt;
前文里提到的基本上类似于黑客帝国式的“缸中大脑”，&lt;br /&gt;
我心中还坚信的是一个《信条》式的宿命论。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有些人二十岁就死了，八十岁才埋。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一句《读者》里鸡汤故事的典藏句子，&lt;br /&gt;
但在我眼中却包含科学的“宿命”的含义：&lt;br /&gt;
只有在八十岁回首往事时，&lt;br /&gt;
才知道这个人二十岁就死了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当你老了，回顾一生，就会发觉：&lt;/p&gt;

&lt;p&gt;什么时候出国读书、&lt;br /&gt;
什么时候决定做第一份职业、&lt;br /&gt;
何时选定了对象而恋爱、&lt;br /&gt;
什么时候结婚，其实都是命运的巨变。&lt;/p&gt;

&lt;p&gt;只是当时站在三岔路口，&lt;br /&gt;
眼见风云千樯，&lt;br /&gt;
你作出选择的那一日，在日记上，&lt;br /&gt;
相当沉闷和平凡，&lt;br /&gt;
当时还以为是生命中普通的一天&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然古人云了又云：&lt;br /&gt;
“人定胜天”、“路在脚下”、“事在人为”&lt;br /&gt;
但是从未来的视角看来，&lt;br /&gt;
非洲的蝴蝶必然会振动翅膀，&lt;br /&gt;
章北海按钮必然会慢下几秒，&lt;br /&gt;
张华、李萍和我也必然有光明的前途。&lt;/p&gt;

&lt;h2 id=&#34;五&#34;&gt;（五）&lt;/h2&gt;

&lt;p&gt;三观中的世界观，&lt;br /&gt;
讲的就是我对世界的观感。&lt;/p&gt;

&lt;p&gt;经济学里的这句话，&lt;br /&gt;
放在普世观点里也或许成立。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;过去十年里，这是最坏的一年。&lt;br /&gt;
未来十年里，这是最好的一年。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“人生是没有实际意义的”这句论断，&lt;br /&gt;
在我的人生观里留下了深刻的影响。&lt;br /&gt;
但我的世界观里，&lt;br /&gt;
我给自己写下了这么一句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;唯心地思考，唯物地活着。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这也是我博客站点名字“浮云计算”、以及我网名“浮云总是梦”的由来：&lt;br /&gt;
世上万物就像天上的浮云一样，&lt;br /&gt;
既具体、又空心，&lt;br /&gt;
既实用，凝集降雨泽润大地，&lt;br /&gt;
又虚无，让人欣赏变幻莫测。&lt;/p&gt;

&lt;p&gt;或许智人的历史长河中，&lt;br /&gt;
就有这么一朵调皮云，&lt;br /&gt;
在一个晚上它飘在大地上，&lt;br /&gt;
挡住了一个仰望星空的智人的视线，&lt;br /&gt;
把这份仰望星空而对世界产生的好奇，&lt;br /&gt;
推迟了那么几百年。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为拼多多而死，不值得</title>
      <link>https://liriansu.com/posts/2021-01-05-no-more-dying-for-pinduoduo/</link>
      <pubDate>Tue, 05 Jan 2021 20:21:20 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2021-01-05-no-more-dying-for-pinduoduo/</guid>
      <description>&lt;p&gt;润肺的离去，&lt;br /&gt;
是个悲剧，&lt;br /&gt;
也是一个警钟。&lt;/p&gt;

&lt;h1 id=&#34;一&#34;&gt;（一）&lt;/h1&gt;

&lt;p&gt;最近所有群都被拼多多员工（花名“润肺”）离世的消息刷屏了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/437702180/answer/1659225588&#34;&gt;网上信息爆料说&lt;/a&gt;，润肺是一名98年的女生，在新疆的拼多多买菜工作。&lt;br /&gt;
2020年12月29日凌晨一点半，她在下班路上晕倒，抢救无效而离世。&lt;/p&gt;

&lt;p&gt;此次事件还因为两点而被放得更大：&lt;/p&gt;

&lt;p&gt;一是润肺同学并不是刻板印象中闷闷的程序员，&lt;br /&gt;
而是一个积极乐观、大学玩过乐队的运营妹子，&lt;br /&gt;
而且她的公司签名是“肺宝为多多守边疆”。&lt;br /&gt;
这让包括程序员之外的更多同学，也与润肺有了共情。&lt;/p&gt;

&lt;p&gt;二是拼多多公关“辟谣式造谣”，&lt;br /&gt;
引发知乎官方下场对峙拼多多的低水平公关。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/zhihu_pdd.png&#34; alt=&#34;zhihu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这种“黑历史打脸”式的操作引发了吃瓜群众的狂欢，&lt;br /&gt;
以沙雕行为迅速出圈，&lt;br /&gt;
在更大范围内施加影响的同时也引发了不小规模的刻奇行为。&lt;/p&gt;

&lt;p&gt;整场时间在一周后并没有完全被遗忘，&lt;br /&gt;
反而引发了诸如“反资本家反996”&lt;br /&gt;
“在下班路上猝死，算工伤吗”等系列可能会影响更深远的讨论。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“这是一个影响深远的选项，请谨慎选择”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;二&#34;&gt;（二）&lt;/h1&gt;

&lt;p&gt;从社会的角度，这可能是历史河流中上的一只小蝴蝶。&lt;/p&gt;

&lt;p&gt;随着网民年纪的变大，自媒体话语的放大，&lt;br /&gt;
这件事情与最近其它的几件事情一样，都引发了类似的讨论：&lt;br /&gt;
人为什么而活。&lt;/p&gt;

&lt;p&gt;马云在三年前还是“马云爸爸”，但最近被叫的最多的还是“资本家马云”。&lt;br /&gt;
前几年还经常能见到华为狼性文化、阿里文化价值观的通稿，但最近这些文章的评论区只能控评。&lt;br /&gt;
更不用说去年刮起来的“内卷”“PUA”之风，也不知道它们能不能在汉语体系中留有一席之地，&lt;br /&gt;
还是与“屌丝”一样失去了最初精准的内涵。&lt;/p&gt;

&lt;p&gt;大事件对长远的影响，我们可以看看历史。&lt;br /&gt;
与这次事故对应的，由近及远我想到三件事：&lt;br /&gt;
拼多多优惠券事件，导致了企业内部的整顿，似乎并没有影响到社会层面。&lt;br /&gt;
滴滴乐清女孩遇害案，督促了网约车安全体系的改革、监管体系的完善。&lt;br /&gt;
富士康连环跳楼惨剧，引发了全社会对于“血汗工厂”的讨论，把“员工也是人”的这种最基础的思想重新宣传了一遍。&lt;/p&gt;

&lt;p&gt;这次的蝴蝶会产生什么样的效应呢？&lt;br /&gt;
我不确定。&lt;br /&gt;
但它一定会改变社会的一部分，&lt;br /&gt;
可能是我们一部分的共识，&lt;br /&gt;
又或者是一部分我们的生活方式。&lt;/p&gt;

&lt;h1 id=&#34;三&#34;&gt;（三）&lt;/h1&gt;

&lt;p&gt;从互联网从业者的角度，这又是一个鲜血淋漓的例子。&lt;/p&gt;

&lt;p&gt;Mia 跟我讲过，她在的公司有个不成文的候选人模型，叫：&lt;br /&gt;
“Poor, smart, desire to be rich.”&lt;br /&gt;
（穷，聪明，渴望有钱）&lt;/p&gt;

&lt;p&gt;互联网的工作模式也是类似的，&lt;br /&gt;
以“两个人拿三个人的工资干四个人的活”这样的方式，&lt;br /&gt;
吸引了一大批聪明人在这样的公司奋斗。&lt;br /&gt;
在上海，拼多多的薪资是独一档，&lt;br /&gt;
之前我们面试看中的好几个优秀候选人，&lt;br /&gt;
都以至少 50% 的薪资差价被拼多多吸走了。&lt;/p&gt;

&lt;p&gt;不过讲到比惨，似乎总有更惨的，比如“生化环材”的同学就会说：&lt;br /&gt;
“我们也不比互联网轻松啊，互联网至少拿的多啊。”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/shhc.jpeg&#34; alt=&#34;2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;确实。&lt;/p&gt;

&lt;p&gt;况且这只是同时代的横向比较。&lt;br /&gt;
假如是跨时代地去比，&lt;br /&gt;
就更容易把话题引向了“宁为太平狗，莫作离乱人。”的感慨了。&lt;br /&gt;
所以说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个人的成功，&lt;br /&gt;
当然要靠个人奋斗，&lt;br /&gt;
但也要考虑到历史的进程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;四&#34;&gt;（四）&lt;/h1&gt;

&lt;p&gt;从个人的角度，假如类似的事情发生在自己身上，&lt;br /&gt;
我会感到很不值得。&lt;/p&gt;

&lt;p&gt;知乎宇宙里有很多脑洞题目，其中有一个叫&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/316942582&#34;&gt;《假设有个游戏，你可以无偿获得五千元，但有百万分之一的几率会当场毙命。那么你会玩多少次游戏？》&lt;/a&gt;&lt;br /&gt;
理性人们给出的回答是：“这个概率？我能玩到你破产！”&lt;/p&gt;

&lt;p&gt;炉石传说这款游戏因为随机性很大，&lt;br /&gt;
里面也经常有各种各样的概率性斩杀问题。&lt;br /&gt;
疯狂的玩家们给出的回答是：“斩杀概率肯定是 50%，因为要么死了，要么没死。”&lt;/p&gt;

&lt;p&gt;这当然是风马牛不相及的两件事。&lt;br /&gt;
但在我眼中，生命的道理也与之一样：&lt;br /&gt;
“人固有一死，或重于泰山，或轻于鸿毛。”&lt;/p&gt;

&lt;p&gt;我并不欣赏“计算 996 模式工作十年后全身而退的收益比”这样的行为，&lt;br /&gt;
但我非常敬佩那些“明知不可为而为之”的“最美逆行者”们。&lt;br /&gt;
假如公司是你事业的一部分，那么为之奋斗吧，&lt;br /&gt;
否则请一定要爱护好自己的身体，以投身于更大的革命事业中。&lt;/p&gt;

&lt;p&gt;最后，引用保尔柯察金这段话，作为给大家美好的祝愿：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人生最宝贵的是生命，生命对于我们只有一次。&lt;br /&gt;
一个人的生命应当这样度过：&lt;br /&gt;
当他回忆往事的时候，&lt;br /&gt;
他不因虚度年华而悔恨，&lt;br /&gt;
也不因碌碌无为而羞愧。&lt;br /&gt;
在临死的时候，他能够说：&lt;br /&gt;
 “我的整个生命和全部精力，&lt;br /&gt;
  都已献给世界上最壮丽的事业&lt;br /&gt;
  ——为人类的解放而斗争。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件工程实践之网段管理</title>
      <link>https://liriansu.com/posts/2020-12-13-software-engineering-vpc/</link>
      <pubDate>Sun, 13 Dec 2020 21:48:22 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-12-13-software-engineering-vpc/</guid>
      <description>&lt;p&gt;软件工程实践系列文章，&lt;br /&gt;
会着重讲述实际的工程项目中是如何协作开发软件的。&lt;br /&gt;
本文主要介绍了如何规划、搭建、管理网段。&lt;/p&gt;

&lt;h1 id=&#34;outline&#34;&gt;outline&lt;/h1&gt;

&lt;p&gt;本文包括以下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;concepts: 网段中的概念都很基础&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;ip/cidr: IP 是服务的点，而 CIDR 就是描述它的面&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;vpc/subnet: VPC 就是云服务提供划分网段的工具&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;boundary: 网段的设计核心是边界划分&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;scene: 利用场景维度来划分，以区别开发、测试、生产环境&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;network: 利用网络维度来划分，以区分外网、内网&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;example: 实际开发中的例子&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;ipsec: 用作 VPC 打通的常用工具&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;openvpn: 用作连接内网的常用工具&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;conclusion&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;concepts&#34;&gt;Concepts&lt;/h1&gt;

&lt;p&gt;在我们日常开发中，&lt;br /&gt;
只要用到网络就一定会跟各类网段打交道。&lt;br /&gt;
很多时候网段作为一种稳定的基础设施，&lt;br /&gt;
我们并不会注意到它。&lt;br /&gt;
但是关于网段、网络的一些知识，&lt;br /&gt;
是确实在软件工程过程中需要考虑的。&lt;/p&gt;

&lt;h2 id=&#34;ip-and-cidr&#34;&gt;IP and CIDR&lt;/h2&gt;

&lt;p&gt;现代网络中，&lt;br /&gt;
IP 是服务的点，而 CIDR 就是描述它的面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/ip_types.jpg&#34; alt=&#34;ip&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IPv4 的类别分类&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;列举一些能想到的 IP，会包括：&lt;br /&gt;
&lt;code&gt;127.0.0.1&lt;/code&gt; 这个约定的本地地址；&lt;br /&gt;
&lt;code&gt;8.8.8.8&lt;/code&gt;/&lt;code&gt;8.8.4.4&lt;/code&gt; 这个谷歌提供的 DNS 地址；&lt;br /&gt;
&lt;code&gt;59.78.3.25&lt;/code&gt; 这个上海交大东三楼的 IP 地址…&lt;/p&gt;

&lt;p&gt;而 CIDR 则是描述一系列 IP 地址的修饰符。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;59.78.3.25/32&lt;/code&gt; 代表二进制前 32 位都严格与 &lt;code&gt;59.78.3.25&lt;/code&gt; 相等的 IP 地址段（也就是特指这个地址）。&lt;br /&gt;
类似地，&lt;code&gt;10.0.0.0/16&lt;/code&gt; 就是以 &lt;code&gt;10.0.&lt;/code&gt; 开头的 IP 地址段。&lt;/p&gt;

&lt;h2 id=&#34;vpc-and-subnet&#34;&gt;VPC and subnet&lt;/h2&gt;

&lt;p&gt;AWS 作为云服务的始祖，&lt;br /&gt;
它开创了 VPC 服务让用户配置自己的网段，&lt;br /&gt;
后来 VPC 也逐渐成为了云服务的标配。&lt;/p&gt;

&lt;p&gt;VPC 之间可以相互隔离，也可以打通。&lt;br /&gt;
（这里的隔离与打通，指的都是软件上的）&lt;br /&gt;
一般 VPC 会用作区分生产、开发环境。&lt;/p&gt;

&lt;p&gt;比如我们可以在云服务上开两个 VPC，&lt;br /&gt;
生产环境的 CIDR 是 &lt;code&gt;10.0.0.0/16&lt;/code&gt;，&lt;br /&gt;
开发环境的 CIDR 是 &lt;code&gt;10.1.0.0/16&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而 VPC 下面可以拆分 subnet (子网)，&lt;br /&gt;
subnet 需要有更加具体的 CIDR，&lt;br /&gt;
比如生产环境的子网可能会是 &lt;code&gt;10.0.0.0/24&lt;/code&gt;,&lt;code&gt;10.0.10.0/24&lt;/code&gt; 这样的。&lt;/p&gt;

&lt;h1 id=&#34;boundary&#34;&gt;Boundary&lt;/h1&gt;

&lt;p&gt;网段的核心是边界的划分。&lt;br /&gt;
而划分好网段的目的，&lt;br /&gt;
既有安全性的考量，&lt;br /&gt;
也会利用异地达到高可用容灾的目的。&lt;/p&gt;

&lt;h2 id=&#34;scene&#34;&gt;Scene&lt;/h2&gt;

&lt;p&gt;云服务一般在全球各大城市会设立数据中心，&lt;br /&gt;
每个数据中心会有多个机房，&lt;br /&gt;
我们网段的边界至少得以这个为界。&lt;/p&gt;

&lt;p&gt;比如线上服务会跨机房部署，&lt;br /&gt;
分布在多个 subnet 中，&lt;br /&gt;
当某个机房发生清洁工拔电插吸尘器之类的事故时（一般不会发生）&lt;br /&gt;
服务能做到高可用。&lt;/p&gt;

&lt;p&gt;subnet 级别还能配置网络流量的进出权限，&lt;br /&gt;
这点特性可以用来规划内部网络权限。&lt;/p&gt;

&lt;p&gt;比如我们可以划分“外网可进可出”、“外网只出不能进”、“外网不可访问（仅可内网访问）”三类 subnet，&lt;br /&gt;
以部署不同特性的服务（负载均衡、普通业务、数据库）。&lt;/p&gt;

&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;

&lt;p&gt;网络流量走的是内网还是外网也是值得考量的因素。&lt;/p&gt;

&lt;p&gt;除了安全性因素以外，&lt;br /&gt;
一般的云服务商给外网流量定价 1元/GB，&lt;br /&gt;
价格因素也是一个需要考虑的点。&lt;/p&gt;

&lt;p&gt;大部分时候，开发可以严格遵循分层的原则，&lt;br /&gt;
所有前端走的肯定是外网 API，&lt;br /&gt;
所有后端走的肯定是内网 API，&lt;br /&gt;
只有负载均衡、网关层考虑内外网转换的问题。&lt;/p&gt;

&lt;p&gt;还有一些时候，可以通过 DNS 自动配置流量网络。&lt;br /&gt;
比如默认 &lt;code&gt;api.liriansu.com&lt;/code&gt; 指向负载均衡的外网地址，&lt;br /&gt;
但是修改内网的 DNS 使其指向负载均衡的内网地址。&lt;/p&gt;

&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;

&lt;p&gt;最后再附加一些实际开发中的例子。&lt;/p&gt;

&lt;h2 id=&#34;ipsec&#34;&gt;IPsec&lt;/h2&gt;

&lt;p&gt;在业务庞杂了以后，&lt;br /&gt;
就会遇到跨云服务商的开发场景。&lt;br /&gt;
跨云服务商的内网打通，&lt;br /&gt;
一般会用 IPsec 这个工具，&lt;br /&gt;
云服务自己提供的 VPN 服务也是基于此的。&lt;br /&gt;
IPsec 的本质是起两台能外网互通的服务器，&lt;br /&gt;
互相转发流量。&lt;/p&gt;

&lt;p&gt;比如要配置阿里云与亚马逊云互通的步骤大概会包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两边搭建 VPC/subnet (CIDR 不重复)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;两边各起一台有公网访问地址的机器，装好 ipsec&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;配置 ipsec 证书、密钥等&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;打开 ip forwarding, 配置好 iptables 防火墙规则&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;AWS 注意关掉机器的 source/dest check&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;subnet 路由表配置跳转至 ipsec 机器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;打开两边的安全组，即可互通访问&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;traceroute&lt;/code&gt; 命令可用于检测跳转&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;openvpn&#34;&gt;OpenVPN&lt;/h2&gt;

&lt;p&gt;我们还会遇到的一种场景，&lt;br /&gt;
是开发环境接入内网开发。&lt;/p&gt;

&lt;p&gt;这个一般可以用 OpenVPN 之类的工具打通，&lt;br /&gt;
但鉴于目前我们还是用的手动流量转发的路子去搞的，&lt;br /&gt;
等涉及这部分了再在之后的文章里分享吧 :)&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;网段管理是跟开发息息相关的基建，最好能尽早规划好&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;网段规划的核心是边界划分，主要考虑安全性与高可用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;云服务的基础概念是类似的，需要考虑好跨云服务、开发测试生产等多维度网段&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内外网流量的复杂因素，可以通过分层或者 DNS 的方式屏蔽掉&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毕业五年的报告之未来</title>
      <link>https://liriansu.com/posts/2020-11-15-adult-life-future/</link>
      <pubDate>Sun, 15 Nov 2020 21:00:54 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-11-15-adult-life-future/</guid>
      <description>&lt;p&gt;每一年的生命都很重要，&lt;br /&gt;
每一年我也总想获得些不同的&lt;a href=&#34;https://liriansu.com/my-programmer-habits&#34;&gt;经验&lt;/a&gt;。&lt;br /&gt;
现在的我，&lt;br /&gt;
相比于&lt;a href=&#34;https://liriansu.com/adult-life&#34;&gt;毕业三年时的我&lt;/a&gt;，&lt;br /&gt;
更加接受了一个事实：&lt;br /&gt;
“狭义上，我也是个成年人了。”&lt;/p&gt;

&lt;p&gt;广义上的成年人，&lt;br /&gt;
可能是年满十八岁。&lt;br /&gt;
狭义上的成年人，&lt;br /&gt;
是像成年人一样思考、&lt;br /&gt;
像成年人一样生活、&lt;br /&gt;
并且自认为自己是成年人。&lt;/p&gt;

&lt;p&gt;当然，这话很有那种&lt;br /&gt;
“有些人20岁已经死了，但60岁才埋”的中二感觉。&lt;br /&gt;
所以请让我仰望星空，&lt;br /&gt;
讲一些脚踏实地的，&lt;br /&gt;
对未来的思考。&lt;/p&gt;

&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/a-chat-with-roommates&#34;&gt;大学时期对未来的畅想&lt;/a&gt;比较随意，&lt;br /&gt;
觉得以后可能会在上海开分基地，&lt;br /&gt;
也有可能肉身翻墙，&lt;br /&gt;
或者是回广东进入“父母在，不远游，游必有方”的状态。&lt;/p&gt;

&lt;p&gt;但随着成年人生活年岁的增加，&lt;br /&gt;
肉身翻墙的吸引力逐渐下降了。&lt;br /&gt;
一方面是觉得自己的祖国挺温暖的，&lt;br /&gt;
另一方面是习惯了以后，&lt;br /&gt;
也没觉得网络环境多么不便了。&lt;/p&gt;

&lt;p&gt;回广东的话，我确实可以“父母在，不远游”，&lt;br /&gt;
但 Mia 就会“父母在，远，回家得游”…&lt;br /&gt;
以前我总觉得相亲条件里“本地人优先”这一点并不科学，&lt;br /&gt;
但现在，我也算理解了这个想法的出发点了。&lt;/p&gt;

&lt;p&gt;按目前的想法，&lt;br /&gt;
我应该会活在上海这个很舒适的城市里。&lt;br /&gt;
气候、交通、机会这些因素我并不看重，&lt;br /&gt;
我喜欢的是大城市的&lt;del&gt;人口福利&lt;/del&gt;科技辐射跟君子慎独的城市文化。&lt;br /&gt;
科技辐射是指所有民用科技会首先从大城市开始普及；&lt;br /&gt;
而君子慎独是指上海这地方很讲规则，&lt;br /&gt;
并不是人情优先的。&lt;/p&gt;

&lt;p&gt;不过按照我突发奇想、喜欢折腾的性格，&lt;br /&gt;
以后去成都跟大熊猫一起生活、&lt;br /&gt;
去泰国新加坡印度尼西亚、&lt;br /&gt;
去德国科隆住下也确实是未可知的事情呢。&lt;/p&gt;

&lt;h2 id=&#34;职业&#34;&gt;职业&lt;/h2&gt;

&lt;p&gt;虽说在哪生活是未可知的，&lt;br /&gt;
但是做什么工作我其实很清楚：&lt;br /&gt;
做能让技术发挥影响力的事情。&lt;/p&gt;

&lt;p&gt;排去可能性比较低的当业务出身的 HRBP=&amp;gt;HRD 这条职业路线，&lt;br /&gt;
能让技术发挥影响力的职业选择，大体上就是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;专家路线：利用某个领域的深入造诣创造价值，代表职位比如资深工程师、架构师&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;经理路线：以软件工程方法管理项目，代表职位如项目经理、技术主管&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;资本路线：以技术贡献入股，并参与公司级别的经营管理，代表职位如技术VP、CTO&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;专家路线下限高、上限不低、机会也多。&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/company-stategy&#34;&gt;有朋友跟我讲过他的跳槽策略&lt;/a&gt;：&lt;br /&gt;
挑着C轮/D轮的独角兽公司去，&lt;br /&gt;
一两年公司上市，四五年期权变现，&lt;br /&gt;
如此反复，在大公司锻炼的同时，也能获得非常可观的报酬。&lt;br /&gt;
大体量的公司往往能锻炼并使用到屠龙技，&lt;br /&gt;
随着技术力的上升，&lt;br /&gt;
未来像 Linus/Donald-Knuth 一样的专家/科学家也定会人才辈出。&lt;/p&gt;

&lt;p&gt;经理路线更偏工程向，跟公司绑定更深入，同级别影响力也更大。&lt;br /&gt;
某种意义上，&lt;br /&gt;
软件行业像是画家与工厂的结合体。&lt;br /&gt;
既讲究灵感设计与积极性，&lt;br /&gt;
又讲究管理科学与计划性。&lt;br /&gt;
好的经理能在管理、成本、协作的基础上，&lt;br /&gt;
保证最终产品的惊艳质量，&lt;br /&gt;
像张小龙、雷军这样最终会被冠以“产品经理”的桂冠。&lt;/p&gt;

&lt;p&gt;资本路线则机会更少、风险更大，&lt;br /&gt;
但人最宝贵的就是梦想。&lt;br /&gt;
走这条路线的，&lt;br /&gt;
既有做到了拼多多CEO的陈磊，&lt;br /&gt;
也有&lt;a href=&#34;https://www.zhihu.com/question/38295860/answer/76086628&#34;&gt;从饿了么早期做起，但最后却黯然离职的叶峰&lt;/a&gt;。&lt;br /&gt;
更多的是名字被世界吞没的人，&lt;br /&gt;
他们也只能在下一份工作面试时，&lt;br /&gt;
在简历里写上“上一份工作：创业（失败）”。&lt;/p&gt;

&lt;p&gt;按照我现在的年龄与技能点，&lt;br /&gt;
这三个方向完全都是可以去尝试的。&lt;br /&gt;
专家（纯技术）路线能快乐地写代码，&lt;br /&gt;
经理（偏管理）路线可以完成更完美的产品，&lt;br /&gt;
而资本路线，可以把技术的美妙带给更多的人类。&lt;/p&gt;

&lt;h2 id=&#34;行业&#34;&gt;行业&lt;/h2&gt;

&lt;p&gt;这五年多在技术行业里工作，&lt;br /&gt;
除了一大堆的普世溢美之词，&lt;br /&gt;
我对这个行业的两个特质感受非常深：&lt;br /&gt;
终身学习、极致分工。&lt;/p&gt;

&lt;p&gt;终身学习从正面来说，&lt;br /&gt;
就是&lt;a href=&#34;https://liriansu.com/adult-life-memories&#34;&gt;认真对待每一个知识&lt;/a&gt;，&lt;br /&gt;
永远像十五岁的学生一样去认真学习。&lt;br /&gt;
从反面来说，&lt;br /&gt;
就是做技术的人只要懈怠了，&lt;br /&gt;
就会被刚毕业的同学们超越。&lt;/p&gt;

&lt;p&gt;软件技术就像在站在巨人的肩膀上的巨人的肩膀上的巨人的肩膀上去眺望一样，生生不息。&lt;br /&gt;
现世代所流行的应用层技术，&lt;br /&gt;
一部分会沉淀成后世代的底层技术，&lt;br /&gt;
而另一部分则会消失在世代更迭里。&lt;/p&gt;

&lt;p&gt;所以刚毕业的优秀同学们，&lt;br /&gt;
因为年轻，有许多时间学习当下的技术。&lt;br /&gt;
不论是薪资还是实力，&lt;br /&gt;
很容易就把懈怠的技术人超了过去。&lt;/p&gt;

&lt;p&gt;那些期待着靠工作年限、工作经验来积累职业资本的人，&lt;br /&gt;
往往是很难在技术行业生存下去的。&lt;/p&gt;

&lt;p&gt;极致分工的意思，&lt;br /&gt;
其实就是“软件工程师就是信息时代的工人”。&lt;br /&gt;
（附带说一句，这也是最近阶级论在软件行业思潮里很受欢迎的原因）&lt;/p&gt;

&lt;p&gt;这个比喻本意是无奈的技术行业从业者自嘲，&lt;br /&gt;
但是它可以引申出来一点：&lt;br /&gt;
技术行业（特指程序员）缺少传统意义上的社会价值。&lt;/p&gt;

&lt;p&gt;在生活里，&lt;br /&gt;
医生朋友能给你健康意见；&lt;br /&gt;
律师朋友能给你法律建议；&lt;br /&gt;
销售朋友给你介绍了工作里认识的朋友，有医生也有律师；&lt;br /&gt;
但是程序员的工作只有月薪。&lt;/p&gt;

&lt;p&gt;于是看到了这一点的程序员们，&lt;br /&gt;
会积极地与人交互，&lt;br /&gt;
保持稳定积极的社会关系。&lt;br /&gt;
但也有很多程序员，&lt;br /&gt;
在朋友问到“能不能帮我写个小程序”的时候，&lt;br /&gt;
只能回答：“我是后端，不会写前端。”&lt;/p&gt;

&lt;p&gt;而终身学习、极致分工这两个技术行业特质，&lt;br /&gt;
是在考虑“健康工作五十年，幸福生活一辈子”时无法回避的两点。&lt;br /&gt;
有朋友在打算 35 岁攒足够的钱提前退休，&lt;br /&gt;
也有朋友考虑好了年纪大了就换行，&lt;br /&gt;
去参与本地生活服务业的建设了（此处指送外卖）。&lt;/p&gt;

&lt;h2 id=&#34;价值&#34;&gt;价值&lt;/h2&gt;

&lt;p&gt;因为思考未来，&lt;br /&gt;
所以人会思考自己的价值，&lt;br /&gt;
生活的价值、工作的价值、存在的价值。&lt;/p&gt;

&lt;p&gt;再惠（我在的公司）的愿景是“让美食生意更轻松”，&lt;br /&gt;
关于&lt;a href=&#34;https://liriansu.com/my-work&#34;&gt;我工作我之前也写过一些文章&lt;/a&gt;。&lt;br /&gt;
从价值角度来讲，美中不足的主要有两点：&lt;/p&gt;

&lt;p&gt;其一是餐饮这个成熟的服务行业里，&lt;br /&gt;
技术能发挥的作用已经被探索了许多了，&lt;br /&gt;
相比于再多一个小的功能，&lt;br /&gt;
客服一次及时的响应更能让商家、消费者安心。&lt;/p&gt;

&lt;p&gt;其二是餐饮行业虽然高频、市场大、机会多，&lt;br /&gt;
但并不能经常“改变人的命运”。&lt;br /&gt;
“改变命运”的行业，&lt;br /&gt;
人们称之为“新三座大山”：&lt;br /&gt;
住房、医疗、教育。&lt;br /&gt;
正是因为这几个行业的基础性以及重要性，&lt;br /&gt;
国家政府制定了非常多的调控政策。&lt;/p&gt;

&lt;p&gt;倘若未来某一天，&lt;br /&gt;
我准备出门去&lt;del&gt;创业&lt;/del&gt;搞搞事情，&lt;br /&gt;
那我或许会先考虑好，&lt;br /&gt;
如何在这三座大山里找到我的价值。&lt;/p&gt;

&lt;p&gt;不过在那之前，&lt;br /&gt;
我还是先徜徉在代码的海洋里吧 :)&lt;/p&gt;

&lt;h2 id=&#34;梦想&#34;&gt;梦想&lt;/h2&gt;

&lt;p&gt;人考虑现实问题时，容易忘记梦想；&lt;br /&gt;
但仰望梦想时，现实问题仿佛都不重要了。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;https://liriansu.com/about&#34;&gt;我的自述&lt;/a&gt;里，我以前这么写道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我的梦想是世界和平，好人都能幸福，&lt;br /&gt;
以及要成为一个很厉害的人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在我有了更具象的描述，叫：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我的梦想是：&lt;br /&gt;
&lt;strong&gt;世界和平&lt;/strong&gt;，&lt;br /&gt;
&lt;strong&gt;我爱的人跟爱我的人都能幸福&lt;/strong&gt;，&lt;br /&gt;
&lt;strong&gt;我要成为温柔的强者&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有的时候觉得语文真的挺神奇的。&lt;br /&gt;
梦很容易，想也很容易，&lt;br /&gt;
但梦想感觉却没那么容易。&lt;/p&gt;

&lt;p&gt;即使按照从大到小的递进关系来看，&lt;br /&gt;
这几条里看似最简单的一条&lt;br /&gt;
“我要成为温柔的强者”也并不简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/good_and_strong.png&#34; alt=&#34;good-strong&#34; /&gt;&lt;/p&gt;

&lt;p&gt;成年人生活并不像学生一样，&lt;br /&gt;
会有期中、期末、寒假、暑假这种明显的节点让你自省，&lt;br /&gt;
很多人逐渐是靠着惯性活着。&lt;br /&gt;
而靠惯性活着就很难做到“有则改之，无则加勉”了。&lt;/p&gt;

&lt;p&gt;风口让猪飞了起来，&lt;br /&gt;
猪可不能以为自己真能飞。&lt;br /&gt;
按&lt;a href=&#34;https://liriansu.com/adult-life-teamwork&#34;&gt;我自己的说法&lt;/a&gt;，&lt;br /&gt;
叫 Stay Awake；&lt;br /&gt;
而按&lt;a href=&#34;https://liriansu.com/thoughts-on-1984&#34;&gt;电影《辛德勒的名单》的比喻&lt;/a&gt;，&lt;br /&gt;
会这么说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“你可以轻而易举地处决一个集中营的人，但这不是权力。&lt;br /&gt;
真正的权力，是你把刀架在别人脖子上时，可以说：‘我宽恕你’。&lt;br /&gt;
这才是真正的权力。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;结&#34;&gt;结&lt;/h2&gt;

&lt;p&gt;写到此处，&lt;br /&gt;
因为我笔力不足而一分为四的《毕业五年的报告》也终于完工了。&lt;br /&gt;
相比于两年前的《毕业三年的报告》，&lt;br /&gt;
感觉作者的可爱度下降了(x&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/adult-life&#34;&gt;《毕业三年的报告》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/adult-life-memories&#34;&gt;《毕业五年的报告之回忆》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/adult-life-teamwork&#34;&gt;《毕业五年的报告之团队》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/adult-life-code&#34;&gt;《毕业五年的报告之技术》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/adult-life-future&#34;&gt;《毕业五年的报告之未来》&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个系列的下一篇，&lt;br /&gt;
估计也将是两年后、三年后，&lt;br /&gt;
甚至五年后的“毕业十年的报告”了吧。&lt;/p&gt;

&lt;p&gt;或者，看到这的你，&lt;br /&gt;
其实是五年后通过文内超链接点回来的呢？&lt;br /&gt;
嘿嘿。&lt;/p&gt;

&lt;p&gt;那最后，祝你身体健康，有缘再见！&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对加速主义保持清晰认知</title>
      <link>https://liriansu.com/posts/2020-11-12-speedupism/</link>
      <pubDate>Thu, 12 Nov 2020 21:44:34 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-11-12-speedupism/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这屋子太暗，须在这里开一个窗，大家一定不允许的。&lt;br /&gt;
但如果你主张拆掉屋顶，他们就会来调和，愿意开窗了。&lt;/p&gt;

&lt;p&gt;——鲁迅&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;鲁迅先生的这句话，&lt;br /&gt;
很传神地阐述了一个加速主义的例子。&lt;/p&gt;

&lt;h1 id=&#34;认识到加速主义的存在&#34;&gt;认识到加速主义的存在&lt;/h1&gt;

&lt;p&gt;什么是加速主义呢？&lt;br /&gt;
加速主义，&lt;br /&gt;
就是顺着事物发展方向，&lt;br /&gt;
一路不收手地推下去，&lt;br /&gt;
直到失去控制。&lt;br /&gt;
一般加速主义会在什么情况下出现呢？&lt;br /&gt;
不担责的建议决策时。&lt;/p&gt;

&lt;p&gt;除了拆屋顶来开窗这个经典例子，&lt;br /&gt;
加速主义日常生活中也很常见。&lt;/p&gt;

&lt;p&gt;比如年轻男女谈朋友，&lt;br /&gt;
遇到些矛盾，&lt;br /&gt;
就会有很多围观群众拱火：&lt;br /&gt;
“快分手，别谈了！&lt;br /&gt;
连生日/国庆节/双十一/圣诞节/冬天来临都不会给你买礼物的肯定不是好伴侣！”&lt;br /&gt;
但其实恋爱这种冷暖自知的事情，&lt;br /&gt;
真的分手了旁人也不用承担孤独的煎熬，&lt;br /&gt;
往往只会留下“快进到分手”这种一句话的狂欢。&lt;/p&gt;

&lt;p&gt;又比如像写代码的程序员，&lt;br /&gt;
其实可以在项目搭建时，&lt;br /&gt;
引入一些自己喜欢的冷门的技术栈（比如 Lisp）。&lt;br /&gt;
但承受后果的，&lt;br /&gt;
却会是人员离职交接时，&lt;br /&gt;
没人能顶上来做业务的公司。&lt;br /&gt;
而挂在 GitHub 个人主页的一句 &lt;code&gt;I&#39;m Lisper&lt;/code&gt; 也成了此时映照加速主义的最好信条。&lt;/p&gt;

&lt;h2 id=&#34;当下的群体容易产生加速主义&#34;&gt;当下的群体容易产生加速主义&lt;/h2&gt;

&lt;p&gt;2020 年的时代思潮下，&lt;br /&gt;
自由主义与个人权力意识大量觉醒。&lt;br /&gt;
只论个人，&lt;br /&gt;
加速主义微不足道，&lt;br /&gt;
因为_冷暖自知_。&lt;br /&gt;
但在群体的语境下，&lt;br /&gt;
总会浮动着加速主义的潮汐。&lt;/p&gt;

&lt;p&gt;谦虚是美好的品德，&lt;br /&gt;
儒家文化圈中更是。&lt;br /&gt;
群体生活中，不自觉地就会出现比这还夸张的行为。&lt;br /&gt;
比如前阵子多益公司，&lt;br /&gt;
宣布“公司业绩很好，让大家自愿选择降薪”，&lt;br /&gt;
然后嘉奖那些主动降薪的人。&lt;br /&gt;
这个行为在外部看来是“过于弱智，以至于让人怀疑是否在反串”，&lt;br /&gt;
但在内部真正踊跃接受了这个决定的人，&lt;br /&gt;
不也会有抱着“一脚油门踩死，毁灭吧”这样的加速主义心态吗？&lt;/p&gt;

&lt;p&gt;之所以群体容易产生自由主义，&lt;br /&gt;
是因为群体是不需要为结果负全责的。&lt;br /&gt;
天花板被拆掉了，&lt;br /&gt;
受凉了不只有你，&lt;br /&gt;
所谓“天塌了高个子顶着”，&lt;br /&gt;
那嚷嚷一下拆天花板又有什么关系呢？&lt;/p&gt;

&lt;p&gt;比如像&lt;a href=&#34;https://liriansu.com/fight-with-the-feminist-me&#34;&gt;女权男德&lt;/a&gt;、政治正确、性自由这样的话题，&lt;br /&gt;
每一个在当下的群体语境中其实都充斥着加速主义论点。&lt;br /&gt;
正面迎击加速主义，&lt;br /&gt;
不如顺着舆论踩一脚油门，&lt;br /&gt;
吟一句“生命诚可贵，自由价更高。”&lt;/p&gt;

&lt;h2 id=&#34;对加速主义保持清晰认知&#34;&gt;对加速主义保持清晰认知&lt;/h2&gt;

&lt;p&gt;加速主义是主观的、强烈的、不可抗拒的。&lt;br /&gt;
工作生活中，&lt;br /&gt;
我经常看到加速主义的身影，&lt;br /&gt;
并且我也很多次受着加速主义的影响。&lt;/p&gt;

&lt;p&gt;我以前是弹性上班，早上 10:30 左右到即可。&lt;br /&gt;
但工程师同事们习惯懒散自由，&lt;br /&gt;
一方面这个管理方式过于特别，&lt;br /&gt;
另一方面早上客户参观也影响销售情况，&lt;br /&gt;
后来公司便讨论改到了 10:00 上班，迟到罚款。&lt;br /&gt;
讨论时，基于加速主义思想，&lt;br /&gt;
我还加了统计下班时间、引入打卡系统这两个并不弹性的设定。&lt;br /&gt;
虽然打卡没打上，&lt;br /&gt;
但这样的策略一引入，&lt;br /&gt;
早上上班的状态确实焕然一新。&lt;/p&gt;

&lt;p&gt;有时顺着事物发展方向用力一推，&lt;br /&gt;
确实能得到跟认知并不一样的答案。&lt;/p&gt;

&lt;p&gt;还有一个类似的事情，&lt;br /&gt;
就是公司的大家一直觉得网络很卡。&lt;br /&gt;
因为总带宽低，每个设备都被限了低速。&lt;br /&gt;
但后来大家抱怨多了，&lt;br /&gt;
便给每个人的限速都开高了。&lt;br /&gt;
（此处有加速主义存在）&lt;br /&gt;
网络情况却更恶劣了，&lt;br /&gt;
因为只要有一个人卡了网速，&lt;br /&gt;
他占用别人的部分就会更多。&lt;br /&gt;
真正清晰认识到加速主义的办法，&lt;br /&gt;
是合理规划流量、网络分片、加高总带宽。&lt;/p&gt;

&lt;h2 id=&#34;综述&#34;&gt;综述&lt;/h2&gt;

&lt;p&gt;社会上、工作中、生活里少不了要跟群体打交道，&lt;br /&gt;
站在 2020 年的这个时代当下，&lt;br /&gt;
你会观测发现到处都存在着加速主义。&lt;/p&gt;

&lt;p&gt;当你是参与者的时候，&lt;br /&gt;
你可以不必迎击加速主义，&lt;br /&gt;
而是利用加速主义来表达你的态度；&lt;br /&gt;
当你是决策者的时候，&lt;br /&gt;
你需要清晰认识到加速主义，&lt;br /&gt;
从情绪之中摘出真正的价值，&lt;br /&gt;
并与之共事。&lt;/p&gt;

&lt;p&gt;这屋子太暗，&lt;br /&gt;
有人主张拆掉屋顶，&lt;br /&gt;
而你知道，&lt;br /&gt;
他其实是想开扇窗。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一厘米的权力</title>
      <link>https://liriansu.com/posts/2020-11-11-ownership/</link>
      <pubDate>Wed, 11 Nov 2020 20:53:43 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-11-11-ownership/</guid>
      <description>&lt;p&gt;前阵子跟基友们聊到 S1 发的一张图，&lt;br /&gt;
hulucc 感慨：“讲道理这个作者至少占一半锅。”&lt;br /&gt;
eagzzycsl 附：“像是一厘米原则，开发有义务保证最终完整性。”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/bad_ownership.jpg&#34; alt=&#34;bad-ownership&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;一厘米主权&#34;&gt;一厘米主权&lt;/h2&gt;

&lt;p&gt;有一个流传很久的故事，&lt;br /&gt;
说还在柏林墙时期的德国，&lt;br /&gt;
有一个士兵射杀了一名翻墙逃亡的青年。&lt;br /&gt;
因此他被告上了法庭，&lt;br /&gt;
虽然他跟律师都辩称“这不过是执行命令”，&lt;br /&gt;
但法官指出：&lt;br /&gt;
“你确实要执行命令，但你完全可以没打准。”&lt;br /&gt;
最终，这个士兵被判了刑。&lt;/p&gt;

&lt;p&gt;这个故事虽然听起来很鸡汤，&lt;br /&gt;
而且也有一些人质疑故事的真实性，&lt;br /&gt;
但是故事里的道理是真切的：&lt;br /&gt;
良知是人类普世的原则，&lt;br /&gt;
不能因为有借口而降低伦理底线。&lt;/p&gt;

&lt;p&gt;这个故事总让我想到《孟子》里的一节，&lt;br /&gt;
说梁惠王觉得自己当国王当的尽心尽力了，&lt;br /&gt;
能做的都做了。&lt;br /&gt;
但孟子直接地指出了当时社会上存在的一系列问题，&lt;br /&gt;
并且作下了一个振聋发聩的比喻：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;狗彘食人食而不知检，涂有饿莩而不知发；&lt;br /&gt;
人死，则曰：“非我也，岁也。”&lt;/p&gt;

&lt;p&gt;是何异于刺人而杀之，曰：“非我也，兵也！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;梁惠王在执政过程中，&lt;br /&gt;
因为自己的借口能很好地给自己妥协，&lt;br /&gt;
但是世道却离他的期望值越来越远。&lt;/p&gt;

&lt;p&gt;生活中许多时候是可以依靠着借口得过且过的，&lt;br /&gt;
但是到了最终结果时，&lt;br /&gt;
还是得看我们具体做了什么。&lt;/p&gt;

&lt;p&gt;这就是我所认为的：&lt;br /&gt;
可以唯心地思考，&lt;br /&gt;
但要唯物地生活。&lt;/p&gt;

&lt;h2 id=&#34;技术服务业&#34;&gt;技术服务业&lt;/h2&gt;

&lt;p&gt;一厘米主权似乎是一个很遥远的故事，&lt;br /&gt;
我再讲一个我记了好一阵的回忆。&lt;/p&gt;

&lt;p&gt;大学时候在学校网管部，&lt;br /&gt;
每周都要值班报修。&lt;br /&gt;
我印象最深的，&lt;br /&gt;
是一个因为没选上课而上门吵闹了半小时的同学。&lt;/p&gt;

&lt;p&gt;确实，没选上课跟我们负责修网口的网管部同学们有什么关系呢？&lt;br /&gt;
但从他本人的角度来说，&lt;br /&gt;
除去发泄情绪的因素外，&lt;br /&gt;
难用的选课系统跟蹩脚的网络，&lt;br /&gt;
大概也是需要解决的。&lt;/p&gt;

&lt;p&gt;做技术也是如此。&lt;br /&gt;
我见过不少人在合作中，&lt;br /&gt;
都会以“我不管这个”的道理来解决他的问题。&lt;br /&gt;
而这样的人一多，&lt;br /&gt;
就会自然地形成足球场的感觉，&lt;br /&gt;
假如每天只在追逐这不能被解决的足球般的问题，&lt;br /&gt;
那人的热情就会被很快地耗光。&lt;/p&gt;

&lt;p&gt;技术工作里，&lt;br /&gt;
在被定义好的工作范畴中间，&lt;br /&gt;
就会有这么一些灰色的、偏向于服务的事情，&lt;br /&gt;
需要被完成。&lt;/p&gt;

&lt;h2 id=&#34;我没错&#34;&gt;我没错&lt;/h2&gt;

&lt;p&gt;一厘米主权故事里，&lt;br /&gt;
还有一个隐藏的信念，&lt;br /&gt;
叫“我没错”。&lt;/p&gt;

&lt;p&gt;就像头图里的那位开发，&lt;br /&gt;
讲道理，他是可以认为自己没有错。&lt;br /&gt;
不过假如是我，&lt;br /&gt;
我不会这么做。&lt;/p&gt;

&lt;p&gt;技术工作因为它的专业性，&lt;br /&gt;
所以讲出来的话很难被外行质疑。&lt;br /&gt;
就比如我告诉产品：&lt;br /&gt;
“这个功能历史实现逻辑就是这样的。”&lt;br /&gt;
他很难能亲自读代码来验证我说的话。&lt;br /&gt;
但假如我是厨师，我说：“这道菜就是这么做的。”&lt;br /&gt;
显然就有被质疑的空间。&lt;/p&gt;

&lt;p&gt;技术工作里，&lt;br /&gt;
随着工作范畴的固化，&lt;br /&gt;
每个人能获得的借口也越多。&lt;br /&gt;
但正是这种时候，&lt;br /&gt;
才显示出一厘米主权这样，&lt;br /&gt;
谦逊、自省这种品质的宝贵了。&lt;/p&gt;

&lt;p&gt;所以不论任何时候，都要记住：&lt;br /&gt;
人的边界，并不是被划定的，&lt;br /&gt;
我永远拥有多一厘米的权力。&lt;br /&gt;
（冬泳大叔语气）&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>神通中学二三事</title>
      <link>https://liriansu.com/posts/2020-08-31-work-as-schoolmate/</link>
      <pubDate>Mon, 31 Aug 2020 19:45:02 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-08-31-work-as-schoolmate/</guid>
      <description>&lt;p&gt;我的几个好友里，&lt;br /&gt;
灰灰当了语文老师，&lt;br /&gt;
佳佳当了英语老师，&lt;br /&gt;
而我成为了饭堂阿姨，&lt;br /&gt;
我们都有美好的未来。&lt;/p&gt;

&lt;p&gt;（一）&lt;/p&gt;

&lt;p&gt;不知何年何月，&lt;br /&gt;
神通中学成立了。&lt;br /&gt;
“为了一个伟大的目标，&lt;br /&gt;
让天下的同学都有书读！”&lt;br /&gt;
奠基典礼上校长这么说道。&lt;br /&gt;
为了这个不知何年何月但光芒万丈的目标，&lt;br /&gt;
学校从五湖四海招来了一批师资很不错的老师，&lt;br /&gt;
也在市内选拔了一批底子很不错的学生。&lt;/p&gt;

&lt;p&gt;（二）&lt;/p&gt;

&lt;p&gt;敏俊是神通中学的保安。&lt;br /&gt;
因为保安厅就在入口的“神通中学”四个金色大字旁边，&lt;br /&gt;
很多同学都把他漫溢的笑容跟“神通中学”等同在了一起。&lt;br /&gt;
以至于很多毕业的同学回来参加毕业典礼，&lt;br /&gt;
总会问道：“咱们那个爱笑的保安去哪了？”&lt;/p&gt;

&lt;p&gt;其实学校也没有什么安全问题，&lt;br /&gt;
所以作为一个壮实的保安，&lt;br /&gt;
敏俊总是需要时不时干各种杂活。&lt;br /&gt;
比如文艺晚会搬投影仪啦、&lt;br /&gt;
科技界组织操场上的水火箭比赛啦、&lt;br /&gt;
艺术节当油画模特啦等等等等。&lt;/p&gt;

&lt;p&gt;因为性格好，大家也喜欢开他玩笑。&lt;br /&gt;
比如什么“你小熊饼干呢？”&lt;br /&gt;
“食堂阿姨好像特别喜欢你啊！”&lt;br /&gt;
“你这么帅怎么不去当偶像练习生~”&lt;br /&gt;
每次别人这么调侃敏俊，&lt;br /&gt;
他也只是笑着做好一个保安该做好的事情。&lt;/p&gt;

&lt;p&gt;（三）&lt;/p&gt;

&lt;p&gt;神通中学的政治老师是冰冰，&lt;br /&gt;
他也是政治科的科组长，&lt;br /&gt;
四十多岁的冰冰有着跟稳重的外表完全不一的内心。&lt;/p&gt;

&lt;p&gt;虽然每次备课的时候他都认真教育年轻老师，&lt;br /&gt;
但他自己讲课的时候经常是脚踩西瓜皮——讲到哪里算哪里，&lt;br /&gt;
尤其是他讲法律的时候。&lt;br /&gt;
会考以后讲卷子的课，三分钟就把哲学、社会的部分给评完了，&lt;br /&gt;
剩下四十二分钟都在讲法律的题。&lt;br /&gt;
同学们也喜欢听他讲课，&lt;br /&gt;
还有同学从小道消息打听到他以前跟罗翔同学过一段时间。&lt;/p&gt;

&lt;p&gt;不过有一点就是他喜欢拖堂，&lt;br /&gt;
这个教导主任拿他也没办法。&lt;br /&gt;
他也总会把这句话挂在嘴边：&lt;br /&gt;
“现在拖堂是拖你们十分钟，但你们认真听的话，你们一辈子都会受用的！”&lt;br /&gt;
也算是苦口婆心了。&lt;/p&gt;

&lt;p&gt;（四）&lt;/p&gt;

&lt;p&gt;因为原来的地理老师海寒考上了牛津的研究生，&lt;br /&gt;
所以去年学校招了个应届生从实习做起。&lt;br /&gt;
新来的实习老师是四川来的，叫梦琴，&lt;br /&gt;
第一天到级部还给每个人都带了一包兔头，&lt;br /&gt;
连看门的保安都有一份。&lt;/p&gt;

&lt;p&gt;梦琴有一个很明显的缺点，&lt;br /&gt;
跟一个很明显的优点。&lt;br /&gt;
缺点是她虽然是地理系毕业的，&lt;br /&gt;
但对中国地理不太熟悉，&lt;br /&gt;
一次在上课时讲出“辽宁的首都是不是吉林啊”的话以后哄堂大笑。&lt;br /&gt;
导致她来了以后，海寒老师更忙了：&lt;br /&gt;
不仅要帮学生补课还要帮梦琴补课。&lt;/p&gt;

&lt;p&gt;优点就更明显了，&lt;br /&gt;
有她在的地方就不会缺少笑声，&lt;br /&gt;
大家都很喜欢她。&lt;br /&gt;
在她来了神通中学以后，&lt;br /&gt;
每学期的“你最喜欢的老师”匿名评选中，&lt;br /&gt;
梦琴总是能稳居前三名。&lt;/p&gt;

&lt;p&gt;不过这也可能是因为梦琴老师从来不拖堂，&lt;br /&gt;
大概也许是因为她想早点去吃饭吧。&lt;/p&gt;

&lt;p&gt;（五）&lt;/p&gt;

&lt;p&gt;神通中学最开始占地面积挺小的，&lt;br /&gt;
后来扩建以后有了自己的饭堂，&lt;br /&gt;
搬校区以后饭堂又重建了几次。&lt;br /&gt;
虽然饭堂换了几个地方，&lt;br /&gt;
但饭堂阿姨一直没有换过，&lt;br /&gt;
一直就是同学口中“胖胖的布达阿姨”。&lt;/p&gt;

&lt;p&gt;布达阿姨是那种刀子嘴豆腐心的人。&lt;br /&gt;
每次有同学在饭堂要关门前踩点吃饭了，&lt;br /&gt;
布达阿姨都是一边说着“饭没啦饭没啦，不早点来”&lt;br /&gt;
一边把收拾好的饭盆又拿了一个出来打饭。&lt;/p&gt;

&lt;p&gt;布达阿姨最享受的时光，&lt;br /&gt;
是“熊孩子们”吃完饭以后，&lt;br /&gt;
她给自己也打一盆饭，&lt;br /&gt;
坐在饭堂的一角，&lt;br /&gt;
跟其它学校后勤部门的同事聊聊天谈谈八卦。&lt;/p&gt;

&lt;p&gt;不过最近她在苦恼着要不要自己带饭，&lt;br /&gt;
因为后厨做饭油盐给的很重，&lt;br /&gt;
她既想自己做饭吃得清淡一点，&lt;br /&gt;
又不想每天做饭麻烦自己。&lt;/p&gt;

&lt;p&gt;（六）&lt;/p&gt;

&lt;p&gt;关于饭堂阿姨的千古话题，&lt;br /&gt;
就是她们对饭勺的精妙控制。&lt;br /&gt;
经常是一勺美满姻缘，&lt;br /&gt;
一抖红尘再见。&lt;/p&gt;

&lt;p&gt;在大家都埋怨饭堂的饭越来越少的时候，&lt;br /&gt;
保安敏俊倒是不觉得：&lt;br /&gt;
“没有啊，我感觉饭还挺多的？”&lt;/p&gt;

&lt;p&gt;后来吃饭时后勤部聊天，&lt;br /&gt;
布达阿姨邪魅一笑，&lt;br /&gt;
用耐克弯钩般的嘴角上扬揭露了秘密。&lt;br /&gt;
原来布达阿姨了解到，&lt;br /&gt;
敏俊其实高中毕业就出来打工了，&lt;br /&gt;
今年年初的疫情让温州的他现金流接近断裂，&lt;br /&gt;
敏俊已经啃了好几个月的馒头了。&lt;br /&gt;
于是布达阿姨就会在敏俊来吃饭的时候，&lt;br /&gt;
偷偷地给他加点饭，&lt;br /&gt;
米饭加一两，狮子多个头。&lt;/p&gt;

&lt;p&gt;管后勤的晓俊听完直感慨：&lt;br /&gt;
“虽然学校里面无大事，&lt;br /&gt;
但是小事你用真情做，&lt;br /&gt;
也是能做出很大影响的啊！”&lt;br /&gt;
管财务的关口（晓俊死对头）马上不留情面地评论道：&lt;br /&gt;
“陈晓俊你又乱说了！”&lt;/p&gt;

&lt;p&gt;（七）&lt;/p&gt;

&lt;p&gt;其实学校里还有很多微不足道的小事，&lt;br /&gt;
比如爱画画的美术老师重音与爱摄影的留级生几龙碰撞出的火花啦，&lt;br /&gt;
比如明明是副科老师但是呆学校时间比班主任还久的通用技术老师志强啦，&lt;br /&gt;
还有班长钉钉子跟副班长带带子之间的互怼啦。&lt;/p&gt;

&lt;p&gt;不过毕竟这篇小文章只是讲学校的二三事，&lt;br /&gt;
而并不是一本完备的校史。&lt;br /&gt;
就算是完备的校史，&lt;br /&gt;
那也只是过去的辉煌。&lt;br /&gt;
学校的未来，&lt;br /&gt;
依然是依靠每一个学生、每一个老师去书写的。&lt;/p&gt;

&lt;p&gt;不知何年何月，&lt;br /&gt;
神通中学成立了。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毕业五年的报告之技术</title>
      <link>https://liriansu.com/posts/2020-07-12-adult-life-code/</link>
      <pubDate>Sun, 12 Jul 2020 23:45:58 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-07-12-adult-life-code/</guid>
      <description>&lt;p&gt;16年接触了 Web 整套技术栈的我，&lt;br /&gt;
决定在这条路上不断攀爬，&lt;br /&gt;
直到找到我技术上的天花板。&lt;br /&gt;
当时我写了一篇&lt;a href=&#34;https://liriansu.com/backend-skill-tree&#34;&gt;《后端工程师技能树》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;现在回过头再看，&lt;br /&gt;
我并没有按照叶子节点的顺序去一步步做。&lt;br /&gt;
除了系统地学习了解技术知识以外，&lt;br /&gt;
我更多是在“明天上线”以及“线上挂了”的血与火的泥泊里扑腾。&lt;/p&gt;

&lt;p&gt;这篇就以不同的视角，&lt;br /&gt;
记录一下我这几年技术上的感悟吧。&lt;br /&gt;
由于讲述的更偏 Web，&lt;br /&gt;
所以本篇基本都是以再惠的实际开发为例。&lt;/p&gt;

&lt;h2 id=&#34;项目-语言与框架&#34;&gt;项目、语言与框架&lt;/h2&gt;

&lt;p&gt;16年的时候，公司的业务在一个大主站里就可以完全解决了。&lt;br /&gt;
这单个项目不仅包括了全部后端代码，&lt;br /&gt;
还包括了全部前端代码（不过后来前端就拆出去了）&lt;/p&gt;

&lt;p&gt;当时用的是 Python 2.7 + Django 1.8,&lt;br /&gt;
不过由于 Python2 在生命的末期，&lt;br /&gt;
后来我们就&lt;a href=&#34;https://liriansu.com/py2-to-py3&#34;&gt;找了个周末升级到了 Python 3.5&lt;/a&gt;。&lt;br /&gt;
顺带一提，当时不升 Python 3.6 的原因是 Ubuntu 16 默认带的是 Python 3.5。&lt;/p&gt;

&lt;p&gt;Python 是一门非常容易上手的语言，&lt;br /&gt;
我进再惠前其实没有认真用过（连 virtualenv 都不知道是什么，只会 print），&lt;br /&gt;
但很快就可以开始参与业务开发了。&lt;br /&gt;
整个主站在开发周期里，&lt;br /&gt;
框架没有大的变动，&lt;br /&gt;
基本上是前人怎么写的，后人就怎么写。&lt;/p&gt;

&lt;p&gt;当时我在语言上感兴趣的几个点，主要包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;magic method 与元编程：于是我实现了一套根据配置生成接口的逻辑&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;性能、并发与处理能力：于是我们经常在小黑板上画各类网络架构图&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不同框架之间的对比：于是我们内部后面的项目尝试使用了 flask/tornado 等各类框架&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关于语言本身的话题：于是我们内部每天都在讨论&lt;a href=&#34;https://www.yinwang.org/&#34;&gt;垠神@wangyin 的博客&lt;/a&gt;（x&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后来业务线逐渐开始变多，&lt;br /&gt;
我也有机会从零开始搭建一个项目。&lt;br /&gt;
因为是从零开始，所以我心中暗想：&lt;br /&gt;
“以前很多东西我都是知其然不知其所以然，&lt;br /&gt;
这次项目的所有方面我都要完全理解才行。”&lt;br /&gt;
于是那个月所有的业余时间我都在读各种文档…&lt;/p&gt;

&lt;p&gt;不读不知道，一读吓一跳。&lt;br /&gt;
我发现我以前默认的很多习惯用法，&lt;br /&gt;
其实都有更佳的实践：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;轻度使用&lt;/strong&gt;：&lt;br /&gt;
以前项目里会搭配着使用 djangorestframework,&lt;br /&gt;
但我们从来都是手写各种序列化类，&lt;br /&gt;
并没有使用框架自带的 django model 支持。&lt;br /&gt;
而且我们自己实现了一套 schema 验证系统，&lt;br /&gt;
既没有用 djangorestframework,&lt;br /&gt;
也没有用 marshmellow 这样的库。&lt;br /&gt;
（这导致了后面支持 swagger 非常困难）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;缺少检查&lt;/strong&gt;：&lt;br /&gt;
Python 社区中有非常多的检查工具，&lt;br /&gt;
但我们只用到了最基础的 flake8 来验证 PEP8 风格。&lt;br /&gt;
我们在合作编程中，&lt;br /&gt;
因为每个人 PyCharm 配置的不一样，&lt;br /&gt;
解了无数次 import 的冲突。&lt;br /&gt;
（更别提还有数组末行加逗号的冲突了）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;版本老旧&lt;/strong&gt;：&lt;br /&gt;
我们用的很多三方库一直保持着版本更新，&lt;br /&gt;
但我们却一直用着旧的版本（更别说语言本身了，f-string 我们也是老后面才用上的）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些问题在后面的项目开发中，&lt;br /&gt;
我逐个都解决掉了。&lt;br /&gt;
轻度使用的问题好说，找一个哥去研究正确的用法然后去优化就行了。&lt;br /&gt;
（有时这个优化会涉及几百个文件，所以需要一个 vim 用的溜的哥）&lt;br /&gt;
缺少检查也好说，像 flake8/isort/pytest/pylint/yapf/black 我们都尝试使用过，&lt;br /&gt;
后面按照项目规模我们开了不同级别的检查，&lt;br /&gt;
原则上，项目越大检查越严格。&lt;br /&gt;
关于语言与三方库版本的问题，&lt;br /&gt;
我每周基本都会保持跟社区的更新，&lt;br /&gt;
以人肉 dependency bot 的方式去维护代码。&lt;br /&gt;
在解决完这些明显的问题后，&lt;br /&gt;
19年我很开心地跟伙伴们感慨过：&lt;br /&gt;
“我很有信心说，我们写的这个项目就算放在开源社区也是一流的。”&lt;/p&gt;

&lt;p&gt;框架上最终我们还是大规模使用了 Django，&lt;br /&gt;
因为 Django 的整套 ORM 实在是对增删改查这样的业务太契合了。&lt;br /&gt;
性能上我们后面尝试并最终使用了 gevent，&lt;br /&gt;
让整个项目写起来体验一致，&lt;br /&gt;
跑起来性能合格。&lt;/p&gt;

&lt;p&gt;现在要我实现一个标准的 Python Web 服务的话，我会考虑使用这样的技术组合：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用最新的版本号，比如 Python3.8+/Django3+/Celery4.5+ 等&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在 CI 中开启一系列标准检查，比如 flake8/isort/pytest/black&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用 gnumake/pipenv/drf-yasg 这样的工具链&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用 gunicorn+gevent 作为运营环境&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在语言的性能问题成为了关键问题时，考虑使用 golang 重写关键部分（不过一般此时都要更大程度上更新架构了）&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;平台&#34;&gt;平台&lt;/h2&gt;

&lt;p&gt;过去几年的技术生涯里，&lt;br /&gt;
我最主要跟两个平台在打交道：&lt;br /&gt;
一个是云平台 (AWS/Aliyun/Azure)，&lt;br /&gt;
另一个是业务平台（微信开放平台）。&lt;/p&gt;

&lt;p&gt;业务平台没什么特别好说的，&lt;br /&gt;
因为我做的整块业务都是基于微信生态的，&lt;br /&gt;
所以对开放平台、小程序、OpenID/UnionID、支付回调这么一套非常熟悉。&lt;/p&gt;

&lt;p&gt;最早接触的云平台是 AWS(China)，&lt;br /&gt;
我觉得云平台最好的一点是运维扁平化。&lt;br /&gt;
招人的时候我会跟候选人说，&lt;br /&gt;
我们这个职位从网络、业务、数据到部署、监控都要接触。&lt;br /&gt;
而能做到这一点的基础，&lt;br /&gt;
就是我们“去运维化”地让大家直接去对接云平台&lt;br /&gt;
（有些地方可能会简单包一层）。&lt;/p&gt;

&lt;p&gt;最早我们用的是 AWS（国服），&lt;br /&gt;
相比于国际服，国服用户缺少了一些非常基础的设施&lt;br /&gt;
（比如像 ACM/Route53 等）&lt;br /&gt;
导致不论是像 zappa 这种跑 serveless 的库，&lt;br /&gt;
还是 AWS EKS 这种更高阶的服务能力都是缺失的。&lt;br /&gt;
在18年底我司就从 AWS 切换到了 aliyun。&lt;br /&gt;
其实整体的架构没有本质上的差别，&lt;br /&gt;
感受上阿里云的服务的确好些，&lt;br /&gt;
不过按 @lxkaka 的说法也可以叫：&lt;br /&gt;
“他们这个系统假如没地方问的话说不过去啊！”&lt;/p&gt;

&lt;p&gt;目前我们使用云平台的姿势包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最基础的开机器、负载均衡、域名一系列&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;数据相关的 MySQL/Redis/Mongo/EMR 一套&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;监控报警日志相关系统&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;全套托管的 K8S&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随着对云平台使用的更加深入，&lt;br /&gt;
跟云平台强绑定的技术也会越来越多，&lt;br /&gt;
比如像日志系统就基本抛弃了 ELK 拥抱了阿里的日志。&lt;br /&gt;
但从成本的视角上看，&lt;br /&gt;
对工具的使用减少了冗余的运维需求，&lt;br /&gt;
一定程度上是解放了工程师的时间与效能。&lt;/p&gt;

&lt;p&gt;现在要我从头开始搭建云平台的基建的话，我会考虑这样的实现组合：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;拆分 VPC 网段，大部分情况分生产、测试、访客三个网段就可以了（并辅以合适的安全组策略）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;以托管的 K8S 服务为核心搭建业务系统，配上配套基建（云盘、日志、监控等）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用 LB/Gateway 约束网络入口、出口，拆分各网段之间流量，尽量减少网络上的损耗&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;选型时优先考虑云原生功能，如 MySQL/ES/MQ 等&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;p&gt;在大主站时期，&lt;br /&gt;
我们的 Python 服务以 supervisor+virtualenv 裸部署在三种机器上：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web: nginx+uwsgi+django&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Worker: celery worker&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Cron: celery beat&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时的更新代码是用 fabric 直接连入机器 &lt;code&gt;git pull + supervisorctl restart&lt;/code&gt; 二连。&lt;/p&gt;

&lt;p&gt;这样的问题是无缝发版（蓝绿部署）是需要自己手动实现，&lt;br /&gt;
比如我们最早实现了一套基于 AWS LB 的动态添加、摘除节点的逻辑。&lt;br /&gt;
这部分逻辑称不上优雅，&lt;br /&gt;
也需要自己维护。&lt;br /&gt;
而且这么做对机器环境有着强依赖，&lt;br /&gt;
在前文的升级 Python 版本中，&lt;br /&gt;
我们也需要一并进行系统级别的升级。&lt;/p&gt;

&lt;p&gt;不过后来很快我们就进行了全站的 docker 化，&lt;br /&gt;
并有过一段短暂的基于 docker network 的无缝发版实现。&lt;br /&gt;
此时的部署换成了 &lt;code&gt;docker pull + docker(compose) restart&lt;/code&gt;。&lt;br /&gt;
整条技术链路中我们摘掉了 supervisor/fabric/system 相关的依赖。&lt;/p&gt;

&lt;p&gt;伴随着平台从 AWS 迁移到 aliyun，&lt;br /&gt;
我们大部分服务也上了 K8S。&lt;br /&gt;
部署也从上机器部署升级到了 k8s 相关的部署工具链。&lt;/p&gt;

&lt;p&gt;大部分情况项目里用的是手写的 &lt;code&gt;envsubst + kubectl&lt;/code&gt;，&lt;br /&gt;
不过 kubectl 对版本的支持非常有限，&lt;br /&gt;
所以很多时候我们也会附带使用 kustomize。&lt;br /&gt;
helm chart 而言对业务系统提供了多余的版本控制功能&lt;br /&gt;
（我们一般在线上不会同时跑很多个版本，&lt;br /&gt;
往往只会保留最新版跟灰度版）。&lt;br /&gt;
但 kustomize 也仅在输出部署文件上做的比较好，&lt;br /&gt;
在展示部署进度上并没有特别的功能，&lt;br /&gt;
而且&lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/issues/1806&#34;&gt;很多时候会在项目里漏一大堆的 configmap&lt;/a&gt;&amp;hellip;&lt;br /&gt;
所以到目前，我们不少项目都使用了 kapp 进行部署。&lt;/p&gt;

&lt;p&gt;而在构建上，我们从最早的 Jenkins CI 全线迁移到了 GitLab CI。&lt;br /&gt;
除了集成单元测试、体验版自动更新、灰度发布这些核心流程以外，&lt;br /&gt;
我们还深度尝试了许多 GitLab CI 提供的工具集成。&lt;br /&gt;
比如像 kaniko/minio+artifacts/gitlab+sentry 等系列自动集成自动部署的工具基本我们都用到了。&lt;/p&gt;

&lt;p&gt;时至今日，我考虑新起的一个 Python 服务会包括以下的技术组合：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;核心部署流程基于 K8S，生产测试使用相同的配置，以 namespace 区分不同组的业务&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不采用 helm, 而是使用 kubectl+kustomize+kapp 的方式完成部署&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;以合适的姿势起新三样：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对于 HTTP/RESTful 服务, Web 上使用 gunicorn+django (uwsgi 年久失修了)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于内部的 gRPC 调用服务，使用内部的 djangrpc 实现 (基于 django，支持一套代码起 http+grpc)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于异步任务，就是简单的 celery 走起&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对于以上提到的服务，部署中考虑完整的向前兼容、按流量/用户的灰度、标准的监控日志报警的搭建&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;

&lt;p&gt;早期我们的网络拓扑相对简单，&lt;br /&gt;
流量的路线是 &lt;code&gt;外部 ==&amp;gt; aws elb ==&amp;gt; nginx+uwsgi+django(单台机器)&lt;/code&gt;，&lt;br /&gt;
我们仅在整条链路上做了少数配置，&lt;br /&gt;
比如在 aws elb 上配置 https 的处理，&lt;br /&gt;
在机器上做了简单的日志收集。&lt;/p&gt;

&lt;p&gt;而现在我们的网络拓扑有多种路径，&lt;br /&gt;
以其中相对标准的阿里云上托管的 K8S Web 服务为例：&lt;br /&gt;
&lt;code&gt;外部 ==&amp;gt; ali slb ==&amp;gt; k8s ingress ==&amp;gt; nginx ==&amp;gt; gunicorn+django&lt;/code&gt;.&lt;br /&gt;
可以比较发现除了 k8s ingress 层外，&lt;br /&gt;
nginx 层也被单独拆分了出来。&lt;br /&gt;
这样的网络拓扑我们对其的控制粒度更加精细，&lt;br /&gt;
不仅可以在每一层单独处理 IP/流量/日志/行为 等逻辑，&lt;br /&gt;
而且每一层也都是可拆卸可更换的。&lt;br /&gt;
比如目前我们的集群中，&lt;br /&gt;
就有使用到 &lt;code&gt;nginx-ingress-controller&lt;/code&gt; 的，&lt;br /&gt;
也有使用 &lt;code&gt;kong-ingress-controller&lt;/code&gt; 的。&lt;/p&gt;

&lt;p&gt;而在整体的服务架构上，&lt;br /&gt;
我们拆分了三层的服务。&lt;br /&gt;
顶层是 Web 层，这些服务主要对外部提供服务，走的主要是公网流量的 RESTful 调用；&lt;br /&gt;
中间是 Service 层，这些服务主要对内部提供服务，走的主要是内网流量的 RESTful/gRPC 调用&lt;br /&gt;
（我们正在使用 gRPC 逐步替换内网 RESTful）；&lt;br /&gt;
底层是 Tool 层，包括了一系列我们维护的中间件、工具服务或者是包了一层的云原生服务。&lt;/p&gt;

&lt;p&gt;以我现在的认识，在一个中型规模的技术团队（100人规模），我会采取这样的架构技术组合：&lt;br /&gt;
- 以网络为边界拆分内外部流量，外部使用 RESTful HTTP 调用，内部使用 gRPC 调用&lt;br /&gt;
- 在业务合适的情况下，使用比如类似 Kong 这样的技术作为网关，处理鉴权、灰度、分流等系列逻辑&lt;br /&gt;
- 内部服务之间不限制选型（前提是做好人员梯度培养），但要划分清晰的服务边界，进行合适的分层&lt;br /&gt;
- 区分不同层服务的级别，以定义好稳定性要求、创新余地与网络拓扑&lt;/p&gt;

&lt;h2 id=&#34;协作&#34;&gt;协作&lt;/h2&gt;

&lt;p&gt;团队协作的核心，就是人跟人的交流。&lt;/p&gt;

&lt;p&gt;因为业务线相对较多，我们基本上是以 two pizza team 的粒度来拆分团队的&lt;br /&gt;
（two pizza team 的意思就是点外卖时，两份披萨可以让整个团队吃饱）&lt;br /&gt;
每个相对较小的团队会负责数个独立的服务，&lt;br /&gt;
组内成员互为 backup、互相学习、共同成长。&lt;/p&gt;

&lt;p&gt;最早我们的 git 开发流是基于 commit diff 的，&lt;br /&gt;
换句话说只要你的改动是正确的，&lt;br /&gt;
那基本就可以合并进主干分支了。&lt;br /&gt;
——不过我们很快尝到了苦头（这个很快≈三年）&lt;br /&gt;
一些老的代码因为当时的产品也没有留下成建制的 PRD，&lt;br /&gt;
而且我们公司做的是B端产品，逻辑有时又巨特么合理的绕，&lt;br /&gt;
导致后人在 blame history 时，&lt;br /&gt;
经常需要去分析这究竟是 bug 还是 feature。&lt;/p&gt;

&lt;p&gt;到目前，我们整个团队（强行被）达成了一致，&lt;br /&gt;
使用的是“一个 PR 只有一个 Commit 只做一件事情”的基于 rebase 的协作流，&lt;br /&gt;
我们这样产出了接近于线性的完美 git 历史。&lt;/p&gt;

&lt;p&gt;而另一方面，关于版本控制我们基于 git tag 使用了内部的小机器人来管理。&lt;br /&gt;
因为我们不需要考虑旧版本的兼容维护问题，&lt;br /&gt;
所以大部分情况我们用的是日期化的格式 (&lt;code&gt;v2020.07.01&lt;/code&gt;)。&lt;br /&gt;
基于 git tag 我们又跟 sentry-release/ticket-system 做了一系列的工具链，&lt;br /&gt;
包括自动生成版本之间的 changelog，&lt;br /&gt;
自动对每个版本的发布内容进行归类分析等。&lt;/p&gt;

&lt;p&gt;整套使用 git rebase 开发，使用 git tag 发布的协作机制让我们获益不少。&lt;br /&gt;
而为了达到这样的效果，我们在团队内部达成了这样的约定：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;认知上，项目以 rebase 为开发基础&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;没有什么“我不会用 git”的接口，不会可以学。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;个人当然可以喜欢 merge，那请在个人项目里用，团队项目大家统一规范&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;行动上，就做到我们设想的那样好&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;每个 PR 只包含一个 Commit，每个 Commit 只修改一类内容&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;提了 PR 就求 Code Review, Review 了就留评论，评论改完了就合并，不拖泥带水&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;工具上，我们需要有个哥来解决协作工具完善的问题&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;我们优化了 Pipeline 的速度，跑完 97% 覆盖率的单元测试+所有检查只要 3 分钟左右&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;针对线性历史，我们提供了一系列发版、合并、变动检测的机器人助手功能&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了基于 git 的整套开发流，&lt;br /&gt;
我们还共同维护着一整个新手村任务（在以前的文章里有讲过），&lt;br /&gt;
而且我们推行的 Buddy 制度会让一个有经验的同学完全手把手地带新人&lt;br /&gt;
（不过这个具体要看每个人用心的程度了）&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;回过头看，这几年参与的技术讨论、选型、命名、开发、协作、复盘都历历在目。&lt;br /&gt;
了解的技术越多，我就越觉得技术世界的广博与好玩。&lt;br /&gt;
其实做技术就像玩游戏一样，本质上都是打怪升级穿装备。&lt;br /&gt;
本文里讲的，也可能只是我在这世界的一隅，提笔能想起来的一些只言碎语。&lt;/p&gt;

&lt;p&gt;但假如我要把整篇文章都删掉，&lt;br /&gt;
只能留下一句话。&lt;br /&gt;
那我会毫不犹豫地留下这句话：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不会可以学&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/u_can_learn.jpg&#34; alt=&#34;u-can&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（未完待续）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毕业五年的报告之团队</title>
      <link>https://liriansu.com/posts/2020-07-06-adult-life-teamwork/</link>
      <pubDate>Mon, 06 Jul 2020 23:45:13 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-07-06-adult-life-teamwork/</guid>
      <description>&lt;p&gt;从17年底负责一整个团队开始，&lt;br /&gt;
一直到今天，&lt;br /&gt;
我都保持着 Dev + Leader 的双重角色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/weibo/as_leader.png&#34; alt=&#34;weibo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;起&#34;&gt;（起）&lt;/h2&gt;

&lt;p&gt;上篇主要是流水账地记录了一下我零碎的回忆，&lt;br /&gt;
这篇报告我想系统地整理一下我与团队相处的方法论。（或者说团队文化）&lt;br /&gt;
我总想着以后有机会，&lt;br /&gt;
可以去开辟一方属于我自己的土地，&lt;br /&gt;
那时的我或许也会这么去创建、带领、组织团队吧。&lt;/p&gt;

&lt;h2 id=&#34;谨记目标-always-aiming&#34;&gt;谨记目标 - Always Aiming&lt;/h2&gt;

&lt;p&gt;我很喜欢辩证法里关于矛盾的这种观点：&lt;br /&gt;
矛盾有主次之分，很多时候抓住解决了主要矛盾，&lt;br /&gt;
其它次要矛盾也会迎刃而解。&lt;/p&gt;

&lt;p&gt;举个栗子，&lt;br /&gt;
工程师在团队协作流中发挥的作用是我很关注的一个话题。&lt;br /&gt;
同样一个工程师，他主动去工作与被动地接锅，效果差别是很大的。&lt;br /&gt;
所以每次在协作中，&lt;br /&gt;
我都会尽可能地提醒每一个伙伴，&lt;br /&gt;
用户最需要的点在哪、业务的目标是什么、谁需要做什么事情。&lt;br /&gt;
大型项目尤其需要这样的校准。&lt;br /&gt;
很多技术上的难题，或是产品上看起来绝妙的方案，&lt;br /&gt;
可能放在目标上都不值一提。&lt;/p&gt;

&lt;p&gt;在连连团开发初期，&lt;br /&gt;
我们自己写了一个毒液系统，&lt;br /&gt;
提供了一整套实时的数据展示，&lt;br /&gt;
让开发、产品、运营都能很方便地解决自己的困惑。&lt;br /&gt;
后来整套系统用开源的 metabase 重构了一遍，&lt;br /&gt;
演变成了现在的蓝冰内部数据总览，&lt;br /&gt;
时刻用量化的数字瞄准着目标。&lt;/p&gt;

&lt;p&gt;同样的道理，&lt;br /&gt;
放到成员的成长计划也是一样的道理。&lt;/p&gt;

&lt;p&gt;我的团队招人的目标是什么？&lt;br /&gt;
是干活解决业务目标吗？&lt;br /&gt;
是的。（笑）&lt;br /&gt;
但不仅限于此。（严肃）&lt;br /&gt;
在过去的实践中，&lt;br /&gt;
团队的成长不仅源于上篇报告里聊到的招聘理念：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;坚持只招优秀的人，不会可以学。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还源于团队每一个成员与公司的共同成长。&lt;br /&gt;
假如团队只有招聘标准，没有成长计划，&lt;br /&gt;
那么入职即巅峰。&lt;/p&gt;

&lt;p&gt;幸运的是，在过去几年里，&lt;br /&gt;
有很多优秀的同学刚毕业就来了再惠。&lt;br /&gt;
除了技术上的成长，&lt;br /&gt;
我也会特别关注他们薪资上的涨幅。&lt;br /&gt;
我觉得大部分人都是从刚毕业的窘迫中走出来的，&lt;br /&gt;
只要努力去提供一个适合飞翔的环境，&lt;br /&gt;
我们都可以起飞。&lt;/p&gt;

&lt;p&gt;在这几年的团队成长计划中，&lt;br /&gt;
我帮过性格内敛默默贡献的同学争取了（特批的）升职加薪，&lt;br /&gt;
也设立了固定的内部沟通与分享机制，&lt;br /&gt;
还尝试过不定期的《人类补完》邮件计划给团队同步公司级的目标。&lt;/p&gt;

&lt;p&gt;对我而言，团队协作里首先让我想到的方法论就是&lt;strong&gt;谨记目标&lt;/strong&gt;，&lt;br /&gt;
做任何事情都去想办法抓住主要矛盾。&lt;/p&gt;

&lt;h2 id=&#34;快乐协作-keep-laughing&#34;&gt;快乐协作 - Keep Laughing&lt;/h2&gt;

&lt;p&gt;前面好像过于严肃了，让我们快乐一下。&lt;br /&gt;
这是我脑海中经常蹦出来的一句话。&lt;br /&gt;
工程师里也会流传这么一句都市传说：&lt;br /&gt;
人生苦短，我用 Python。&lt;/p&gt;

&lt;p&gt;一个快乐的轻松的环境，&lt;br /&gt;
对事情协作，或者是工程师这种脑力工作者有着非常大的效率提升。&lt;br /&gt;
而且因为工作在里面占的比例非常大，&lt;br /&gt;
一个充满欢笑的工作也更能激发大家的热情，&lt;br /&gt;
或者更狭窄地只说我自己的想法：&lt;br /&gt;
我喜欢充满笑声的团队。&lt;/p&gt;

&lt;p&gt;我们给帮我们提醒 PR 的小机器人加上了昵称功能，&lt;br /&gt;
可能记录着三年前一个同事刚入职时绰号的由来；&lt;br /&gt;
研发跟产品也会在对需求之外的时间互怼&lt;br /&gt;
（表面上针锋相对其实就是打情骂俏.jpg）；&lt;br /&gt;
我们也保持着微信群的非工作消息活跃，&lt;br /&gt;
各类烂梗破图无穷尽。&lt;/p&gt;

&lt;p&gt;对应的，快乐的环境是需要相对宽松的制度的。&lt;br /&gt;
假如团队由是严苛的赏罚、强制的高压、强行统一的思想构成的，&lt;br /&gt;
那团队也是很难长出快乐的小花。&lt;/p&gt;

&lt;p&gt;更进一步，&lt;br /&gt;
快乐的氛围会让大家发展出工作之外的友情，&lt;br /&gt;
而友情会让团队更加紧密、更加团结。&lt;/p&gt;

&lt;h2 id=&#34;都是朋友-make-friends&#34;&gt;都是朋友 - Make Friends&lt;/h2&gt;

&lt;p&gt;我跟 @hulucc 都组织过网游的公会，&lt;br /&gt;
一次夜聊时，我讲到了我关于网游公会稳定的观点：&lt;/p&gt;

&lt;p&gt;假如一个组织是层级制的，&lt;br /&gt;
那这个组织的关键节点就是脆弱的。&lt;br /&gt;
比如我见过不少公会是会长跟核心玩家 AFK 以后就凉了的。&lt;br /&gt;
想让组织变得稳定跟可发展，&lt;br /&gt;
那么这个组织就得是网状的，&lt;br /&gt;
这样每一环都是可以缺失的，&lt;br /&gt;
同时每一环也都是非常重要的。&lt;/p&gt;

&lt;p&gt;而构建网状组织的方法很简单：友情。&lt;/p&gt;

&lt;p&gt;我在的团队里，我不一定跟每个人都保持着很好的关系。&lt;br /&gt;
但是我会关注每一个人有没有在组织里找到至少一个好朋友，&lt;br /&gt;
并且我还会有意在分工时，让好友们做一块项目。&lt;br /&gt;
他们的友情就会在并肩战斗中得到炮火的磨练。&lt;/p&gt;

&lt;p&gt;友情构建的网状组织，&lt;br /&gt;
从团队的角度来说，更加稳定、效率更高、沟通更省力；&lt;br /&gt;
从个人的角度来说，收获了一份互相理解、能交予后背的件事友谊。&lt;br /&gt;
很多从我司毕业的同事，至今也跟他们的好友们保持着联系，&lt;br /&gt;
这些跟他们在工作里学到的技术一样，&lt;br /&gt;
都会是大家一辈子的美好回忆与珍贵财富。&lt;/p&gt;

&lt;p&gt;在实际的协作中，&lt;code&gt;Make Friends&lt;/code&gt; 与 &lt;code&gt;Keep Laughing&lt;/code&gt; 这两条原则相辅相成。&lt;br /&gt;
有不少人跟我说过羡慕我们团队的文化跟精神面貌，&lt;br /&gt;
但让我更开心的是看到大家在工作上有所成长，&lt;br /&gt;
在工作以外的人生中也遇到知音。&lt;/p&gt;

&lt;h2 id=&#34;交换信任-spread-trust&#34;&gt;交换信任 - Spread Trust&lt;/h2&gt;

&lt;p&gt;在团队整体的良好氛围里，&lt;br /&gt;
交换信任就是一个显而易见的方法论了。&lt;br /&gt;
交换信任不仅意味着信任某一个同学，&lt;br /&gt;
还意味着信任着团队这个整体。&lt;/p&gt;

&lt;p&gt;我们在内部的权限、任务认领、发言机制上都给予了每个人最大的信任。&lt;br /&gt;
比如我们日常敏捷开发时，&lt;br /&gt;
只要举手说“我想/我不想做这个”，&lt;br /&gt;
Scrum Master 就会修改对应的分工。&lt;br /&gt;
甚至只要举手说“我想做 Scrum Master”就可以当上 Scrum Master&lt;br /&gt;
（然后成为工具人）&lt;/p&gt;

&lt;p&gt;对于工程师关心的技术话题也是如此，&lt;br /&gt;
我们从不固化某个事情。&lt;br /&gt;
新同学接手项目的时候，&lt;br /&gt;
我也会反复说明：&lt;br /&gt;
“不管你觉得项目里任何地方看不懂或者不科学，&lt;br /&gt;
都随时提出来，我们一起想想办法。”&lt;/p&gt;

&lt;p&gt;还有相对特殊的一点是，&lt;br /&gt;
我在团队里并没有维持固定的 one-one（一对一单独沟通）机制。&lt;br /&gt;
不论是大事小事、业务技术、个人发展、&lt;br /&gt;
传统意义上合适或不合适单独沟通的内容，&lt;br /&gt;
我们都会在固定的周会上跟全团队一起同步这个消息。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Spread Trust&lt;/code&gt; 的方法实践下来，&lt;br /&gt;
最直观能感受到的一点是团队里大家的安全感都很高，&lt;br /&gt;
培养出了非常多有 ownership（主人翁意识）的伙伴。&lt;br /&gt;
因为信任，团队工作不会有后顾之忧，&lt;br /&gt;
大家就可以一起保持 &lt;code&gt;Always Aiming&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;就像《珍珠鸟》里讲的一样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;信赖，往往会创造出美好的境界。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;保持清醒-stay-awake&#34;&gt;保持清醒 - Stay Awake&lt;/h2&gt;

&lt;p&gt;很多都市传说里说新人进公司会有蜜月期。&lt;br /&gt;
撇去这个说法的准确性，&lt;br /&gt;
的确很多时候工作会上头，&lt;br /&gt;
认真的同事认真工作的时候就更加容易上头。&lt;/p&gt;

&lt;p&gt;这时候就需要有“众人皆醉我独醒”的气质了，&lt;br /&gt;
&lt;strong&gt;Stay Awake&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;举些例子。&lt;/p&gt;

&lt;p&gt;团队里吵起来的时候，&lt;br /&gt;
需要分辨是因为观点吵起来的还是因为沟通吵起来的，&lt;br /&gt;
看情况打断这个沟通。&lt;/p&gt;

&lt;p&gt;在做一件看起来百分百有把握的事情的时候，&lt;br /&gt;
一方面鼓励并肯定团队，&lt;br /&gt;
另一方面做好塞翁失马结果让子弹飞一会儿的准备。&lt;/p&gt;

&lt;p&gt;在团队发生变动大家陷入迷茫的时候，&lt;br /&gt;
去了解最全面的信息，&lt;br /&gt;
用积极的想法、活跃的态度去影响团队。&lt;/p&gt;

&lt;p&gt;大部分时候，团队工作是多元的复杂的，很难片面地去评价；&lt;br /&gt;
但个人、尤其是群体，总会倾向于非黑即白的二元论。&lt;br /&gt;
这种时候团队里就需要有个哥站出来，&lt;br /&gt;
给大家展示现实里这张纸的另一面——另一种可能性。&lt;br /&gt;
即使这张纸或许是莫比乌斯环。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Awake&lt;/strong&gt; 的思考时常让我感受到自己跟团队的撕裂，&lt;br /&gt;
但如此的思辨，是的确能对团队整体有很大帮助的。&lt;/p&gt;

&lt;h2 id=&#34;永无止境-never-stop&#34;&gt;永无止境 - Never Stop&lt;/h2&gt;

&lt;p&gt;随着时间的翻滚，历史的进程轰轰作响。&lt;br /&gt;
团队作为一个整体，达到的里程碑会不断增加。&lt;br /&gt;
我们平常接触的事情，往往是有一个固定的终点的。&lt;br /&gt;
比如电影会有一个结尾，&lt;br /&gt;
项目会有一个上线时间，&lt;br /&gt;
每年会有一次述职。&lt;/p&gt;

&lt;p&gt;但在我信奉的这套方法论里，&lt;br /&gt;
团队的锻造、成长、发展是没有止境的，&lt;br /&gt;
在团队里的个体也一样。&lt;br /&gt;
我会每天跟自己说：你很棒。&lt;br /&gt;
但我从不会跟自己说：你足够棒了。&lt;/p&gt;

&lt;p&gt;即使这几年我很多时间需要花在管理的事务里，&lt;br /&gt;
我也一直一头栽在开发的第一线。&lt;br /&gt;
我也给自己加上这个思想钢印：&lt;br /&gt;
我希望我是团队里技术力最强的，&lt;br /&gt;
假如我不是的话，&lt;br /&gt;
那样就更好了，&lt;br /&gt;
意味着有其他哥的天赋乘以努力居然超过我了。&lt;/p&gt;

&lt;p&gt;我会与公司之外的同行、朋友们交流，&lt;br /&gt;
去横向学习如何能更好地发展进化团队；&lt;br /&gt;
我也会像今天一样停下来想一想，&lt;br /&gt;
我所在的团队在过去几年之间的演化之路。&lt;/p&gt;

&lt;p&gt;不论是团队还是个人，&lt;br /&gt;
我们都走着一条永无止境的修行之路，&lt;br /&gt;
与时间为伴，与时间为友。&lt;/p&gt;

&lt;h2 id=&#34;结&#34;&gt;（结）&lt;/h2&gt;

&lt;p&gt;从17年第一次团队开周例会的时候，&lt;br /&gt;
我跟大家分享了我关于个人奋斗的感悟。&lt;/p&gt;

&lt;p&gt;一个人的成长并不是孤立的线性，&lt;br /&gt;
而是多因子的乘法原则，&lt;br /&gt;
让我们写成公式就是：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;成长 = 个人 x 团队 x 公司 x 社会 x 历史进程&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当我们想获得更多的成长时，&lt;br /&gt;
不仅要考虑个人的奋斗、团队的进步、公司的壮大、社会的发展，&lt;br /&gt;
也要考虑历史的进程。&lt;/p&gt;

&lt;p&gt;当我在兼顾个人的奋斗之外，&lt;br /&gt;
还想做出更大的贡献时，&lt;br /&gt;
我就会努力推动团队的进步、公司的壮大、社会的发展。&lt;br /&gt;
有朝一日若是有幸，&lt;br /&gt;
我也希望能参与到历史的进程，&lt;br /&gt;
并骄傲地说出那句：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;苟利国家生死以，&lt;br /&gt;
岂因祸福避趋之。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毕业五年的报告之回忆</title>
      <link>https://liriansu.com/posts/2020-07-05-adult-life-memories/</link>
      <pubDate>Sun, 05 Jul 2020 21:46:03 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-07-05-adult-life-memories/</guid>
      <description>&lt;p&gt;这周末去安吉吃了烧烤。&lt;br /&gt;
里脊肉需要反复被刷油，&lt;br /&gt;
最终它才会散发出迷人的香味。&lt;br /&gt;
人的记忆也是如此。&lt;/p&gt;

&lt;h2 id=&#34;起&#34;&gt;（起）&lt;/h2&gt;

&lt;p&gt;在两年前我写了一篇万字长文&lt;a href=&#34;https://liriansu.com/adult-life/&#34;&gt;《毕业三年的报告》&lt;/a&gt;&lt;br /&gt;
我看着两年前写下的文字，&lt;br /&gt;
仿佛眼前是两年前的紫月给我讲着他当时的心境。&lt;br /&gt;
末了，他还跟我说：&lt;br /&gt;
当你五年级的时候，&lt;br /&gt;
记得要写一篇《毕业五年的报告》。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这篇文章记录了我一些并不靠谱的回忆，&lt;br /&gt;
纯粹个人感想，没有借鉴意义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;一-终身学习&#34;&gt;（一）终身学习&lt;/h2&gt;

&lt;p&gt;在 QAD 时，我并不了解很多 Web 知识，&lt;br /&gt;
比如像 RESTful 这样的概念我就不甚了解。&lt;br /&gt;
当时系统要接入 Jira RESTful API,&lt;br /&gt;
这个事情分给了队友 Raymond 做，&lt;br /&gt;
后来他赴美读书，事情就交接给我了。&lt;br /&gt;
我头疼地想：“接这个锅还要特别学一下 RESTful，&lt;br /&gt;
这个以后不知道有没有用。&lt;br /&gt;
还不如认真学学 sudo 权限组拆分，&lt;br /&gt;
这个可能对业务有用。”&lt;br /&gt;
于是交接时我就没认真看 raymond 的代码，&lt;br /&gt;
结果他写的代码运行的异常稳定，&lt;br /&gt;
到我从 QAD 毕业后我也没有被迫学 RESTful 的借口。&lt;br /&gt;
直到后来，&lt;br /&gt;
我才知道 RESTful 这个概念是如此的基础跟重要。&lt;/p&gt;

&lt;p&gt;后来我在工作里遇到了很多这样的事情：&lt;br /&gt;
有时不得不学习一些“我以为很临时”的事情，&lt;br /&gt;
这些事情甚至不一定是技术方面的：&lt;br /&gt;
比如微信迁移公众号是可以顺带迁移 openid 的；&lt;br /&gt;
比如A支付渠道退款是24小时，但B支付渠道退款是7天；&lt;br /&gt;
比如点菜机是有临时开桌、合并桌台的特殊操作的。&lt;/p&gt;

&lt;p&gt;现在回过头确认，我很认可“认真对待每一个知识”的态度。&lt;br /&gt;
对于像 Vim 这样普世的技术，&lt;br /&gt;
我会非常有信心地安利给身边每一个人：&lt;br /&gt;
这是你学了就一辈子受益的技术。&lt;br /&gt;
对于像 Jira 某个接口这样特定的知识，&lt;br /&gt;
我会把它存在心里，织成一张大的知识图谱。&lt;/p&gt;

&lt;p&gt;这串回忆给我留下的印记是：&lt;br /&gt;
摒弃实用主义，&lt;br /&gt;
保持终身学习。&lt;/p&gt;

&lt;h2 id=&#34;二-海绵宝宝&#34;&gt;（二）海绵宝宝&lt;/h2&gt;

&lt;p&gt;2016年11月28日是再惠录取我的第一天，&lt;br /&gt;
前一天，11月27日，我跟 Mia 一起搬家到了塘桥。&lt;br /&gt;
因为徒手搬了两个人三十多个箱子上下六楼，&lt;br /&gt;
入职第一周我光荣感冒了，&lt;br /&gt;
到了周末感冒没好的我，&lt;br /&gt;
跟着公司去了某个度假村开了次全员年会，&lt;br /&gt;
并与室友 @huangzilong 聊了很多有的没的。&lt;/p&gt;

&lt;p&gt;当时的我就像&lt;a href=&#34;https://liriansu.com/adult-life/&#34;&gt;《三年报告》&lt;/a&gt;里写的那样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我那阵子每天回家都跟女朋友说：&lt;br /&gt;
“我好菜啊，队友好强啊，&lt;br /&gt;
但我真的好开心啊，感觉啥都能学到，&lt;br /&gt;
而且他们下班也会写代码，&lt;br /&gt;
感觉找到同类了啊，不过感觉再也追不上他们了啊”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我能感受到把自己丢到一个新环境的时候，&lt;br /&gt;
就像把海绵丢到水里，&lt;br /&gt;
短时间内我能吸收大量信息。&lt;br /&gt;
而且更令我开心的是，&lt;br /&gt;
即使是我眼中技术力已经很强的伙伴，&lt;br /&gt;
他们也依然是海绵宝宝，&lt;br /&gt;
吸收着外部的信息与知识。&lt;br /&gt;
我始终记得靖哥哥当时讲过的一句话：&lt;br /&gt;
“我们其实也是全栈，只不过不是职能全栈，而是业务全栈。”&lt;/p&gt;

&lt;p&gt;在一个相对较小的团队里（20人），&lt;br /&gt;
我们以前端、后端这样的角色区分了工程师，&lt;br /&gt;
但是每个后端从网络数据库部署这样的基础素质、&lt;br /&gt;
到支付营销微信这样的业务知识都会努力去做到完全了解。&lt;/p&gt;

&lt;p&gt;俗话说“三人行，必有我师焉”，&lt;br /&gt;
越广阔，就意味着要学习的越多。&lt;br /&gt;
所以大家一起，也都成为了会输出想学习能吸收的海绵宝宝。&lt;/p&gt;

&lt;p&gt;这串回忆给我留下的印记是：&lt;br /&gt;
做一个广博的海绵宝宝。&lt;/p&gt;

&lt;h2 id=&#34;三-爱与陪伴&#34;&gt;（三）爱与陪伴&lt;/h2&gt;

&lt;p&gt;公司每周上班五天，早的时候我九点能到家，&lt;br /&gt;
每次在沙发上坐下来以后，我都会问 Mia: “今天学校里都有什么事情呀？”&lt;br /&gt;
然后我们就会讨论一番工作、八卦、人生，非常让我放松。&lt;/p&gt;

&lt;p&gt;公司不打卡，所以偶尔我也会加速清理完一天的事情，&lt;br /&gt;
晚上七点就跑去跟 Mia 约会，&lt;br /&gt;
其实就是在大众点评上找能吃得起的看起来不错的店挨个吃过去。&lt;br /&gt;
有时吃到用我司产品的餐厅，&lt;br /&gt;
我会很兴奋地跟 Mia 讲：“快来试试支付，看有没有服务器出错啦”&lt;/p&gt;

&lt;p&gt;还有很多个夜晚，&lt;br /&gt;
我在房间盯着黑色的屏幕写文章/发版，&lt;br /&gt;
Mia 在隔壁已经沉沉睡去；&lt;br /&gt;
第二天早上我醒来时，&lt;br /&gt;
上班时间比我早一个小时的 Mia 已经出门了。&lt;br /&gt;
我们也会开玩笑，说这种工作日我们就是互相暗恋但是互不相见的室友。&lt;/p&gt;

&lt;p&gt;后来一次跟 @lvxinyan 聊天时，&lt;br /&gt;
他问我对自己的工作有什么想法。&lt;br /&gt;
我想了想，说：&lt;br /&gt;
你应当找一个女朋友。&lt;/p&gt;

&lt;p&gt;假如人生是电影，你就是主角。&lt;br /&gt;
假如你是主角，你就会经历起承转合。&lt;br /&gt;
可能会有这么一天，你从工作回家，&lt;br /&gt;
心里非常沮丧，觉得整片天空都是灰色的。&lt;br /&gt;
但此时一个可爱温柔美丽亲近的美少女问你：&lt;br /&gt;
“今天学校里都有什么事情呀？”&lt;br /&gt;
你就不会被这片单薄的灰色天空影响。&lt;br /&gt;
到了明天，依然晴天。&lt;/p&gt;

&lt;p&gt;这串回忆给我留下的印记是：&lt;br /&gt;
多跟喜欢的人呆在一起。&lt;/p&gt;

&lt;h2 id=&#34;四-招聘理念&#34;&gt;（四）招聘理念&lt;/h2&gt;

&lt;p&gt;我是被 @ldsink 内推进来的，&lt;br /&gt;
后面我也推荐了几个朋友来我司逛逛/面试，&lt;br /&gt;
大家的一致好评是：你们公司好多美少女啊！&lt;br /&gt;
尤其是前台、设计跟 HR 得到了非常多的赞扬与仰慕，&lt;br /&gt;
但是好看的同事，好像并不影响我们很难招人这个事实。&lt;/p&gt;

&lt;p&gt;当时写了一篇&lt;a href=&#34;https://liriansu.com/what-a-hard-backend-interview&#34;&gt;《HR就讨厌我们这样的技术，今年一个offer都没发》&lt;/a&gt;&lt;br /&gt;
后面我还专门统计过当时的面试数据，&lt;br /&gt;
看了 200 封简历，最终才招到了 2 个工程师。&lt;br /&gt;
后来 HR 严厉警告：上海的 Python 工程师简历池已经快被击穿了！&lt;br /&gt;
于是趁着业务发展，我司引入了 Java 技术栈，&lt;br /&gt;
后来更是有华哥跟海兵把控全局，整个招聘节奏才是缓了下来。&lt;/p&gt;

&lt;p&gt;我进再惠的第一周就被拉去当面试官了，&lt;br /&gt;
靠着大学在 NIMO 锻炼的经历我非常顺畅地面了下来，&lt;br /&gt;
遇到过面试刚开始就丢逼走人的，&lt;br /&gt;
也遇到过面试完成为了好朋友的。&lt;/p&gt;

&lt;p&gt;18年我独立负责组一个团队的时候，&lt;br /&gt;
我就在想，究竟怎样才能尽可能地做好。&lt;br /&gt;
然后脑海中就复现了那个经典的思想实验：&lt;br /&gt;
忒修斯之船。&lt;/p&gt;

&lt;p&gt;@luyu 说过一个观点，&lt;br /&gt;
对于互联网的产研同事，&lt;br /&gt;
三年左右跳槽是很常见的现象。&lt;br /&gt;
虽然我不喜欢这样的设定，&lt;br /&gt;
但一个组织的确会面临忒修斯之船这样的困惑。&lt;/p&gt;

&lt;p&gt;后来在一次跟 @hulucc 的聊天中，&lt;br /&gt;
我得到了心里的答案：&lt;br /&gt;
顶级人才构建顶级组织，&lt;br /&gt;
次级人才构建更次级组织。&lt;br /&gt;
但假如我现在还很弱小怎么办？&lt;br /&gt;
很简单，不会可以学。&lt;/p&gt;

&lt;p&gt;所以后来我面试的方法论就从以前期望的“只招优秀且对口的候选人”，&lt;br /&gt;
变成了“只招优秀的候选人”。&lt;br /&gt;
并且在后面的实践中，&lt;br /&gt;
我确认了这条是可行且让我自己、让团队能变得更好的实践。&lt;br /&gt;
后来有同学私下跟我说，&lt;br /&gt;
他觉得团队有种“独特又干净的理想主义气质”，&lt;br /&gt;
他很喜欢。&lt;/p&gt;

&lt;p&gt;这串回忆给我留下的印记是：&lt;br /&gt;
坚持只招优秀的人，&lt;br /&gt;
不会可以学。&lt;/p&gt;

&lt;h2 id=&#34;五-长期价值&#34;&gt;（五）长期价值&lt;/h2&gt;

&lt;p&gt;谢老板退居二线以后，&lt;br /&gt;
再惠又一次邀请华哥来当 CTO。&lt;br /&gt;
在还没最终确定前，拉总跟我一起去参加了华哥的饭局，&lt;br /&gt;
这种提前认识潜在 Leader 的感觉是挺奇妙忐忑的。&lt;/p&gt;

&lt;p&gt;后来18~19年我们在刷完业务所有需求之外，&lt;br /&gt;
整体完成了云平台级别的迁移、架构级别的安全升级、授权统一的项目。&lt;br /&gt;
我最认同的一点是持续为长远的价值投资。&lt;/p&gt;

&lt;p&gt;因为餐饮行业的服务业属性，&lt;br /&gt;
产研在整个链路中是处在中后台提供解决方案跟工具的。&lt;br /&gt;
很容易就变成“办公室做题家”，&lt;br /&gt;
业务方给一道题就做一道题。&lt;br /&gt;
长远看来别说业务全栈了，&lt;br /&gt;
连技术本身也会被懈怠，&lt;br /&gt;
并不会去更新、改进、朝着更高更好的方向去变革。&lt;/p&gt;

&lt;p&gt;这种时候我司里常会念叨一句话：&lt;br /&gt;
“需要有个哥想想办法。”&lt;br /&gt;
于是可能在某个周末，某个深夜，&lt;br /&gt;
或者是某个早早做完事情的时候，&lt;br /&gt;
就会有一个饱含智慧与研究耗时的 PR 被提了出来。&lt;/p&gt;

&lt;p&gt;这串回忆给我留下的印记是：&lt;br /&gt;
每一天都发起变革，&lt;br /&gt;
持续地投资长期价值。&lt;/p&gt;

&lt;h2 id=&#34;六-输入输出&#34;&gt;（六）输入输出&lt;/h2&gt;

&lt;p&gt;之前跟卡布达玩成语接龙，&lt;br /&gt;
卡布达一连接了三个成语并给快乐的我贴上了这样的标签：&lt;br /&gt;
&lt;code&gt;神神叨叨、叨叨逼逼、逼逼赖赖&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;而我想到的是钱钟书在《围城》里讲过的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;譬如咱们这次同船的许多人，没有一个认识的。&lt;br /&gt;
不知道他们的来头，为什么不先不后也乘这条船，以为这次和他们聚在一起是出于偶然。&lt;br /&gt;
假使咱们熟悉了他们的情形和目的，就知道他们乘这只船并非偶然，和咱们一样有非乘不可的理由。&lt;br /&gt;
这好像开无线电。你把针在面上转一圈，&lt;br /&gt;
听见东一个电台半句京戏，西一个电台半句报告，&lt;br /&gt;
忽然又是半句外国歌啦，半句昆曲啦，鸡零狗碎，凑在一起，莫名其妙。&lt;br /&gt;
可是每一个破碎的片段，在它本电台广播的节目里，有上文下文并非胡闹。&lt;br /&gt;
你只要认定一个电台听下去，就了解它的意义。我们彼此往来也如此。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在做神付神点的时候，&lt;br /&gt;
连续几个月我跟 @hulucc 都是公司最晚走的两个人，&lt;br /&gt;
后半夜我们就会一边写代码，&lt;br /&gt;
一边聊着游戏、A岛或者是人为何活着，&lt;br /&gt;
hulucc 给了我许多不亚于 rick&amp;amp;morty 给我的启发。&lt;/p&gt;

&lt;p&gt;这几年我也少有跟各个伙伴促膝长谈的机会，&lt;br /&gt;
但不论是四号线的地铁、莫干山的萤火虫，&lt;br /&gt;
还是雨树湾的电脑旁，海南的夜空，&lt;br /&gt;
都是我这几年工作里难得的回忆。&lt;/p&gt;

&lt;p&gt;刚毕业的时候看《代码大全》，&lt;br /&gt;
里面提到“假如你每年看一本技术书，你就已经超越了90%的同行了。”&lt;br /&gt;
当时的我嗤之以鼻：“你把工程师描述的太无知了。”&lt;br /&gt;
但我现在也时常惊醒，今年（2020）的我一本技术书都没看。&lt;/p&gt;

&lt;p&gt;每段输出都是因为有一段输入，&lt;br /&gt;
所以尽可能地去拥抱每一次输入吧。&lt;/p&gt;

&lt;p&gt;（未完待续）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[原则] 永远在路上</title>
      <link>https://liriansu.com/posts/2020-05-24-principle-infinite-game/</link>
      <pubDate>Sun, 24 May 2020 22:02:34 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-05-24-principle-infinite-game/</guid>
      <description>&lt;p&gt;这天，坐在显示器前的我，&lt;br /&gt;
用键盘写下了我的这条原则：&lt;br /&gt;
&lt;strong&gt;永远在路上&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我做事实际专注于事情本身的用时占比并不高，&lt;br /&gt;
倒是会花很多时间在自我对话、自我思考上。&lt;br /&gt;
不论是事前、事中、还是事后，&lt;br /&gt;
以局外人的角度去思考问题总会特别有趣。&lt;/p&gt;

&lt;p&gt;而且为了渡过年月事务发展的长河，&lt;br /&gt;
我就会借由思考为绳，&lt;br /&gt;
把一根根名为原则的竹子，&lt;br /&gt;
绑成我的一艘小竹筏。&lt;/p&gt;

&lt;p&gt;今天我想分享的一条原则，叫：&lt;/p&gt;

&lt;h2 id=&#34;永远在路上&#34;&gt;永远在路上&lt;/h2&gt;

&lt;p&gt;不拘泥于表达本身的话，&lt;br /&gt;
这句话还可以是“永不停歇”，&lt;br /&gt;
“生命在于折腾”，&lt;br /&gt;
“百尺竿头更进一步”。&lt;br /&gt;
更加具体地阐述&lt;strong&gt;永远在路上&lt;/strong&gt;这句话，&lt;br /&gt;
就是：&lt;/p&gt;

&lt;p&gt;假如一件事情一天就做完了，&lt;br /&gt;
那一周后再去回顾下结果；&lt;br /&gt;
假如一周里你跟新朋友建立了友谊，&lt;br /&gt;
那就让这份友谊再延续一年；&lt;br /&gt;
假如你在一年后站到了不一样的高度，&lt;br /&gt;
那就让这样的旅途持续一生。&lt;/p&gt;

&lt;h3 id=&#34;永远在工作路上&#34;&gt;永远在工作路上&lt;/h3&gt;

&lt;p&gt;工作中，我信奉的“永远在路上”，&lt;br /&gt;
就是每天把每件事都做的比昨天更好，&lt;br /&gt;
即使大家都以为这件事已经完结了。&lt;/p&gt;

&lt;p&gt;我能看到很多人做事情，&lt;br /&gt;
只会把事情本身做好。&lt;br /&gt;
在完结后，&lt;br /&gt;
也许是“不在其位不谋其政”，&lt;br /&gt;
也许是觉得事情已经足够好了，&lt;br /&gt;
这个事情的结果就不会比结果更好了。&lt;br /&gt;
我做事情不会选择这么做。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;https://liriansu.com/engineer-culture&#34;&gt;《为什么我喜欢工程师文化》&lt;/a&gt;中，&lt;br /&gt;
我提到了我司的 &lt;code&gt;the Hitchhiker&#39;s Guide to ZaiHui Dev&lt;/code&gt;,&lt;br /&gt;
俗称“新手村任务”。&lt;/p&gt;

&lt;p&gt;三年前入职的时候我推着补完了这篇文档，&lt;br /&gt;
我便在业余时间一直维护着直到现在，&lt;br /&gt;
算上各种重构的内容，已经贡献了一万多字了，&lt;br /&gt;
加在一起顶我好几篇文章了…&lt;/p&gt;

&lt;p&gt;但也就是这样一篇文章，&lt;br /&gt;
让我能坦然地跟我们的面试候选人说：&lt;br /&gt;
“可能我们整套工程师培训体系不算完美，&lt;br /&gt;
但你做完这套新手村任务以后，&lt;br /&gt;
就能直观地感受到我们做事的风格，&lt;br /&gt;
并且喜欢上这个地方。”&lt;/p&gt;

&lt;p&gt;就像那个流传很广的说法一样：&lt;br /&gt;
“入职一天离职，怪流程；&lt;br /&gt;
入职一周离职，怪HR；&lt;br /&gt;
入职半年离职，怪Leader；&lt;br /&gt;
入职三年离职，怪文化。”&lt;br /&gt;
即使像文化这样玄乎的概念，&lt;br /&gt;
也是在一天天的维护升级优化中做出来的。&lt;/p&gt;

&lt;h3 id=&#34;永远在情感路上&#34;&gt;永远在情感路上&lt;/h3&gt;

&lt;p&gt;情感里，我信奉的“永远在路上”，&lt;br /&gt;
就是以初心来面对一切情感交流，&lt;br /&gt;
不做二元论的决策。&lt;/p&gt;

&lt;p&gt;人类就像是穿梭在三维世界的四维生物，&lt;br /&gt;
他会走过不同的世界。&lt;br /&gt;
很多曾经的好友，&lt;br /&gt;
会因为共同经历变少而慢慢疏远；&lt;br /&gt;
也有感情稳定的双方，&lt;br /&gt;
会因为“我们关系很好啦”的松懈而分离；&lt;br /&gt;
更多的时候，&lt;br /&gt;
我们会看到“没有人比我更了解他”的单方判定。&lt;/p&gt;

&lt;p&gt;现在经常可以在社交平台上看到汹涌的观点，&lt;br /&gt;
但这些被汹涌着裹挟的情感，&lt;br /&gt;
也只不过是“有一说一，这件事不过如此”的瞬时理解。&lt;br /&gt;
在那些消费主义记录美好生活下，&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/320279757&#34;&gt;《90后的你负债多少？》&lt;/a&gt; 或许才是更真实的大众情感。&lt;/p&gt;

&lt;p&gt;情感是复杂的，&lt;br /&gt;
但幸好，人也是复杂的。&lt;/p&gt;

&lt;h3 id=&#34;永远在生活路上&#34;&gt;永远在生活路上&lt;/h3&gt;

&lt;p&gt;生活上，我信奉的“永远在路上”，&lt;br /&gt;
就是用一切方法避免&lt;br /&gt;
“此人，死于20岁，葬于60岁。”&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/adult-life&#34;&gt;我很早就感慨过&lt;/a&gt;，&lt;br /&gt;
自己很怕成为那种&lt;br /&gt;
“工作三年=工作一年+重复两年”的人。&lt;br /&gt;
就像“科技三定律”戏谑的那样，&lt;br /&gt;
真实生活中许多人在一定年纪就死在了自己的舒适区里。&lt;/p&gt;

&lt;p&gt;而我不一样，&lt;br /&gt;
就算我也死在了舒适区里，&lt;br /&gt;
&lt;del&gt;我也要在墓里用这腐朽的声带喊出&lt;/del&gt;&lt;br /&gt;
我也要死的晚一些 :)&lt;/p&gt;

&lt;p&gt;近期因为花在看书上的时间少了，&lt;br /&gt;
而且看的书里成功学占了不少…&lt;br /&gt;
所以写作的时候常常感受到自己笔力不足。&lt;br /&gt;
虽然以前也会感受到自己笔力不足，&lt;br /&gt;
但是最近的羞愧里还包含了：&lt;br /&gt;
“写了这么久文章还是笔力不足”的感受，&lt;br /&gt;
头就更大了。&lt;/p&gt;

&lt;p&gt;但我每次回头看过去的自己写下的文章，&lt;br /&gt;
我都能从拙劣的遣词粗糙的造句里，&lt;br /&gt;
看到当时的我独特的想法，&lt;br /&gt;
往往这些想法还会给几年后的我带来不一样的启发。&lt;/p&gt;

&lt;p&gt;自然而然，&lt;br /&gt;
我的想法、我的行动就会跟着时间一直传承发展下来，&lt;br /&gt;
这使我感受到了自己生命的活性。&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&#34;https://liriansu.com/developer-team&#34;&gt;《如何构建工程师团队》&lt;/a&gt;的结尾中，&lt;br /&gt;
我这么写道&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像唐代斯在最后赠给马克西米连的“等待与希望”一样。&lt;br /&gt;
我的朋友，作为工程师的我想送给你两个词，&lt;br /&gt;
它们饱含着“递归”、“复利”乃至“宇宙膨胀”的内在哲学：&lt;br /&gt;
思考，坚持。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;永远在路上，&lt;br /&gt;
其实就是这样一个原则。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何加速 Docker Build 构建过程</title>
      <link>https://liriansu.com/posts/2020-04-22-boost-docker-build/</link>
      <pubDate>Wed, 22 Apr 2020 22:28:53 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-04-22-boost-docker-build/</guid>
      <description>&lt;h2 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;docker 已经成为现代开发的基础技术，&lt;br /&gt;
而在 docker 开发流中，&lt;br /&gt;
Dockerfile 是最基础的文件。&lt;/p&gt;

&lt;p&gt;一个包括了系统配置、依赖安装、业务代码的 Dockerfile 可能长这样子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM python:3.8-buster
WORKDIR /app

COPY Pipfile Pipfile.lock ./
COPY code /app/code
RUN pip install pipenv
RUN pipenv sync
RUN echo &amp;#34;Asia/Shanghai&amp;#34; &amp;gt; /etc/timezone
RUN dpkg-reconfigure -f noninteractive tzdata
RUN apt-get update
RUN apt-get -y dist-upgrade
RUN apt-get -y install vim tmux git
RUN curl -sL https://sentry.io/get-cli/ | bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后很自然地，&lt;br /&gt;
开发者小周发现：&lt;br /&gt;
每次改完代码以后重新 &lt;code&gt;docker build&lt;/code&gt; 都非常慢。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/xkcd_docker.png&#34; alt=&#34;xkcd-docker&#34; /&gt;&lt;br /&gt;
他需要加速构建过程。&lt;/p&gt;

&lt;h2 id=&#34;改写文件&#34;&gt;改写文件&lt;/h2&gt;

&lt;p&gt;最简单的加速是改写 Dockerfile,&lt;br /&gt;
因为 Dockerfile 中的一些命令 (&lt;code&gt;ADD/COPY/RUN&lt;/code&gt;) 会产生新的 layer,&lt;br /&gt;
而 Docker 会自动跳过已经构建好的 layer。&lt;br /&gt;
所以一般优化的原则基于以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;变动越小的命令，越靠前，增加 cache 使用率。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;合并目的相同的命令，减少 layer 层数。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用国内源，或者内网服务加速构建。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;少装些东西，不是代码依赖的就尽量别装了…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;记得加上合适的注释，以便日后的维护。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;改写以后的 Dockerfile 可能长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM python:3.8-buster
WORKDIR /app

# 默认使用上海时区 + 阿里源
RUN echo &amp;#34;Asia/Shanghai&amp;#34; &amp;gt; /etc/timezone &amp;amp;&amp;amp; dpkg-reconfigure -f noninteractive tzdata &amp;amp;&amp;amp; \
    echo &amp;#34;deb https://mirrors.aliyun.com/debian/ buster main non-free contrib&amp;#34; &amp;gt; /etc/apt/sources.list

# 预装必须的包，sentry-cli 是预先存入内网的
RUN apt-get update &amp;amp;&amp;amp; apt-get -y dist-upgrade &amp;amp;&amp;amp; apt-get -y install git &amp;amp;&amp;amp; \
    wget https://internal-nginx-service.domain.com/sentry.sh /usr/bin/sentry-cli &amp;amp;&amp;amp; \
    pip install pipenv

# 装依赖，顺便祝 pipenv 早日发布新版本
COPY Pipfile Pipfile.lock ./
RUN pipenv sync

# 代码频繁变更，放在文件底部，下面就别加更多命令了
COPY code /app/code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改过以后的版本，&lt;br /&gt;
开发者小周发现，&lt;br /&gt;
每次本地改完代码 build 调试都飞快，&lt;br /&gt;
他很满意。&lt;/p&gt;

&lt;p&gt;但是用公司的分布式 gitlab runner 构建以后，&lt;br /&gt;
他发现：&lt;br /&gt;
有时镜像没用到 cache，又跑了一遍漫长的构建过程。&lt;/p&gt;

&lt;h2 id=&#34;分布式构建&#34;&gt;分布式构建&lt;/h2&gt;

&lt;p&gt;在 codebase 足够大的情况下，&lt;br /&gt;
CI/CD 一般都是分布式多台机器的，&lt;br /&gt;
默认的 docker build 只会从本地寻找 cache layer,&lt;br /&gt;
无法应对如此复杂的场面。&lt;/p&gt;

&lt;p&gt;简单的办法是使用 &lt;code&gt;docker build --cache-from&lt;/code&gt; 指定镜像，&lt;br /&gt;
我们会在 ci 脚本中这么写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker pull LKI/code:latest &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true
docker build . -t LKI/code:latest --cache-from LKI/code:latest
docker push LKI/code:latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这样手写的弊端是逻辑比较臃肿，&lt;br /&gt;
比如要完美适配多分支构建 (dev/master/hotfix/release) 的话，&lt;br /&gt;
往往就要自己实现一套判断究竟 cache from 哪个版本的逻辑。&lt;/p&gt;

&lt;p&gt;更通用的办法是使用类似 &lt;a href=&#34;https://github.com/GoogleContainerTools/kaniko&#34;&gt;GoogleContainerTools/kaniko&lt;/a&gt; 这样的工具来构建。&lt;br /&gt;
最适合 kaniko 的场景是 kaniko + kubernetes,&lt;br /&gt;
但这个我们留到最后一章再讲，&lt;br /&gt;
我们顺着我们的工作流往下看。&lt;/p&gt;

&lt;p&gt;使用 kaniko + docker 的构建，&lt;br /&gt;
我们可以把上面的 pull/build/push 三连改写为以下这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这个命令包括了 cache/build/push&lt;/span&gt;
docker run &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CODE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;/LKI/code:/workspace &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  gcr.io/kaniko-project/executor:latest &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --context dir:///workspace/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --destination LKI/code:latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;and-kubernetes&#34;&gt;and Kubernetes?&lt;/h2&gt;

&lt;p&gt;上面提到，kaniko 可以直接丢到 kubernetes 集群中构建：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: kaniko
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:latest
    args: [&amp;#34;--dockerfile=Dockerfile&amp;#34;,
           # 没错，可以直接从 s3 里捞代码构建
           &amp;#34;--context=s3:///bucket/code/&amp;#34;,
           &amp;#34;--destination=LKI/code:latest&amp;#34;]
    volumeMounts:
      - name: kaniko-secret
        mountPath: /secret
  restartPolicy: Never
  volumes:
    - name: kaniko-secret
      secret:
        secretName: kaniko-secret&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;随着研究的进一步深入，&lt;br /&gt;
很容易想到，&lt;br /&gt;
其实 docker 开发流跟 kubernetes 的开发流理应有更好的集成。&lt;/p&gt;

&lt;p&gt;这就是 &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold/&#34;&gt;GoogleContainerTools/skaffold&lt;/a&gt; 在做的事情了。&lt;br /&gt;
skaffold 不仅支持前面讲到的 kaniko 构建，&lt;br /&gt;
还囊括了 port-forwarding/test/helm-deploy 等一系列常用工作流。&lt;/p&gt;

&lt;p&gt;有兴趣的同学可以自行了解，&lt;br /&gt;
关于 skaffold 的故事我们以后有机会，&lt;br /&gt;
再慢慢讲 :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>若初见与吴建国</title>
      <link>https://liriansu.com/posts/2020-04-21-ruochujian/</link>
      <pubDate>Tue, 21 Apr 2020 21:37:59 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-04-21-ruochujian/</guid>
      <description>&lt;p&gt;若初见总是很喜欢跟吴建国一起放学。&lt;/p&gt;

&lt;p&gt;（一）&lt;br /&gt;
每次放学路上，&lt;br /&gt;
若初见总是非常跳跃地跟吴建国在讲在学校的见闻，&lt;br /&gt;
吴建国也总是默默听着。&lt;/p&gt;

&lt;p&gt;若初见说今天语文考试，&lt;br /&gt;
老师出了一道他特别喜欢的附加题。&lt;br /&gt;
吴建国问这题是什么，&lt;br /&gt;
若初见说附加题是解释你名字的含义：&lt;br /&gt;
“我的名字若初见，&lt;br /&gt;
就人生若只如初见嘛，&lt;br /&gt;
多么简单但帅气的名字。”&lt;br /&gt;
“不会有点中二吗？”&lt;br /&gt;
“中二是在别人反应过来以后，&lt;br /&gt;
但第一次认识我的人肯定觉得我超帅。”&lt;/p&gt;

&lt;p&gt;“不过这个也看人，你就做这题就不行。”&lt;br /&gt;
若初见看着认真看路走路的吴建国说道。&lt;/p&gt;

&lt;p&gt;（二）&lt;br /&gt;
若初见的朋友很多，&lt;br /&gt;
但吴建国的朋友不多。&lt;br /&gt;
不过若初见也会跟吴建国说：&lt;br /&gt;
“你这样挺好的，做你自己。”&lt;/p&gt;

&lt;p&gt;吴建国问：“你是怎么让大家都喜欢你的呢？”&lt;br /&gt;
“很简单，做自己就行了。&lt;br /&gt;
我能跟他们从魔戒的精灵语系聊到南方公园的政治正确，&lt;br /&gt;
也能从强人择原理讲到窃格瓦拉，&lt;br /&gt;
没人不喜欢我。”&lt;/p&gt;

&lt;p&gt;吴建国感慨道：&lt;br /&gt;
“那是，你懂的挺多的，&lt;br /&gt;
我觉得我懂的就越来越少了。&lt;br /&gt;
可能是上学让我越上越狭隘了。”&lt;/p&gt;

&lt;p&gt;“这怎么会呢？”&lt;br /&gt;
若初见一边说一边绕着吴建国转了个圈，&lt;br /&gt;
“你看嘛，俗话叫江山风月本无常主，&lt;br /&gt;
只要你有心，我们这放学路上都是风景。&lt;br /&gt;
比如你看，这棵树其实在对你笑，&lt;br /&gt;
但是实用主义的人类并不知道。”&lt;/p&gt;

&lt;p&gt;“你再看，天边隐隐约约的月亮，&lt;br /&gt;
从他的视角看过来其实我们跟台湾的好友都在一个视界里，&lt;br /&gt;
视线的视。&lt;br /&gt;
这就叫人类的渺小跟天涯的共比邻。”&lt;/p&gt;

&lt;p&gt;“比如还有一种说法叫‘回首之处皆是虚无’，&lt;br /&gt;
这句话是我瞎编的，但瞎编这个词是中文里固有的。”&lt;/p&gt;

&lt;p&gt;吴建国听着若初见讲的一大堆，&lt;br /&gt;
若有所思但又若隐若现。&lt;/p&gt;

&lt;p&gt;（三）&lt;br /&gt;
吴建国跟我们普通小孩一样，&lt;br /&gt;
觉得学校是个认真学习纪律严肃的地方。&lt;br /&gt;
但每次放学路上，&lt;br /&gt;
若初见总会跟他吐槽各种学校的不合理。&lt;/p&gt;

&lt;p&gt;“我们数学老师定了一个特别捞的规则，&lt;br /&gt;
叫考试拿积分，期末换奖品。&lt;br /&gt;
首先不说我觉得物质奖励反而会削弱学习的精神回馈，&lt;br /&gt;
这制度明显有问题：&lt;br /&gt;
得一次全班第一得 20 积分，&lt;br /&gt;
但每进步一名就得 1 积分；&lt;br /&gt;
我们班上一共 48 个同学，&lt;br /&gt;
那我拿两次第一还不如一次倒数第一、一次正数第一刷爆进步奖？”&lt;/p&gt;

&lt;p&gt;说干就干，&lt;br /&gt;
平时考满分的若初见，&lt;br /&gt;
下次考试的时候故意考了0分。&lt;br /&gt;
为了确保自己是有实力的，&lt;br /&gt;
若初见把所有的答案都右延了一位，&lt;br /&gt;
A变成了B，√变成了×，42变成了43。&lt;/p&gt;

&lt;p&gt;听到这种操作后，&lt;br /&gt;
吴建国都呆了。&lt;br /&gt;
不过若初见自豪又失望地补充道：&lt;br /&gt;
“不过这张卷子老师还是给了我满分，&lt;br /&gt;
并且取消了积分奖励这个不够合理的制度。”&lt;/p&gt;

&lt;p&gt;吴建国听出了这句话里的失望：&lt;br /&gt;
“怎么感觉你有种不够尽兴的感觉呢？”&lt;/p&gt;

&lt;p&gt;若初见耸了耸肩，表示无所谓。&lt;/p&gt;

&lt;p&gt;（四）&lt;br /&gt;
这天放学若初见很伤心，&lt;br /&gt;
他爱的人并不爱他。&lt;br /&gt;
吴建国没心没肺地安慰他道：&lt;br /&gt;
“没事，你像我这种长得丑的就没这种烦恼。”&lt;br /&gt;
“嗯，你不懂。”&lt;br /&gt;
一句话又把吴建国给噎住了。&lt;/p&gt;

&lt;p&gt;走了几步，&lt;br /&gt;
若初见还是忍不住继续感慨：&lt;br /&gt;
“我感觉，&lt;br /&gt;
一开始喜欢我的朋友们，&lt;br /&gt;
后来情感连接总是会慢慢褪色，&lt;br /&gt;
最终大家会发现我其实不是个一直有趣的人。&lt;br /&gt;
吴建国，你说世界上这么多外冷内热的人，&lt;br /&gt;
有没有可能存在外热内冷的人呢？”&lt;/p&gt;

&lt;p&gt;“你知道吗？我觉得这是你目前的知识构成导致的。”&lt;br /&gt;
吴建国停下了脚步，&lt;br /&gt;
想了一下措辞：&lt;br /&gt;
“以我对你的了解，你其实一直在追求新鲜而未腐烂的知识。&lt;br /&gt;
不论是你说的‘树也可以有生命’还是‘可以从月亮的角度来观察地球’，&lt;br /&gt;
他们都会在听到的一瞬间被吸收完所有价值。&lt;br /&gt;
就像你的名字‘若初见’一样，&lt;br /&gt;
一切的惊艳都留给了初见。”&lt;/p&gt;

&lt;p&gt;看着情绪逐渐低落的若初见，&lt;br /&gt;
吴建国赶紧补充道：&lt;br /&gt;
“不过这样也没问题。&lt;br /&gt;
就像刚才说的，我长得丑。&lt;br /&gt;
但丑的时候爱我，才是真的爱我。&lt;br /&gt;
美的时候不必爱我，美的时候人人都爱我。”&lt;/p&gt;

&lt;p&gt;（五）&lt;br /&gt;
若初见总是很喜欢跟吴建国一起放学。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>旅行之二·do things matters</title>
      <link>https://liriansu.com/posts/2020-02-08-honeymoon-part-2/</link>
      <pubDate>Sat, 08 Feb 2020 21:48:32 +0100</pubDate>
      
      <guid>https://liriansu.com/posts/2020-02-08-honeymoon-part-2/</guid>
      <description>&lt;p&gt;蜜月旅行第二站，&lt;br /&gt;
从德国的慕尼黑到科隆，&lt;br /&gt;
再到西班牙的巴塞罗那、格拉纳达。&lt;/p&gt;

&lt;h2 id=&#34;收费厕所&#34;&gt;收费厕所&lt;/h2&gt;

&lt;p&gt;上次讲到&lt;a href=&#34;https://liriansu.com/honeymoon-part-1&#34;&gt;德国展示了一种整洁地很严谨的城市风貌&lt;/a&gt;，&lt;br /&gt;
这种感觉还体现在了一点上：收费厕所。&lt;/p&gt;

&lt;p&gt;在德国，&lt;br /&gt;
不论是旅游景点的厕所，&lt;br /&gt;
还是商场的厕所，&lt;br /&gt;
很多都要收个 0.5€ 的入场费。&lt;br /&gt;
（残疾人厕所例外）&lt;/p&gt;

&lt;p&gt;这让上遍天下厕所的我有点恍惚(x。&lt;br /&gt;
我记忆中的上一个收费公厕，&lt;br /&gt;
还是矗立在中学时期的人民广场公交车站旁，&lt;br /&gt;
欢迎着搭车上学的我的光临。&lt;/p&gt;

&lt;p&gt;我以奇葩说式问句问 Mia:&lt;br /&gt;
“以后中国的所有公厕都要收五毛的入场费，&lt;br /&gt;
你支持吗？”&lt;br /&gt;
Mia：“当然支持啊，前提是收费后得像德国一样干净。”&lt;br /&gt;
我：“我也支持，前提是得支持微信/支付宝缴费。”&lt;/p&gt;

&lt;p&gt;于是谈笑间我们又使用了一次“如果电话亭”。&lt;/p&gt;

&lt;h2 id=&#34;如果电话亭&#34;&gt;如果电话亭&lt;/h2&gt;

&lt;p&gt;“如果电话亭”是哆啦A梦带回来的一个未来科技，&lt;br /&gt;
在它的帮助下，&lt;br /&gt;
世界能以你想象的方式运作。&lt;br /&gt;
xkcd 的 what-if 系列也有这个功效。&lt;/p&gt;

&lt;p&gt;科隆大教堂旁边就是莱茵河，&lt;br /&gt;
莱茵河上面躺着一条霍亨索伦桥。&lt;br /&gt;
这个桥的特别之处并不是它名字很魔戒，&lt;br /&gt;
而是关于它有的都市传说：&lt;br /&gt;
把锁挂在桥上，钥匙丢进河里，爱情就会锁住一辈子。&lt;/p&gt;

&lt;p&gt;经&lt;del&gt;标记重捕法&lt;/del&gt;大致估算，&lt;br /&gt;
桥上挂了至少三十万把锁。&lt;/p&gt;

&lt;p&gt;Mia 跟我又聊起了在桥上挂锁情侣们的各种可能。&lt;br /&gt;
就像钱钟书关于收音机的比喻说的一样，&lt;br /&gt;
万千人类有着万千悲欢。&lt;br /&gt;
也像鲁迅说的一样，&lt;br /&gt;
我可以觉得他们聒噪。&lt;/p&gt;

&lt;p&gt;Mia 跟我感慨，&lt;br /&gt;
如果我们遇到的时间不是这么好，&lt;br /&gt;
那可能我们就会错过了。&lt;/p&gt;

&lt;p&gt;这让我想起我爸偶尔也会感慨，&lt;br /&gt;
如果当时他英语能再考好一点，&lt;br /&gt;
他最终可能会缺少很多简单的幸福。&lt;/p&gt;

&lt;p&gt;大雄还是像往常一样，&lt;br /&gt;
经历了失败后把“如果电话亭”还给了哆啦A梦。&lt;/p&gt;

&lt;p&gt;人类的个体的此刻，&lt;br /&gt;
只不过是他漫长生命的一个切片，&lt;br /&gt;
这大概就是高维生物的悲哀。&lt;/p&gt;

&lt;h2 id=&#34;自然&#34;&gt;自然&lt;/h2&gt;

&lt;p&gt;当参观人文景观的时候，&lt;br /&gt;
你总是需要各种各样的背景知识、作者分析、阅读理解、脑内作文。&lt;br /&gt;
但自然景观不一样，&lt;br /&gt;
就仿佛是大自然直接把大片蓝天、延绵山岭、无边海洋给甩到了你的脸上，&lt;br /&gt;
感知一下就从脑子掉进了脊椎血脉中。&lt;/p&gt;

&lt;p&gt;在巴塞罗那最后一天的下午我们去了蒙锥克山，&lt;br /&gt;
没有云的天空就像是蓝屏的 windows，&lt;br /&gt;
看不见的空气弥漫着植物的清香，&lt;br /&gt;
在山顶上看到的海天线就像是《楚门的世界》里看到的一样无暇。&lt;/p&gt;

&lt;p&gt;欧洲的小雨是跟着云走的，&lt;br /&gt;
而每朵云是跟着它的心情走的，&lt;br /&gt;
心情好就跑边上玩了，&lt;br /&gt;
心情不好就一边哭一边到处窜。&lt;/p&gt;

&lt;p&gt;所以地球这边打伞的人类比例明显下降了，&lt;br /&gt;
下雨了就戴个帽子躲躲雨，&lt;br /&gt;
出太阳了就懒洋洋地晒下阳光，&lt;br /&gt;
非常惬意。&lt;/p&gt;

&lt;p&gt;上海咋不是这样呢？&lt;br /&gt;
我不禁想。&lt;br /&gt;
可能是因为不是盟军，&lt;br /&gt;
没有天气控制器的原因吧。&lt;br /&gt;
我不禁这么回答自己。&lt;/p&gt;

&lt;h2 id=&#34;高迪&#34;&gt;高迪&lt;/h2&gt;

&lt;p&gt;虽说地球这边的天空令人沉醉，&lt;br /&gt;
但作为游客还是得有游客的自觉，&lt;br /&gt;
抱着包就在巴塞罗那踩遍了热门的人文景点：&lt;br /&gt;
米拉之家、巴约之家、圣家堂。&lt;/p&gt;

&lt;p&gt;这些建筑都有一个共同点：&lt;br /&gt;
建筑师都叫高迪。&lt;br /&gt;
精确的来说，&lt;br /&gt;
建筑师都是同一个人，他叫高迪。&lt;/p&gt;

&lt;p&gt;具体的彩虹屁就不吹了，&lt;br /&gt;
希望读者们有机会也可以去看看。&lt;br /&gt;
它最令我感到神奇的一点是：&lt;br /&gt;
高迪把“业务代码”写成了“传世名作”。&lt;/p&gt;

&lt;p&gt;米拉之家其实就是有个有钱人叫米拉，&lt;br /&gt;
他出钱让高迪帮他建房子，&lt;br /&gt;
但高迪硬是把一个工程作品做成了一个艺术作品。&lt;br /&gt;
巴约之家也是如此。&lt;/p&gt;

&lt;p&gt;想到这，&lt;br /&gt;
我瞻仰圣家堂彩绘玻璃的眼神，&lt;br /&gt;
明亮地更加复杂了。&lt;/p&gt;

&lt;h2 id=&#34;do-things-matters&#34;&gt;do things matters&lt;/h2&gt;

&lt;p&gt;我以前跟朋友们论道时，&lt;br /&gt;
经常会被反问的问题是：&lt;br /&gt;
“像 Linus 的确是厉害啊，&lt;br /&gt;
不过我们这种写业务代码的，&lt;br /&gt;
也不可能做出他们那样的作品吧。”&lt;/p&gt;

&lt;p&gt;这种时候，没有作文素材的我也只能更玄学地说：&lt;br /&gt;
“世界会因你而闪耀，&lt;br /&gt;
最终我们肯定都会搞个大新闻的。”&lt;br /&gt;
干巴巴的解释也只会让朋友苦笑着回答：&lt;br /&gt;
“你能这么想是因为你不一样……”&lt;/p&gt;

&lt;p&gt;我的朋友，&lt;br /&gt;
米拉在发布他的建房任务时，&lt;br /&gt;
他也不会说：“我要建一个世界文化遗产。”&lt;br /&gt;
高迪拿到的不过是“给米拉建一个房子”的任务，&lt;br /&gt;
世界上也有千千万万的工程师拿到了建房子的任务。&lt;/p&gt;

&lt;p&gt;但世界因为高迪而改变，&lt;br /&gt;
他用自己的才华跟心血把事情做出了不一样的杰出。&lt;/p&gt;

&lt;p&gt;我脑子里面立即蹦出了一句 slogan: &lt;code&gt;do things matters&lt;/code&gt;。&lt;br /&gt;
这不仅意味着努力去核心岗位做重要的事情，&lt;br /&gt;
还意味着每一件事都会因为是我做的，而 &amp;lsquo;matters&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;世界上只有一个高迪，&lt;br /&gt;
世界上也只有一个你，&lt;br /&gt;
&lt;code&gt;do things matters&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>旅行之一·可能回不去了</title>
      <link>https://liriansu.com/posts/2020-01-31-honeymoon-part-1/</link>
      <pubDate>Fri, 31 Jan 2020 06:38:22 +0100</pubDate>
      
      <guid>https://liriansu.com/posts/2020-01-31-honeymoon-part-1/</guid>
      <description>&lt;p&gt;蜜月旅行第一站，&lt;br /&gt;
从上海到多哈再到慕尼黑的城市中心。&lt;/p&gt;

&lt;h2 id=&#34;时差&#34;&gt;时差&lt;/h2&gt;

&lt;p&gt;老实来说，&lt;br /&gt;
这是我第一次体会到物理时差，&lt;br /&gt;
以前都是&lt;del&gt;生物&lt;/del&gt;精神时差控制着我。&lt;/p&gt;

&lt;p&gt;慕尼黑在东一区，&lt;br /&gt;
我现在离 ED 在的伦敦更近了，&lt;br /&gt;
让我更能悟到半夜上线看到 ED 跟他夫人在刀塔的心情。&lt;/p&gt;

&lt;p&gt;晚上十点多我就睡过去了，&lt;br /&gt;
第二天凌晨五点自然醒来后，&lt;br /&gt;
我跟同样早醒的 Mia 说：&lt;br /&gt;
“诶，看来时差是的确会影响人的生物钟诶。”&lt;br /&gt;
Mia：“哦，我平时这个点都是自然醒的。”&lt;/p&gt;

&lt;h2 id=&#34;疫情&#34;&gt;疫情&lt;/h2&gt;

&lt;p&gt;第一天在住处安定下来以后，&lt;br /&gt;
我们想着打电话问问卡塔尔航空的国内客服，&lt;br /&gt;
看回去的航班会不会被取消，&lt;br /&gt;
结果电话中提示：“不在服务时间中。”&lt;/p&gt;

&lt;p&gt;微博上不少同学说，&lt;br /&gt;
因为疫情在国外有被差别对待，&lt;br /&gt;
我感觉其实还行。&lt;br /&gt;
大马路上的陌生人也并不会有什么交流，&lt;br /&gt;
外国人对中国人造成的语言伤害，&lt;br /&gt;
未必有其他省同胞对湖北同胞造成的语言伤害大。&lt;/p&gt;

&lt;p&gt;连上了国外的网，&lt;br /&gt;
Mia 与我依然刷的是国内的疫情。&lt;br /&gt;
Mia 感慨：“感觉我们像是逃到了个没人管的地方。”&lt;br /&gt;
我义正言辞地回答：“慕尼黑不是法外之地！”&lt;/p&gt;

&lt;h2 id=&#34;出租&#34;&gt;出租&lt;/h2&gt;

&lt;p&gt;我们叫了辆出租从机场到酒店，&lt;br /&gt;
土耳其的司机大叔操着浓重的口音跟我们讲：&lt;br /&gt;
“Don&amp;rsquo;t taxi. Take trains!”&lt;/p&gt;

&lt;p&gt;土耳其大叔说他在德国呆了二三十年，&lt;br /&gt;
但就最近德国人都疯了。&lt;br /&gt;
我们问为什么，&lt;br /&gt;
他说超市里的口罩全被抢光了！&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;我们路边经过了很多标着 BMW 标记的建筑，&lt;br /&gt;
司机说：慕尼黑经济是这边的 number one,&lt;br /&gt;
一方面是因为举世闻名的啤酒节，&lt;br /&gt;
另一方面也是因为这里有很多的 Fabric.&lt;br /&gt;
我：“Wow, great!”&lt;br /&gt;
后来 Mia 提醒我，&lt;br /&gt;
这个 Fabric 是司机的德英混用口音的一部分。&lt;/p&gt;

&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;

&lt;p&gt;德语一直给我一种很硬核的感觉，&lt;br /&gt;
虽然我并不懂多少德语，&lt;br /&gt;
也就靠两句 &lt;code&gt;Gutten Tag&lt;/code&gt; 跟 &lt;code&gt;Danke&lt;/code&gt; 走天下。&lt;/p&gt;

&lt;p&gt;我们住在慕尼黑中央火车站旁边，&lt;br /&gt;
城市的建筑分布是非常严谨的街区式，&lt;br /&gt;
横平竖直非常让强迫症感到愉悦。&lt;/p&gt;

&lt;p&gt;在住处洗手的时候，&lt;br /&gt;
我摸到水龙头里特别细腻的水，&lt;br /&gt;
非常惊讶地跟 Mia 感慨道：&lt;br /&gt;
“这水看起来好干净啊，甚至有种能喝的错觉！”&lt;br /&gt;
Mia：“可以喝，但没必要。”&lt;/p&gt;

&lt;h2 id=&#34;乡村&#34;&gt;乡村&lt;/h2&gt;

&lt;p&gt;去天鹅堡的路上，&lt;br /&gt;
德国向我们展示了它的大乡村风貌。&lt;/p&gt;

&lt;p&gt;广袤的田野上散落着许多尖顶红瓦白墙房，&lt;br /&gt;
簇拥在一起的样子就是《席德梅尔的文明》里城镇的样子。&lt;br /&gt;
大片的田野都没有种特别的庄稼，&lt;br /&gt;
都是平整的草地与没有人类的清新空气。&lt;br /&gt;
我跟 Mia 讨论说，&lt;br /&gt;
这要是在中国，&lt;br /&gt;
那多么浪费田地呀，&lt;br /&gt;
也不种些白菜胡萝卜葡萄西红柿什么的。&lt;/p&gt;

&lt;p&gt;不过即使是没什么人的田间小镇，&lt;br /&gt;
德国人还是会把房子的白墙刷的非常干净。&lt;br /&gt;
这种感觉也在我们去了各式各样的洗手间以后冒了出来：&lt;br /&gt;
德国城市是真的会注意干净整洁。&lt;/p&gt;

&lt;p&gt;这很好，值得学习。&lt;/p&gt;

&lt;h2 id=&#34;食物&#34;&gt;食物&lt;/h2&gt;

&lt;p&gt;第一天放下东西以后，&lt;br /&gt;
我们去尝试了猪肘与本地啤酒。&lt;/p&gt;

&lt;p&gt;猪肘的皮做的硬又脆，&lt;br /&gt;
整一大块肉吃起来腻得很沉醉，&lt;br /&gt;
于是盘里还会配上一堆腌白菜跟一块大土豆丸子。&lt;br /&gt;
本地的小麦啤酒闻起来很香，&lt;br /&gt;
除此之外也给不出什么对照组的评价了。&lt;/p&gt;

&lt;p&gt;本地的食物店全部都在卖面包跟咖啡，&lt;br /&gt;
这里的面包有很多种：&lt;br /&gt;
有一大类是纯硬的干面包，&lt;br /&gt;
以至于店里会有专门的电锯切割机来切面包；&lt;br /&gt;
还有一大类是近似于三文治的面包，&lt;br /&gt;
里面的馅会囊括奶酪、生菜、西红柿、腌黄瓜、腌猪肉等一切能加的配菜。&lt;/p&gt;

&lt;p&gt;来了这么几天，&lt;br /&gt;
面包是吃了很多，&lt;br /&gt;
米饭是一粒没沾，&lt;br /&gt;
有一种我已经不住在中国的错觉。&lt;/p&gt;

&lt;h2 id=&#34;物价&#34;&gt;物价&lt;/h2&gt;

&lt;p&gt;作为一个外来客，&lt;br /&gt;
很多可能本地人习以为常的设定我都觉得很新鲜。&lt;br /&gt;
比如一点是这里的物价比例是不一样的。&lt;/p&gt;

&lt;p&gt;Mia 与我去逛本地的超市，&lt;br /&gt;
我们在牛奶区流连忘返：&lt;br /&gt;
一支 1L 的牛奶只要 0.99€！&lt;br /&gt;
于是我三天内喝了两升牛奶放了一堆屁。（是真的）&lt;br /&gt;
在水果店，我们买了两斤多的苹果也就花了 1€ 左右。&lt;/p&gt;

&lt;p&gt;与便宜的基础食品对应的，&lt;br /&gt;
在其它的一些方面显得就比中国贵很多。&lt;/p&gt;

&lt;p&gt;比如我们坐公交，&lt;br /&gt;
单程一趟就要 5€ 左右。&lt;br /&gt;
理发店一次洗剪吹就是 20€ ……&lt;/p&gt;

&lt;p&gt;更好玩的是，&lt;br /&gt;
我们买一瓶 1L 的&lt;del&gt;农夫山泉&lt;/del&gt;纯净水，&lt;br /&gt;
总价是 0.44€，&lt;br /&gt;
其中水的价格是 0.19€，&lt;br /&gt;
但是瓶子的价格是 0.25€。&lt;/p&gt;

&lt;h2 id=&#34;erlangen&#34;&gt;erlangen&lt;/h2&gt;

&lt;p&gt;在德国的第三天，&lt;br /&gt;
我们买了张单日票坐火车去 erlangen 找老韩玩。&lt;/p&gt;

&lt;p&gt;德国的车站也不需要什么身份证明，&lt;br /&gt;
既没炸鸡验票口也没固定座位，&lt;br /&gt;
买了票自己上车找空位坐就行了。&lt;br /&gt;
我立马想起来小学时候看的检票员系列笑话，&lt;br /&gt;
果然是一方水土一方笑话。&lt;/p&gt;

&lt;p&gt;老韩是 Mia 十年的好友。&lt;br /&gt;
写到这我也是一惊，&lt;br /&gt;
我们大学的同学，&lt;br /&gt;
现在换句说法居然能说是十年的好友了，&lt;br /&gt;
时间真的不经花。&lt;/p&gt;

&lt;p&gt;我在 erlangen 看到了开放式的大学，&lt;br /&gt;
Mia 跟我说德国的大学都是这样的。&lt;br /&gt;
整个小镇也不大，&lt;br /&gt;
一条主街横穿了整个镇，&lt;br /&gt;
主街两旁分布着图书馆、面包店、啤酒厂、教室、流动图书室、大型商场。&lt;br /&gt;
整条街上行走的都是充满朝气的年轻面孔，&lt;br /&gt;
大学就像是被拆成了许多条隐形的河流，&lt;br /&gt;
与 erlangen 这个镇融合在了一起。&lt;/p&gt;

&lt;p&gt;我们问老韩周末一般做什么，&lt;br /&gt;
老韩笑着说：&lt;br /&gt;
“他们说现在国内朋友的感受，&lt;br /&gt;
就是我们留学生的感受，&lt;br /&gt;
非常无聊。”&lt;/p&gt;

&lt;p&gt;不过在了解到德国有不少程序员的需求，&lt;br /&gt;
没有摆在台面上的年龄歧视，&lt;br /&gt;
网速很好，&lt;br /&gt;
外界诱惑不大一般不出门以后，&lt;br /&gt;
我泛起了 30 岁开始重拾德语的小心思。&lt;/p&gt;

&lt;h2 id=&#34;未完待续&#34;&gt;未完待续&lt;/h2&gt;

&lt;p&gt;这几天卡塔尔说部分去往中国的航班已取消，&lt;br /&gt;
虽然我们的航班还没受影响，&lt;br /&gt;
不过总顶着一种“回不去了呢”的快乐心情在游玩。&lt;/p&gt;

&lt;p&gt;在德国我们还会去科隆大教堂，&lt;br /&gt;
到巴塞罗那了还计划去巴塞罗那主教堂等一系列景点。&lt;/p&gt;

&lt;p&gt;希望到时候能忍住信仰之跃的冲动，&lt;br /&gt;
按 E 同步就够了。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件工程实践之 Git 开发流</title>
      <link>https://liriansu.com/posts/2020-01-14-git-workflow/</link>
      <pubDate>Tue, 14 Jan 2020 21:39:31 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2020-01-14-git-workflow/</guid>
      <description>&lt;p&gt;软件工程实践系列文章，&lt;br /&gt;
会着重讲述实际的工程项目中是如何协作开发软件的。&lt;br /&gt;
本文主要介绍如何使用 Git 来支撑整个开发流。&lt;/p&gt;

&lt;h2 id=&#34;outline&#34;&gt;outline&lt;/h2&gt;

&lt;p&gt;本文包括以下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;operation: 团队保持一致的操作&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;commit: 提交原子性的代码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;history: 保持线性干净的历史&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;release: 遵循科学的发布规范&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tool chain: 搭建自洽的工具链&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;gitlab/github: 使用现代的开发平台&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ci/cd: 让系统把控代码质量&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;sentry/k8s: 用版本连接整个系统&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;conclusion&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;operation-团队保持一致的操作&#34;&gt;operation: 团队保持一致的操作&lt;/h2&gt;

&lt;p&gt;Git 提供了一套自由而又强大的 api,&lt;br /&gt;
我们可以通过它以各种姿势来完成代码协作。&lt;br /&gt;
但俗话说得好，&lt;br /&gt;
选择越多人越懵。&lt;del&gt;并没有这句俗话&lt;/del&gt;&lt;br /&gt;
所以在团队协作时，&lt;br /&gt;
保持一致的操作是很重要的。&lt;/p&gt;

&lt;h3 id=&#34;commit-提交原子性的代码&#34;&gt;commit: 提交原子性的代码&lt;/h3&gt;

&lt;p&gt;Git 的最小单元就是一个 commit。&lt;br /&gt;
我们团队遵循的最佳规范是保持每个 commit 的原子性：&lt;br /&gt;
&lt;strong&gt;一个 commit 只做一件事情。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如一个关于缺陷修复的 commit 可以非常简单，&lt;br /&gt;
它只有两行：&lt;br /&gt;
一行修复了代码逻辑，&lt;br /&gt;
一行加了单元测试。&lt;/p&gt;

&lt;p&gt;另一个关于重构的 commit 可能会修改 200+ 个文件，&lt;br /&gt;
但也因为只做了一件事情，&lt;br /&gt;
所以不会给 code review 带来很大负担。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/gitlab_large_commit.jpg&#34; alt=&#34;large-commit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;原子性的 commit 不仅能很好地支持 revert/cherry-pick/bisect 等一系列 Git 的原生命令，&lt;br /&gt;
而且在保持线性干净的历史这一点上，&lt;br /&gt;
也是至关重要的。&lt;/p&gt;

&lt;h3 id=&#34;history-保持线性干净的历史&#34;&gt;history: 保持线性干净的历史&lt;/h3&gt;

&lt;p&gt;随着时间的推移，&lt;br /&gt;
Git 的每一个 commit 会成长为一个枝叶繁茂的历史树。&lt;br /&gt;
基于 &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging&#34;&gt;fast forward&lt;/a&gt; 的合并能让 Git 的历史树保持干净与线性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/git_log_tree.jpg&#34; alt=&#34;git-log-tree&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这是我们项目 git log 翻到四个月以前的一张截图，&lt;br /&gt;
可以看到历史依旧是线性干净的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;线性的历史意味着在每个人提交代码前需要 rebase。&lt;br /&gt;
一个例外是在发布分支(master)上提交 hotfix 后，&lt;br /&gt;
合并回开发分支(dev)需要视情况关闭 fast forward (&amp;ndash;no-ff)。&lt;br /&gt;
而且要求大家 rebase 则对团队成员的 Git 水平以及合并习惯提出了一定要求。&lt;/p&gt;

&lt;p&gt;干净的历史则需要大家都严格遵循 commit 的原子性，&lt;br /&gt;
以及要按照标准撰写 commit message。&lt;br /&gt;
关于 commit message 的撰写，&lt;br /&gt;
阮老师有一篇&lt;a href=&#34;https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&#34;&gt;《commit message 编写指南》&lt;/a&gt;讲的够好。&lt;br /&gt;
我们也可以在 git hook 中开启对 commit message 的校验，&lt;br /&gt;
以确保格式的整洁统一。&lt;/p&gt;

&lt;p&gt;通过&lt;strong&gt;fast forward merge + 统一的 commit message&lt;/strong&gt;，&lt;br /&gt;
我们就能维护一个不断成长、但又干净线性的历史树，&lt;br /&gt;
能最大程度地给各种 git 的版本操作提供便利。&lt;/p&gt;

&lt;h3 id=&#34;release-遵循科学的发布规范&#34;&gt;release: 遵循科学的发布规范&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;我们使用 git tag 来作为版本发布的标志。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/git_log_tree.jpg&#34; alt=&#34;git-log-tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因为我们的项目是一个 web 服务端项目，&lt;br /&gt;
我们同一时刻基本上只需要维护最新的版本，&lt;br /&gt;
所以我们使用了日期型的版本号数字(&lt;code&gt;v2019.9.9&lt;/code&gt;)。&lt;br /&gt;
在大部分开源工具里，&lt;br /&gt;
都会使用&lt;a href=&#34;https://semver.org/lang/zh-CN/&#34;&gt;语义化的版本号(semver: &lt;code&gt;v2.0.0&lt;/code&gt;)&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;基于原子的 commit、线性的历史，&lt;br /&gt;
在每次版本发布时，&lt;br /&gt;
我们都会自动化地生成 tag/changelog。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/gitlab_release.jpg&#34; alt=&#34;gitlab-release&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一个遵循了良好规范的 tag 能最大程度地利用工具链的集成功能，&lt;br /&gt;
给开发、测试、上线、监控提供完备的功能。&lt;/p&gt;

&lt;h2 id=&#34;tool-chain-搭建自洽的工具链&#34;&gt;tool chain: 搭建自洽的工具链&lt;/h2&gt;

&lt;p&gt;在注重团队协作、开发流程、发布质量的软件工程中，&lt;br /&gt;
会有一系列开发工具围绕 Git 的代码历史树，&lt;br /&gt;
提供了自洽的工具链。&lt;/p&gt;

&lt;h3 id=&#34;gitlab-github-使用现代的开发平台&#34;&gt;gitlab/github: 使用现代的开发平台&lt;/h3&gt;

&lt;p&gt;我们使用 &lt;code&gt;GitLab&lt;/code&gt; 来管理代码项目，&lt;br /&gt;
其中重度使用的是 &lt;code&gt;Merge Request&lt;/code&gt; 来作为 code review 的载体。&lt;br /&gt;
&lt;del&gt;不过我们跟着 GitHub 的设定，管它叫 PR (Pull Request)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;为了维持 PR 的原子性，&lt;br /&gt;
大部分情况我们遵循单个 commit 对应单个 PR，&lt;br /&gt;
这样既方便 review 也方便分支管理。&lt;br /&gt;
不过这样的开发流会产生非常多的 PR，&lt;br /&gt;
需要团队开发者都保持在一个更积极的开发状态下。&lt;/p&gt;

&lt;p&gt;现代的开发平台还会集成更多工作流上的功能，&lt;br /&gt;
我们还重度使用的是把 GitLab Runner 作为我们 ci/cd 的工具载体。&lt;/p&gt;

&lt;h3 id=&#34;ci-cd-让系统把控代码质量&#34;&gt;ci/cd: 让系统把控代码质量&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/gitlab_pr.jpg&#34; alt=&#34;gitlab-pr&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在提完 PR 以后，&lt;br /&gt;
系统会自动化地启用一系列的 Python/Django 检查。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/gitlab_pipeline.jpg&#34; alt=&#34;gitlab-pipeline&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;通过 git tag 发布版本后，&lt;br /&gt;
系统会自动化地跑构建、灰度等一系列部署任务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了 GitLab Runner,&lt;br /&gt;
其它像 Jenkins/Travis CI/GitHub Actions 也可以类似的 ci/cd 功能。&lt;/p&gt;

&lt;p&gt;集成 ci/cd 能让整个开发流变得更加柔顺，&lt;br /&gt;
让每一个改动的影响都可以即时地通过数据展示出来。&lt;br /&gt;
ci/cd 加上 code review，&lt;br /&gt;
能最大程度地让代码库保持活性，&lt;br /&gt;
长远地能避免“往屎山上堆屎”的发生。&lt;/p&gt;

&lt;p&gt;前面提到我们的 PR/release 频率都会比较高，&lt;br /&gt;
所以 ci/cd 也需要在更短的时间内跑完，&lt;br /&gt;
以避免龟速检测导致的各种心态爆炸、skip ci。&lt;br /&gt;
目前我们项目平均能在 5min 内跑完包括 96% 覆盖率的单元测试的多项检查，&lt;br /&gt;
也能在 5min 内跑完从构建、灰度到全量的整个发布流程。&lt;/p&gt;

&lt;p&gt;整个 ci/cd 的流程其实也跟写接口这样的业务类似，&lt;br /&gt;
是需要不断迭代、不断优化、不断适应更好的开发流的。&lt;/p&gt;

&lt;h3 id=&#34;sentry-k8s-用版本连接整个系统&#34;&gt;sentry/k8s: 用版本连接整个系统&lt;/h3&gt;

&lt;p&gt;在开发的流程走完以后，&lt;br /&gt;
软件工程还关心发布的流程、质量把控的流程。&lt;/p&gt;

&lt;p&gt;我们绑定了 docker image tag 与 git tag，&lt;br /&gt;
最终发布部署在 k8s 上的每一个版本也跟 git tag 的版本强关联。&lt;br /&gt;
这样的设定之下，&lt;br /&gt;
比如像 &lt;code&gt;kubectl rollout&lt;/code&gt; 的一系列操作就会跟 Git 历史树关联上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/sentry_release.jpg&#34; alt=&#34;sentry-release&#34; /&gt;&lt;br /&gt;
&amp;gt; 我们也使用了 sentry 来检测管理代码的线上问题。&lt;/p&gt;

&lt;p&gt;所有的外部系统都使用着统一的 tag version 来关联问题，&lt;br /&gt;
这样我们就给 debug, 历史溯源，分锅都提供了统一的工程语言。&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;基于 Git 的开发流不是一个一成不变的框架，&lt;br /&gt;
它会因为项目特质、团队成员习惯、工具链的不一样而有着不同的表现形式。&lt;/p&gt;

&lt;p&gt;我们团队在软件工程的实践中，&lt;br /&gt;
保持并维护着这么一套开发标准：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保持 commit 的原子性，一个 commit 只做一件事情。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;遵循编写 commit message 的标准，并且会在 code review 时关注。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;统一团队成员的操作习惯，使用 rebase + fast forward merge。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自动化地生成 git tag 以及 changelog，并基于此做代码发布。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;搭建快速全面的 ci/cd 流程，自动化地做掉所有代码检查。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使开发流与社区最佳实践一致，了解并利用好各类工具的集成功能。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这套开发流也给我们提出了这些挑战：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要对 Git 有一定了解，包括历史树操作等进阶知识。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;除了编码时，在协作时也要保持积极的态度，以及协作上的高标准。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;最重要的，对最佳实践的追求，以及不懂就学的态度。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样的 Git 开发流，最终带来了这些效果：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;线性的历史让 debug、追溯变更、了解项目发展过程都变得非常友好。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;项目一方面能保持快速活跃的开发效率，另一方面能保证长期维护的质量。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;最佳实践的讨论以及迭代，让团队内部一直维持着很好的工程师文化。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;软件工程的实践中，&lt;br /&gt;
好的 Git 开发流是不可或缺的一部分。&lt;br /&gt;
以后我们再以不同的视角来分享更多软件工程的实践。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件工程实践之平滑发版</title>
      <link>https://liriansu.com/posts/2019-12-09-gracefully-upgrade/</link>
      <pubDate>Mon, 09 Dec 2019 23:39:28 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2019-12-09-gracefully-upgrade/</guid>
      <description>&lt;p&gt;软件工程实践系列文章，&lt;br /&gt;
会着重讲述实际的工程项目中是如何协作开发软件的。&lt;br /&gt;
本文主要介绍了如何无中断地发布版本。&lt;/p&gt;

&lt;h2 id=&#34;outline&#34;&gt;outline&lt;/h2&gt;

&lt;p&gt;本文包括以下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;how: 其实平滑发版大体可以分为两部分。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;service: 服务层做好切换管理就行。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;database: 数据库层就是标准操作。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;example: 举个实际的栗子。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;conclusion&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-为什么要平滑发版&#34;&gt;why: 为什么要平滑发版？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ldsink.com/&#34;&gt;ldsink&lt;/a&gt; 说过以前他在百姓网的时候，&lt;br /&gt;
他们一直保持的实践就是“随时都准备好发版”，&lt;br /&gt;
这样不仅能保持功能上线的敏捷度，&lt;br /&gt;
还准备好了应对各种变化。&lt;/p&gt;

&lt;p&gt;当时我们的一体化服务每次发版都要停服几秒钟，&lt;br /&gt;
几秒钟对应的就是用户触发的一堆 5XX 网络错误。&lt;br /&gt;
更不用提发版更频繁的开发测试环境，&lt;br /&gt;
前端爸爸们经常惊呼：&lt;br /&gt;
“诶？服务器 502 了！诶，我刷新一下又好了……”&lt;/p&gt;

&lt;p&gt;后来在我认真研学了以后发现，&lt;br /&gt;
平滑发版其实是一个非常普世的话题，&lt;br /&gt;
任何涉及网络流量分发、请求逻辑处理的服务都会有这部分功能。&lt;/p&gt;

&lt;p&gt;平滑发版的英文是 &lt;code&gt;gracefully upgrade/reload/restart&lt;/code&gt;,&lt;br /&gt;
常用的工具都会对平滑发版的流程有完善的支持，&lt;br /&gt;
用工具名直接搜索就行了，比如 &lt;code&gt;nginx gracefully upgrade&lt;/code&gt; 或者 &lt;code&gt;k8s gracefully upgrade&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为什么要平滑发版呢？&lt;br /&gt;
其实核心目的就一个：&lt;br /&gt;
防止发版带来的服务中断。&lt;/p&gt;

&lt;h2 id=&#34;how-如何做到平滑发版&#34;&gt;how: 如何做到平滑发版？&lt;/h2&gt;

&lt;p&gt;在实际工程中，&lt;br /&gt;
大部分的 web 服务本质都是从外部接受请求，&lt;br /&gt;
从数据库查询、处理数据返回。&lt;br /&gt;
本片中就以这个逻辑，&lt;br /&gt;
按 service/database 的平滑发版来逐个介绍。&lt;/p&gt;

&lt;h3 id=&#34;service-业务层的平滑发版&#34;&gt;service: 业务层的平滑发版&lt;/h3&gt;

&lt;p&gt;我们团队后端语言框架用的是 python/django，&lt;br /&gt;
详细情况在前文《软件工程实践之 django/python》中有介绍。&lt;br /&gt;
我们目前的网络链路是&lt;br /&gt;
&lt;em&gt;(云负载均衡) -&amp;gt; (k8s-ingress-controller) -&amp;gt; k8s-pod(nginx+uwsgi)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;云负载均衡跟 k8s-ingress-controller (目前用的是 kong) 的变动都不会太频繁，&lt;br /&gt;
就不过多赘述。&lt;br /&gt;
每次发版变动的都是业务服务，在前面的链路中指的就是 k8s-pod(nginx/uwsgi)。&lt;/p&gt;

&lt;p&gt;不论是 k8s/docker/systemctl/supervisord/pm2,&lt;br /&gt;
他们通用的逻辑是系统信号 (Signals)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Signal&lt;/th&gt;
&lt;th&gt;x86&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SIGHUP&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SIGINT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SIGQUIT&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SIGKILL&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SIGTERM&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;part of unix signal numbers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以 k8s 为例，当旧的 pod 被终止时，k8s 执行的具体操作如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;发送 &lt;code&gt;SIGTERM&lt;/code&gt; 信号，然后等待最多 &lt;code&gt;terminationGracePeriodSeconds(default=30)&lt;/code&gt; 秒&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;假如等待过程中，服务停了，那就做其它终止操作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;假如等待过程中，服务没停，那么就发送一个 &lt;code&gt;SIGKILL&lt;/code&gt; 信号&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一般来说，标准的框架实现都会支持 &lt;code&gt;SIGTERM&lt;/code&gt; 与 &lt;code&gt;SIGKILL&lt;/code&gt; 的语义，&lt;br /&gt;
但具体的额外自定义逻辑就需要自己去实现把控了。&lt;/p&gt;

&lt;p&gt;业务层确保请求不中断，&lt;br /&gt;
需要正确处理信号。&lt;/p&gt;

&lt;h3 id=&#34;database-数据库层的平滑发版&#34;&gt;database: 数据库层的平滑发版&lt;/h3&gt;

&lt;p&gt;数据库层会涉及到发版变动，&lt;br /&gt;
主要可以分为数据的变动、结构的变动。&lt;br /&gt;
&lt;strong&gt;核心的处理方法是双写&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;先讲一下关于数据变动的双写。&lt;/p&gt;

&lt;p&gt;比如我们以前有个字段A，&lt;br /&gt;
存储的是布尔值 true/false,&lt;br /&gt;
后来含义变丰富了要改成枚举值 0/1/2/3。&lt;br /&gt;
那么整个流程得是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;增加默认为空的枚举值字段B。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;第一次发版引入双写，代码逻辑中涉及字段A的写入逻辑，以同样的逻辑增加对字段B的写入。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;清洗数据，把所有字段A的值以同样逻辑洗到字段B里。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;第二次发版摘除双写，代码逻辑中涉及字段A的读取逻辑，全部以字段B替代。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;确定正常以后，下掉字段A。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2~4 的这一步是以双写的方式处理兼容，&lt;br /&gt;
持续时长会因为具体的情况而相差很大：&lt;br /&gt;
可能 10 分钟就双写完了，&lt;br /&gt;
也有可能因为要给清洗大量数据留足时间而持续数天。&lt;/p&gt;

&lt;p&gt;再看一下关于结构变动的双写，&lt;br /&gt;
核心逻辑跟上面的 1/2/3/4/5 套路五步是一样的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加字段：这个很简单，增加完字段以后再发版即可。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;删除字段：这个也很简单，发版摘除相关逻辑以后再删除即可。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;修改字段：假如是不兼容的改动，应当以增加新字段+双写+删除旧字段的逻辑来处理。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据库层确保请求不中断，&lt;br /&gt;
需要以双写保证兼容。&lt;/p&gt;

&lt;h2 id=&#34;example-举个实际的栗子&#34;&gt;example: 举个实际的栗子&lt;/h2&gt;

&lt;p&gt;我们的 django 服务是以 nginx+uwsgi 的方式起来的，&lt;br /&gt;
nginx/uwsgi 本身对 SIGTERM/SIGKILL 语义有着良好的支持。&lt;br /&gt;
但同一个 pod 的情况下经常会出现 race condition，&lt;br /&gt;
nginx 有时会比 uwsgi 终止的更早，&lt;br /&gt;
最终导致请求中断的问题。&lt;/p&gt;

&lt;p&gt;网上的老哥们也遇到过类似的问题，&lt;br /&gt;
解决方法也简单地有点滑稽：&lt;br /&gt;
&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/issues/322#issuecomment-298016539&#34;&gt;加点 sleep&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;container:
  name: nginx
  lifecycle:
    preStop:
      exec:
        command: [&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;sleep 10 &amp;amp;&amp;amp; kill -s HUP 1&amp;#34;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了一般的服务层跟数据库层，&lt;br /&gt;
我们还用到 celery 做了异步 worker。&lt;br /&gt;
celery 对平滑发版的支持不算特别好，&lt;br /&gt;
所以像&lt;a href=&#34;https://github.com/celery/celery/issues/2700&#34;&gt;社区里提的一样&lt;/a&gt;，&lt;br /&gt;
自己在 task 层面处理信号。&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;总的来说，工程上实现平滑发版（无中断发版）核心思想是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;服务层：处理好系统信号。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;数据库：用双写保持兼容性。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;其它：确保链路上的每一点都是无中断的，才能达成真正的平滑。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过这么一系列操作，&lt;br /&gt;
我们就可以轻松地做到用户（包括拼命人肉 DDOS 测试环境的前端爸爸们）感知不到我们在发版，&lt;br /&gt;
最终达成那句“随时都准备好发版”的状态。&lt;/p&gt;

&lt;p&gt;当然了，&lt;br /&gt;
随时发版到此时也只是技术层面的可行，&lt;br /&gt;
并不是意味着实际工作中真的会每时每刻都发版 :)&lt;/p&gt;

&lt;p&gt;毕竟软件工程不仅牵涉软件技术，还有人的工程呀。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建一个不需要自己开服务器的纯静态博客</title>
      <link>https://liriansu.com/posts/2019-11-19-build-a-staic-blog/</link>
      <pubDate>Tue, 19 Nov 2019 01:00:07 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2019-11-19-build-a-staic-blog/</guid>
      <description>&lt;p&gt;又名：我是如何从 jekyll 切到 hugo 的。&lt;/p&gt;

&lt;p&gt;本文会包括以下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;背景&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;博客搭建&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用感受&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;挖坑&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;前几个月一个老哥给我发邮件：&lt;br /&gt;
“commentit 已经凉了啊，记得换掉！”&lt;br /&gt;
我才意识到这个静态评论系统已经到了项目终结期。&lt;br /&gt;
连 &lt;a href=&#34;https://github.com/jillro/commentit&#34;&gt;GitHub Repo&lt;/a&gt; 都 archive 了。&lt;br /&gt;
然后我又意识到：&lt;br /&gt;
&lt;em&gt;已经有一阵没有翻修我的主页了。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这可不行，&lt;br /&gt;
&lt;strong&gt;生命在于折腾&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;于是趁着最近换了新的编码环境，&lt;br /&gt;
我重新整了一下我的博客。&lt;br /&gt;
俗话说，一图胜千言，&lt;br /&gt;
先放张翻修过的博客图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/blog-hugo/preview.png&#34; alt=&#34;blog-preview&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;博客搭建&#34;&gt;博客搭建&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;这一章节讲的是枯燥的步骤，&lt;br /&gt;
下一章节才讲充满偏见的个人感受 XD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不想自己维护服务器的话，&lt;br /&gt;
托管在 GitHub Pages 上是个很好的选择。&lt;br /&gt;
四年前我用 jekyll 搭博客的时候也写过一篇：&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/how-this-blog-was-built&#34;&gt;《这篇博客是怎么建成的》&lt;/a&gt;。&lt;br /&gt;
大体上，搭建一个功能完备的静态博客分为这几个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;找一个静态内容框架&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;装一个静态评论系统&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;配配件：主题、域名等&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;搞框架&#34;&gt;搞框架&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; 的安装非常容易，&lt;br /&gt;
直接用命令行或者&lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;去官网下载&lt;/a&gt;就行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install hugo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;按照官方的教程&lt;/a&gt;，&lt;br /&gt;
一键创建目录 + 默认主题启动就行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site quickstart
cd quickstart
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml
hugo server -D&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其它高阶玩法读文档就是了。&lt;br /&gt;
至此，第一步，找框架算是做完了。&lt;/p&gt;

&lt;h3 id=&#34;搞评论&#34;&gt;搞评论&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://utteranc.es/&#34;&gt;utterances&lt;/a&gt; 也是一个利用 GitHub Issues 来做评论的工具，&lt;br /&gt;
它利用 &lt;a href=&#34;https://primer.style/&#34;&gt;Primer&lt;/a&gt; 达成的 GitHub 还原度非常高。&lt;/p&gt;

&lt;p&gt;安装也非常简单，&lt;br /&gt;
找个模板页把它的配置写上就行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34;
        repo=&amp;#34;[ENTER REPO HERE]&amp;#34;
        issue-term=&amp;#34;pathname&amp;#34;
        theme=&amp;#34;github-light&amp;#34;
        crossorigin=&amp;#34;anonymous&amp;#34;
        async&amp;gt;
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应的效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/blog-hugo/utterances.png&#34; alt=&#34;utterances-preview&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;其它配件&#34;&gt;其它配件&lt;/h3&gt;

&lt;p&gt;我用的主题是 &lt;a href=&#34;https://github.com/joway/hugo-theme-yinyang&#34;&gt;joway/hugo-theme-yinyang&lt;/a&gt;，&lt;br /&gt;
整体的简约风格让我很喜欢。&lt;/p&gt;

&lt;p&gt;字体的话，由于是个人博客，我就没用 FiraCode 这种严谨的字体了，&lt;br /&gt;
英文字体我用的是 &lt;a href=&#34;https://github.com/ipython/xkcd-font&#34;&gt;ipython/xkcd-font&lt;/a&gt;,&lt;br /&gt;
中文字体我还在寻找一个可爱的手写体。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/compiling.png&#34; alt=&#34;xkcd-303&#34; /&gt;&lt;/p&gt;

&lt;p&gt;域名的话，默认会开启 lki.github.io 这样的域名，&lt;br /&gt;
需要用自定义的域名可参考官方文档：&lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages&#34;&gt;github-custom-domain&lt;/a&gt;&lt;br /&gt;
设置里记得开一下 HTTPS:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/blog-hugo/github-pages.png&#34; alt=&#34;github-pages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;要统计访问人数的话，可以用&lt;a href=&#34;https://busuanzi.ibruce.info/&#34;&gt;静态计数器不蒜子&lt;/a&gt;做到：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/blog-hugo/header.png&#34; alt=&#34;blog-header&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用感受&#34;&gt;使用感受&lt;/h2&gt;

&lt;p&gt;我之前的博客系统也是用的 GitHub Pages，&lt;br /&gt;
工具链是用的 jekyll + commentit。&lt;br /&gt;
整体有这么几个感受：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用 GitHub Pages 相比于自建博客而言：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;爽：&lt;strong&gt;不需要维护&lt;/strong&gt;&lt;br /&gt;
平常在公司做的后端已经够多了，并不想花时间研究自己博客的 502 (x&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;爽：便宜&lt;br /&gt;
呃，拥抱开源，拥抱开源。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;烦：访问速度不够快&lt;br /&gt;
不过这个是 GitHub 的原因，烦也没用。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;烦：&lt;strong&gt;受限制&lt;/strong&gt;&lt;br /&gt;
比如评论功能，要是自建博客的话实现起来很轻松。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用 hugo 相比于 jekyll 而言：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;爽：有新鲜感&lt;br /&gt;
有一说一，确实。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;爽：&lt;strong&gt;hugo 是 go 写的&lt;/strong&gt;&lt;br /&gt;
之前为了 jekyll, 还得在电脑上冗余一套 ruby 的环境，而 go 的环境天然就有。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;爽：默认值选的很恰当，不需要过分定制&lt;br /&gt;
不论是 configuration 还是 archetypes, hugo 给我的感受更好，而且 &lt;a href=&#34;https://gohugo.io/getting-started/configuration/#blackfriday-extensions&#34;&gt;hardLineBreak&lt;/a&gt; 这个选项真的好用。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;烦：GitHub 只支持自动构建 jekyll&lt;br /&gt;
加个 git pre-push hook 其实就可以解决掉这点，不是特别大的问题。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用 utterances 相比 commentit 而言：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;爽：&lt;strong&gt;默认样式更好&lt;/strong&gt;&lt;br /&gt;
之前 commentit 的样式是我手写的，作为 css 苦手无数次倒在了 &lt;code&gt;inline-block&lt;/code&gt; 上…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;爽：&lt;strong&gt;用 issue 同步评论的方式才是正确的&lt;/strong&gt;&lt;br /&gt;
commentit 的哲学是通过 git push 来挂载评论，但是经过实践以后，其实还是用 GitHub Issues 来更王道。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外值得一提的是，&lt;br /&gt;
在考虑从 jekyll 迁出时，&lt;br /&gt;
我也认真考虑过 hexo。&lt;br /&gt;
不过最终是因为 hugo 看起来更迷人，&lt;br /&gt;
同时也为了坚持当时放弃了 hexo,&lt;br /&gt;
选了 jekyll 的不必要的倔强(x&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/blog-hugo/star_history.png&#34; alt=&#34;star-history&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;附 star 增长趋势对比&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还有一个开心的小的点，&lt;br /&gt;
就是这个主题对微信公众号的排版支持的比起以前好多啦 :)&lt;/p&gt;

&lt;h3 id=&#34;挖坑&#34;&gt;挖坑&lt;/h3&gt;

&lt;p&gt;目前的博客改造算是告一段落了，&lt;br /&gt;
接下来肯定还是回归到认真工作、认真记录生活的节奏中。&lt;/p&gt;

&lt;p&gt;而对于博客本身，&lt;br /&gt;
其实还是有不少可以做的坑：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用 &lt;a href=&#34;https://primer.style/&#34;&gt;Primer&lt;/a&gt; 统一正文评论样式。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;找个好玩的中文手写字体。（其实这条跟上面那条会冲突）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;像 TravisCI 一样提供切换字体的选项。（除了 cooooool 以外并没什么用）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;把友链功能给加上，认真给大家介绍一下我的好友们的实力&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;找个办法，把以前 commentit 的评论优雅地展示出来&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要列的话，&lt;br /&gt;
能想到要填的坑是一个又一个。&lt;br /&gt;
毕竟就像鲁迅常说的那句话一样：&lt;br /&gt;
“个人博客是值得认真搞一搞的，&lt;br /&gt;
毕竟&lt;strong&gt;生命在于折腾&lt;/strong&gt;嘛。”&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[轶事] 为什么 requests 不是 python 标准库？</title>
      <link>https://liriansu.com/posts/2019-10-30-anecdote-why-requests-not-standard/</link>
      <pubDate>Wed, 30 Oct 2019 22:32:20 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-10-30-anecdote-why-requests-not-standard/</guid>
      <description>&lt;p&gt;前几年一次跟耗子哥聊天，&lt;br /&gt;
他说：“你终有一天会从 stackoverflow 上找 bugfix,&lt;br /&gt;
进化到从 github issue 里找 bugfix.”&lt;br /&gt;
一语成谶。&lt;/p&gt;

&lt;h2 id=&#34;头部注释&#34;&gt;头部注释&lt;/h2&gt;

&lt;p&gt;我非常喜欢&lt;a href=&#34;https://www.zhihu.com/question/30137699/answer/476916096&#34;&gt;@灵剑 说的这么一段话&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;软件维护有两种截然不同的思路：&lt;br /&gt;
一种是所有的依赖都追踪最新版，&lt;br /&gt;
一旦出最新版立即开始试用；&lt;br /&gt;
另一种是所有的依赖都选择一个不会变的固定版本，&lt;br /&gt;
能不升级就不升级。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看见软件的新陈代谢，给写代码的我带来了无穷的热爱与动力，&lt;br /&gt;
同时也给我带来了很多 github issues&amp;hellip;&lt;/p&gt;

&lt;p&gt;代码是人写的，bug 也是人写的，bugfix 也还是人写的，&lt;br /&gt;
github issue 的文字里也充满了各种各样有血有肉的充满既视感的评论。&lt;br /&gt;
issue 的文字虽然隔着时间空间上的距离，&lt;br /&gt;
但就像 &lt;a href=&#34;https://xkcd.com/979/&#34;&gt;xkcd 979 - wisdom of the ancients&lt;/a&gt; 表达的那样，&lt;br /&gt;
有些情绪就是亘古不变的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png&#34; alt=&#34;wisdom-of-the-ancients&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在工作中 debug 的时候，&lt;br /&gt;
对于具体的 issue,&lt;br /&gt;
同事们都留下过很多精彩的讨论。&lt;/p&gt;

&lt;p&gt;鉴于这样，&lt;br /&gt;
我决定开辟一个“轶事”的专栏，&lt;br /&gt;
专门来讲一讲那些好玩的 issue.&lt;/p&gt;

&lt;h2 id=&#34;为什么-requests-不是-python-标准库&#34;&gt;为什么 requests 不是 python 标准库？&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;原文地址:&lt;br /&gt;
&lt;a href=&#34;https://github.com/psf/requests/issues/2424&#34;&gt;https://github.com/psf/requests/issues/2424&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kennethreitz&#34;&gt;Kenneth Reitz&lt;/a&gt; 是一个业界知名的程序员，&lt;br /&gt;
很多人了解他可能是因为&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20346580&#34;&gt;他从两百多斤的胖子变成一个超帅的玩摄影的程序员&lt;/a&gt;，&lt;br /&gt;
其实专业过硬的他是写出过 &lt;a href=&#34;https://github.com/psf/requests&#34;&gt;python-requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/postmanlabs/httpbin&#34;&gt;httpbin&lt;/a&gt; 等好用的工具库的。&lt;/p&gt;

&lt;p&gt;requests 这个库重要到什么程度呢？&lt;br /&gt;
根据目前可以公开的情报看到，&lt;br /&gt;
GitHub 上的引用数高达 &lt;code&gt;389k&lt;/code&gt;，&lt;br /&gt;
是 python 语言下引用数最高的库。&lt;/p&gt;

&lt;p&gt;于是很自然的，我就产生了这样的疑问：&lt;br /&gt;
“为什么 requests 不是 python 标准库呢？”&lt;br /&gt;
作为项目的主开发，&lt;br /&gt;
Kenneth 在 2015 年初，&lt;br /&gt;
还在 python 3.5 的年代就向社区抛了一个问题：&lt;br /&gt;
“假如 requests 要加入 python 3.5 标准库，你们有什么想法吗？”&lt;/p&gt;

&lt;p&gt;的确，一个库进标准库是有利有弊，要经过社区讨论的。&lt;br /&gt;
所以其实我的问题应该要改一个字，&lt;br /&gt;
从“为什么 requests 不是 python 标准库？”&lt;br /&gt;
改成“为什么 requests 不进 python 标准库？”&lt;/p&gt;

&lt;p&gt;整串讨论看下来，基本是有这么几个意见：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优势是&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;降低使用成本：让很多小白也能直接上手用标准库的了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;扩大使用范围：很多只依赖于标准库的项目，也能用上 requests 了。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;劣势是&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;开发流程问题：标准库的严格流程，跟社区开发的流程完全不一样，最终可能导致开发者流失。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;依赖问题：现有的库依赖了不少证书之类的文件，在进标准库的过程中需要大重构。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;进化速度问题：进了标准库以后，接口跟实现就会固化，很难随着外部世界改变而快速变化到最好的状态。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;其它历史问题：以前的 urllib 库为了兼容其实已经很臃肿了，也是需要重构的。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
社区的反对意见跟忧虑会更大一些，&lt;br /&gt;
更原汁原味的评论大家可以看一下原串。&lt;/p&gt;

&lt;p&gt;整个讨论中还有几个我感兴趣的点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@Lukasa 在串首来了个起手式：“先问一下几个大佬，他们的看法是怎么样的。”&lt;br /&gt;
然后 at 了 &lt;code&gt;@shazow @kevinburke @dstufft @alex @sigmavirus24&lt;/code&gt; 这五个人。&lt;br /&gt;
里面我只知道 alex 是写 &lt;code&gt;cryptography&lt;/code&gt; 的，其它人其实都可以认识一下。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;串讨论到一半的时候 &lt;code&gt;@dcramer&lt;/code&gt; 留了些关于“我只用标准库依赖”的评论，&lt;br /&gt;
然后留下一句 &lt;code&gt;not sure what you&#39;re all bitching about&lt;/code&gt; 就跑了…&lt;br /&gt;
我就不敢这么放肆&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Kenneth 在 requests 库的文档中曾写过这么一句话：&lt;br /&gt;
&lt;code&gt;Essentially, the standard library is where a library goes to die.&lt;/code&gt;&lt;br /&gt;
结果就在讨论过程中多次被揪出来“打脸”质疑了。&lt;br /&gt;
（其实还好，设计哲学是可以设计的嘛）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/psf/requests/issues/5057&#34;&gt;今年四月也有个老哥 @4evermaat 抛了这个问题&lt;/a&gt;，&lt;br /&gt;
他在看完四年前的讨论以后，留下了这么一句感慨：&lt;br /&gt;
&lt;code&gt;I didn&#39;t realize there was so much politics in getting a module included in the stdlib.&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在讨论结束过后四年的现在，&lt;br /&gt;
&lt;code&gt;requests&lt;/code&gt; 库依然以一个独立的社区项目生机勃勃地新陈代谢着，&lt;br /&gt;
python 3.5 以后也增加了标准库 &lt;code&gt;urllib.request&lt;/code&gt; 支持一部分核心功能。&lt;/p&gt;

&lt;p&gt;代码既是人设计的，&lt;br /&gt;
也是给人用的。&lt;br /&gt;
它们背后的故事，&lt;br /&gt;
也是程序内在逻辑的一部分。&lt;br /&gt;
这部分逻辑曾经在一个个讨论串里存活着，&lt;br /&gt;
最终也让代码更加鲜活地呼吸着、代谢着、生存了下去。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>没错，DNS TTL 字段就是骗你的</title>
      <link>https://liriansu.com/posts/2019-10-29-stupid-dns-ttl/</link>
      <pubDate>Tue, 29 Oct 2019 21:49:42 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-10-29-stupid-dns-ttl/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;By design,&lt;br /&gt;
the Internet core is stupid,&lt;br /&gt;
and the edge is smart.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;前几天在网上冲浪的时候，&lt;br /&gt;
看到了一篇讲 DNS 的宝藏文章：&lt;br /&gt;
&lt;a href=&#34;https://labs.ripe.net/Members/giovane_moura/dns-ttl-violations-in-the-wild-with-ripe-atlas-2&#34;&gt;DNS TTL Violations in the Wild&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;之所以对我来说是宝藏文章，&lt;br /&gt;
因为在读了第一段以后，&lt;br /&gt;
我就发现了一个我习以为常的认知其实在实际是错误✖的：&lt;br /&gt;
&lt;em&gt;业界都会遵守 DNS 的 TTL 超时逻辑。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;然而实际上是：&lt;br /&gt;
&lt;strong&gt;业界都知道 DNS 的 TTL 超时逻辑，但不一定这么实现。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;事件&#34;&gt;事件&lt;/h2&gt;

&lt;p&gt;前几周我们出了个 Bug,&lt;br /&gt;
影响了整个开发、测试环境。&lt;/p&gt;

&lt;p&gt;我们有很大一块的业务是跟微信做各类 py 交易，&lt;br /&gt;
&lt;a href=&#34;https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Authorization_Process_Technical_Description.html&#34;&gt;微信要求说我们给个回调域名&lt;/a&gt;，&lt;br /&gt;
每 10 分钟会推送一个凭证，&lt;br /&gt;
我们要用微信最新的凭证去调他们的接口。&lt;/p&gt;

&lt;p&gt;最早我们给微信配的回调域名背后是个 AWS ELB,&lt;br /&gt;
这是一个亚马逊云上面的旧版负载均衡；&lt;br /&gt;
后来我们打算换成新版负载均衡 AWS ALB。&lt;/p&gt;

&lt;p&gt;这个操作就很简单嘛，&lt;br /&gt;
到 DNS 服务商里看了一下，&lt;br /&gt;
微信回调的域名解析 TTL 是 600 秒，&lt;br /&gt;
又是开发测试环境；&lt;br /&gt;
于是我们直接把解析改到了新版负载均衡上，&lt;br /&gt;
&lt;del&gt;（出于省钱的想法）&lt;/del&gt;顺手还把旧的负载均衡给删了。&lt;/p&gt;

&lt;p&gt;哦豁。&lt;br /&gt;
微信一天都没有给我们推授权凭证。&lt;br /&gt;
于是我们开发测试环境的微信功能挂了一天。&lt;/p&gt;

&lt;p&gt;有的时候开发测试环境出问题，&lt;br /&gt;
会跟生产环境同样煎熬。&lt;br /&gt;
因为你会发现你身边的同事，&lt;br /&gt;
每隔 10 分钟就会问你：&lt;br /&gt;
“弟啊，微信好了没有？”&lt;/p&gt;

&lt;h2 id=&#34;疑问&#34;&gt;疑问&lt;/h2&gt;

&lt;p&gt;在改 DNS 的 86400 秒以后，&lt;br /&gt;
微信的凭证又成功地持续给我们推送了。&lt;/p&gt;

&lt;p&gt;根据现象判定是 DNS 的问题以后，&lt;br /&gt;
一边在心里鄙视微信，&lt;br /&gt;
一边也产生了疑问：&lt;br /&gt;
“不科学啊，DNS 这么基础的服务，怎么会出 bug 呢？”&lt;/p&gt;

&lt;p&gt;这就回到了本文开头讲的：&lt;br /&gt;
业界都知道 DNS 的 TTL 超时逻辑，但不一定这么实现。&lt;/p&gt;

&lt;p&gt;每一条 DNS 记录都由两部分数据组成：&lt;br /&gt;
什么域名应该指向什么目的地？&lt;br /&gt;
我的有效时间是多久？&lt;br /&gt;
而这两部分数据会以互联网特有的树状结构层叠而上，盘织交错。&lt;br /&gt;
在终端进行 DNS 寻址时，&lt;br /&gt;
链路上的任何一个 DNS 服务器都可以实现一套标准或是非标的逻辑。&lt;/p&gt;

&lt;p&gt;对于 TTL 这个值，&lt;br /&gt;
只有三种实现的逻辑：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;缓存时间等于 DNS TTL 时间。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;缓存时间小于 DNS TTL 时间。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;缓存时间大于 DNS TTL 时间。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;世界&#34;&gt;世界&lt;/h2&gt;

&lt;p&gt;要我来写域名服务器的逻辑的话，&lt;br /&gt;
不出意外我会严格按照定义来实现。&lt;br /&gt;
当然，根据性能、时间、空间的限制，&lt;br /&gt;
最终实现出来会有几秒的误差，&lt;br /&gt;
不过这不关键。&lt;/p&gt;

&lt;p&gt;关键的是，&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/dnsop/zRuuXkwmklMHFvl_Qqzn2N0SOGY/?qid=ff8e732c964b76fed3bbf333b89b111f&#34;&gt;有不少人觉得 DNS 目前的设计是有缺陷的&lt;/a&gt;。&lt;br /&gt;
而作为整个互联网的底层构架，&lt;br /&gt;
不论是要提升还是替换 DNS 目前的逻辑，&lt;br /&gt;
都是一个非常巨大的工程。&lt;br /&gt;
当然，这也更吸引工程师为此献身了。&lt;/p&gt;

&lt;p&gt;于是，当今现实世界里的域名解析，&lt;br /&gt;
就不是完全按照“缓存时间等于 DNS TTL 时间”来实现的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当缓存时间小于 DNS TTL 时间时&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;主要争议点在与这个会给上游服务器带来更大的解析压力&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;高频解析也意味着更多的带宽、网费支出&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;但这种情况不会伤害终端用户&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;当缓存时间大于 DNS TTL 时间时&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;主要的问题在于，这会让用户访问到错误的服务器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这不仅会带来逻辑错误，还会有潜在的安全隐患&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在本文最开始出现的问题，其实就是微信的 DNS 链路上出现了缓存过旧的问题&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;好处可能就是在解析费上不用交那么多钱了(x&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;总的来说，DNS TTL 是一个在互联网基础设施中广泛使用的约定。&lt;br /&gt;
但是现实世界中也会有很多非标的实现。&lt;br /&gt;
由于 DNS 的特殊性，每一个非标的域名商都会影响一大片他们能触达的用户。&lt;br /&gt;
所以在我们操作 DNS 时，要优雅的解决问题就也得把他们给考虑进来。&lt;/p&gt;

&lt;p&gt;工程上的问题就是这样，&lt;br /&gt;
既有理论的优雅，&lt;br /&gt;
又有凡人的愚蠢，&lt;br /&gt;
也有分布式的智慧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By design,&lt;br /&gt;
the Internet core is stupid,&lt;br /&gt;
and the edge is smart.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pythonista 的 Go 之旅</title>
      <link>https://liriansu.com/posts/2019-06-13-go-experience-as-a-pythonista/</link>
      <pubDate>Thu, 13 Jun 2019 01:10:49 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-06-13-go-experience-as-a-pythonista/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;我们团队后端主要技术栈是 Python,&lt;br /&gt;
具体的软工实践在前文 &lt;a href=&#34;https://liriansu.com/software-engineering-django&#34;&gt;django/python&lt;/a&gt; 里有详细的介绍。&lt;br /&gt;
由于平时做公司业务主要写的是 Python,&lt;br /&gt;
自己做的项目也是 Python 工具，&lt;br /&gt;
所以其实一直想尝试体验一下 Go。&lt;/p&gt;

&lt;p&gt;正好上周有空，&lt;br /&gt;
于是体验了一下 Go 的基础设定，&lt;br /&gt;
用 Go 写了一个小服务（微信消息推送）。&lt;/p&gt;

&lt;p&gt;这篇文章讲的就是一个 Pythonista 的 Go 萌新之路。&lt;br /&gt;
有理解谬误、操作不当的地方，&lt;br /&gt;
请各位多指教了。&lt;/p&gt;

&lt;h1 id=&#34;语法&#34;&gt;语法&lt;/h1&gt;

&lt;p&gt;上手一个语言，&lt;br /&gt;
总是习惯性打开 &lt;a href=&#34;https://learnxinyminutes.com/docs/go/&#34;&gt;learn x in y minutes&lt;/a&gt; 先过一遍语法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/slides/golang-experience/reserved_words.png&#34; alt=&#34;go keyword&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go 的特别之处是它的关键字非常少，&lt;br /&gt;
这让 Go 的语法很容易被记下来。&lt;br /&gt;
总的来说我觉得这几个语法很好玩。&lt;/p&gt;

&lt;h2 id=&#34;循环&#34;&gt;循环&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 直接 for 就可以写死循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;while true...&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// range 这个关键词用起来很舒服
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;,
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;while true...&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;枚举&#34;&gt;枚举&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// iota 居然被做成了关键字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这里后面的俩 iota 是可以省略的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Unknown&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;iota&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Male&lt;/span&gt;    = &lt;span style=&#34;color:#66d9ef&#34;&gt;iota&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Female&lt;/span&gt;  = &lt;span style=&#34;color:#66d9ef&#34;&gt;iota&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 也可以满足隔 10 定义枚举的喜好
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `iota &amp;lt;&amp;lt; 2` 这样位运算定义 1/2/4/8 也是可以的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Unknown&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;iota&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Male&lt;/span&gt;    = &lt;span style=&#34;color:#66d9ef&#34;&gt;iota&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Female&lt;/span&gt;  = &lt;span style=&#34;color:#66d9ef&#34;&gt;iota&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 20
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;多表达式判断&#34;&gt;多表达式判断&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// if 语句会取最后的表达式值，所以这么判断是很常见的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 这样判断布尔值也是常见的操作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;); !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid json body&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;goroutine&#34;&gt;goroutine&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// go 的天生并发也是非常优雅的地方
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendTemplate&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 这里是耗时很久的网络请求
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;()
    &lt;span style=&#34;color:#75715e&#34;&gt;// sendTemplate()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ↑ 假如为了速度，我们不能同步发送模板，那么我们用 `go` 这个关键字就可以一键异步 ↓
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendTemplate&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;项目&#34;&gt;项目&lt;/h1&gt;

&lt;p&gt;第一章的语法过了以后，&lt;br /&gt;
很快就到了第二章：&lt;br /&gt;
《如何用 go 起一个项目》&lt;/p&gt;

&lt;p&gt;要写代码，首先就得把文档给翻出来看看。&lt;br /&gt;
于是第一站便是&lt;a href=&#34;https://golang.org/&#34;&gt;官网 golang.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go 的官网其实非常友好，&lt;br /&gt;
从最基础的&lt;a href=&#34;https://golang.org/doc/code.html&#34;&gt;教你怎么配环境、写初始的项目&lt;/a&gt;，&lt;br /&gt;
到 &lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; 这种全面长文都浅显到点。&lt;/p&gt;

&lt;p&gt;上手装好语言环境以后，&lt;br /&gt;
首先跟 &lt;code&gt;GOPATH&lt;/code&gt; 这个环境变量玩了一下。&lt;br /&gt;
不过后来发现 Go 1.12 以后自带 go mod,&lt;br /&gt;
只要简单了解一下这个概念就行了。&lt;br /&gt;
那我们先放一下，&lt;br /&gt;
直接上手感受 Go 的工具链吧。&lt;/p&gt;

&lt;h2 id=&#34;工具链&#34;&gt;工具链&lt;/h2&gt;

&lt;p&gt;Python 装好以后主要自带的是个 REPL 跟 pip 这个包管理器。&lt;br /&gt;
Go 装好以后，会自带包括 fmt/test/vet/mod 等一系列的工具。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go fmt&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;这个是上手 Go 第一印象最大的工具&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;它是一个不支持配置的代码格式化工具，非常严格&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;prefer tab over space&lt;/del&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;自带 coverage, 很好用&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go vet&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;似乎是自带的 linter&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;玩 &lt;code&gt;go test&lt;/code&gt; 的时候发现它是针对 &lt;code&gt;package&lt;/code&gt; 来做测试的，&lt;br /&gt;
而 Go 里面，&lt;br /&gt;
&lt;code&gt;package&lt;/code&gt; 的概念也是非常突出。&lt;br /&gt;
比如调用包方法的时候是要加包名的，&lt;br /&gt;
所以最佳实践里也有“命名不重叠”的规则。&lt;br /&gt;
（举个栗子，比如方法应该叫 &lt;code&gt;xml.Parser&lt;/code&gt; 而不是 &lt;code&gt;xml.XMLParser&lt;/code&gt;）&lt;/p&gt;

&lt;h2 id=&#34;写业务&#34;&gt;写业务&lt;/h2&gt;

&lt;p&gt;由于我们写的是一个对内网以 RESTful 风格提供接口，&lt;br /&gt;
然后调用微信发送消息通知用户的这么一个小服务，&lt;br /&gt;
按照 Python 的惯性就想找个 &lt;code&gt;django&lt;/code&gt; + &lt;code&gt;wechatpy&lt;/code&gt; 的组合在一周内来完成业务。&lt;br /&gt;
简单调研了一圈，选了 &lt;code&gt;gin&lt;/code&gt; + &lt;code&gt;gorm&lt;/code&gt; 两个大的工具。&lt;/p&gt;

&lt;p&gt;Go 的第三方库给我的感觉是非常直白。&lt;br /&gt;
因为引入第三方库的方式是 &lt;code&gt;go get -u github.com/gin-gonic/gin&lt;/code&gt;，&lt;br /&gt;
直接拉的就是 GitHub master 分支的最新代码，&lt;br /&gt;
所以感觉整个第三方的社区是基于分布式共识的，&lt;br /&gt;
只有大家都遵守社区规范，&lt;br /&gt;
才不会有挖矿代码的出现…（虽然中心化也会有挖矿代码）&lt;/p&gt;

&lt;p&gt;文档的话，调研阶段读的其实都是 GitHub README，&lt;br /&gt;
GitHub 是经常逛的网站，&lt;br /&gt;
各个库的 README 风格也都是 markdown 风格，&lt;br /&gt;
读起来也很轻松。&lt;br /&gt;
真正要看 godoc 的地方不多。&lt;br /&gt;
因为拉的是源代码，&lt;br /&gt;
所以基本上都是直接读源代码，&lt;br /&gt;
体验跟 Python 非常像。&lt;/p&gt;

&lt;p&gt;具体业务代码就先略过了，&lt;br /&gt;
没有什么特别的。&lt;/p&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;p&gt;开始准备部署的时候又有不少好玩的话题。&lt;br /&gt;
比如 Go 的多环境配置。&lt;/p&gt;

&lt;p&gt;Python (Django) 的多环境我一直用的是环境变量 + 多配置文件，&lt;br /&gt;
Go 的话去看了一下社区，&lt;br /&gt;
基本也是类似的原理。&lt;br /&gt;
可以用环境变量，&lt;br /&gt;
也可以用多配置文件（比如 yaml），&lt;br /&gt;
还有一个就是用命令参数（flag 库）。&lt;br /&gt;
Go 社区里其实比较推崇用 flag，&lt;br /&gt;
因为这样可以把配置跟代码（执行文件）融为一体，&lt;br /&gt;
更加利于维护。&lt;br /&gt;
不过我最终还是选择了环境变量 + 多配置文件…&lt;/p&gt;

&lt;p&gt;项目的编译、部署我们用的是 GitLab CI/Docker。&lt;br /&gt;
也是 ci-build/test/compile/docker-build/deploy 五个套路阶段。&lt;br /&gt;
Go 里比较特别的是会大量引用 GitHub 以及 Google 官方提供的代码，&lt;br /&gt;
在国内拉的速度比较慢，&lt;br /&gt;
所以为了加速构建，&lt;br /&gt;
我们也自己搭了相应的加速通道去提升速度。&lt;br /&gt;
目前来说，从代码进主干分支，&lt;br /&gt;
到自动发版大概耗时不超过 3min。&lt;/p&gt;

&lt;h2 id=&#34;性能&#34;&gt;性能&lt;/h2&gt;

&lt;p&gt;自己写的小服务上去了，&lt;br /&gt;
那首先就要 wrk 一下测一下 QPS 啦。&lt;/p&gt;

&lt;p&gt;Python(Django) 默认的其实是同步模式，&lt;br /&gt;
基础支持的 QPS 很低，&lt;br /&gt;
我们用 gevent + uwsgi 协程模式特意调优过，&lt;br /&gt;
一个获取服务器当前时间的简单接口，&lt;br /&gt;
在 1CPU+4G Memory 的小破机器上，&lt;br /&gt;
Python(gevent) 的 QPS 大概能到 1000，&lt;br /&gt;
而未经调优的 Go(gin) QPS 能到 10000。&lt;br /&gt;
真有你的啊，Go。&lt;/p&gt;

&lt;h2 id=&#34;社区&#34;&gt;社区&lt;/h2&gt;

&lt;p&gt;在玩 Go 的一周中，&lt;br /&gt;
其实我真正的有效编码时间不是很长，&lt;br /&gt;
大部分时间都徜徉在 Go 的各种社区最佳实践文档里。&lt;/p&gt;

&lt;p&gt;在我眼中，&lt;br /&gt;
除去 Go 语言本身的很多闪光点，&lt;br /&gt;
Go 的整个语言社区运营也是值得其他语言学习的。&lt;br /&gt;
比如上面讲到的官方推的工具链，&lt;br /&gt;
这能有效提升所有项目的下限。&lt;br /&gt;
Python 去年也刚出了&lt;a href=&#34;https://github.com/python/black&#34;&gt;一个格式化工具 black&lt;/a&gt;，&lt;br /&gt;
自己宣称是 &lt;strong&gt;the uncompromising code formatter&lt;/strong&gt;。&lt;br /&gt;
（Python: 别催，在学了在学了）&lt;/p&gt;

&lt;h1 id=&#34;感受&#34;&gt;感受&lt;/h1&gt;

&lt;p&gt;讲了这么多看似中立，&lt;br /&gt;
实际都是感受的发言，&lt;br /&gt;
我来集中总结一下我的感受。&lt;/p&gt;

&lt;h2 id=&#34;我很菜&#34;&gt;我很菜&lt;/h2&gt;

&lt;p&gt;写 Go 的时候我是能直白地感受到自己很菜的。&lt;br /&gt;
一块是很多地方我能感知到有语法简化的可能性，&lt;br /&gt;
但我的语言表达能力还没达到优化的水瓶。&lt;br /&gt;
比如 &lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md&#34;&gt;Go 2 Draft 里的 check 关键字&lt;/a&gt;，&lt;br /&gt;
我隐约感觉好像基于 &lt;code&gt;panic + recover&lt;/code&gt; 也能实现类似的机制，&lt;br /&gt;
但真要写又写不出。&lt;br /&gt;
而 Python 我就感觉能完全写成 Lisp。&lt;/p&gt;

&lt;p&gt;另一块是库的使用，或者叫“语言生态”。&lt;br /&gt;
不论是平时用到的标准库，&lt;br /&gt;
还是后端业务要用的各类三方库，&lt;br /&gt;
或是工程化用到的单元测试、质量把控的库，&lt;br /&gt;
我都只能在用到的时候做现场调研。&lt;/p&gt;

&lt;p&gt;总之因为基础知识缺乏，&lt;br /&gt;
加上熟练度不够，&lt;br /&gt;
写 Go 的过程就总有一种“我好菜啊，这个都不懂”的奇妙感觉。&lt;/p&gt;

&lt;h2 id=&#34;我喜欢-go&#34;&gt;我喜欢 Go&lt;/h2&gt;

&lt;p&gt;菜并没阻止我表达喜欢 :)&lt;/p&gt;

&lt;p&gt;Go 身上透露出了非常老派的 KISS 原则，&lt;br /&gt;
它甚至很多时候给我的感觉是比 Python 还要简约。&lt;br /&gt;
比如最佳实践会跟你说：&lt;br /&gt;
“不要过早拆文件，&lt;br /&gt;
一个目录十个文件能解决的问题不需要分层。”&lt;/p&gt;

&lt;p&gt;相比 Python 而言，&lt;br /&gt;
Go 的执行速度透露着一种不讲道理的快。&lt;br /&gt;
Python 深入了解并发模型，&lt;br /&gt;
调优 CPU 跟语言参数以后的结果，&lt;br /&gt;
还是跟 Go 差了一个量级…&lt;br /&gt;
（不过开发速度上 Python 还是巨快…）&lt;/p&gt;

&lt;p&gt;而且，&lt;br /&gt;
Go 还有可爱的 &lt;a href=&#34;https://github.com/egonelbre/gophers&#34;&gt;Gopher&lt;/a&gt; 呀~&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/egonelbre/gophers/raw/master/.thumb/icon/emoji-3x.png&#34; alt=&#34;gopher-emoji&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;go-的实践&#34;&gt;Go 的实践&lt;/h2&gt;

&lt;p&gt;目前我司后端的主技术栈是 Java 跟 Python，&lt;br /&gt;
我主要写的是 Python。&lt;/p&gt;

&lt;p&gt;以我短暂的体验而言，&lt;br /&gt;
Go 在关键的高性能服务上会有很好的表现，&lt;br /&gt;
但在新业务的原型、Web 层的多业务上，&lt;br /&gt;
Python 魔法般的开发速度还是无人能比的（叉腰）&lt;/p&gt;

&lt;p&gt;目前后端的各种流行框架基本都是语言无关的，&lt;br /&gt;
我们可以根据不同业务的适用场景来选择合适的技术栈。&lt;/p&gt;

&lt;p&gt;企业在选择技术栈中，&lt;br /&gt;
其实也会考虑其它更现实的因素，&lt;br /&gt;
比如开发人员的招聘难度，&lt;br /&gt;
代码库、技术栈的统一，&lt;br /&gt;
大型团队的解耦管理。&lt;br /&gt;
这些其实也都是非常有深度的、值得探讨的话题。&lt;/p&gt;

&lt;p&gt;写了一周 Go,&lt;br /&gt;
我更坚信自己的理念了：&lt;br /&gt;
“工程师是解决问题的人，&lt;br /&gt;
技术是解决问题的工具。&lt;br /&gt;
软件工程没做好说工具难用，&lt;br /&gt;
是何异于：&lt;br /&gt;
刺人而杀之曰，非我也，兵也？”&lt;/p&gt;

&lt;h1 id=&#34;后续&#34;&gt;后续&lt;/h1&gt;

&lt;p&gt;一周的体验卡有点太短了，&lt;br /&gt;
非常意犹未尽。&lt;/p&gt;

&lt;p&gt;后续有时间的话，&lt;br /&gt;
关于 Go 的这些话题我会继续研究：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;产线环境上的服务部署姿势。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Go 的服务可视化（监控、日志、追踪）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用黑魔法让语言表达力更高的基础库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;跨语言服务间的交互实践&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欢迎交流，&lt;br /&gt;
也对文章里的不当之处作出指正批评。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>密度不高地生活了一下子</title>
      <link>https://liriansu.com/posts/2019-06-11-fuzzy-days/</link>
      <pubDate>Tue, 11 Jun 2019 22:50:03 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-06-11-fuzzy-days/</guid>
      <description>&lt;p&gt;好久没记录思考了。&lt;br /&gt;
虽然陶菲格一直在催我在思想逝去前记下来，&lt;br /&gt;
但我总有种感觉：&lt;br /&gt;
最近的人生密度不是很大。&lt;/p&gt;

&lt;p&gt;今晚照常以社畜的身份下班回家，&lt;br /&gt;
米娅已经刷完日常准备睡觉了。&lt;br /&gt;
听着她断断续续哼着耳机里不知道什么歌的旋律，&lt;br /&gt;
好久没去唱歌的想法突然从我脑子里游了过去。&lt;/p&gt;

&lt;p&gt;“唉，最近又觉得人生好虚无了。”&lt;/p&gt;

&lt;p&gt;晚上进楼道电梯的时候，&lt;br /&gt;
有两只母蚊子跟了上来。&lt;br /&gt;
她们绕着裸露在短袖外面的手臂转了好几圈，&lt;br /&gt;
靠着敏捷高，&lt;br /&gt;
躲开了我好几下拍击。&lt;br /&gt;
于是我双手交叉，&lt;br /&gt;
假装在电梯里思考人生，&lt;br /&gt;
趁蚊子被我的冷静愣住的时候，&lt;br /&gt;
嗖一下冲出了停稳的电梯。&lt;/p&gt;

&lt;p&gt;现代人的确太容易陷入集体性情绪了，&lt;br /&gt;
而个人的悲叹又显得太无力。&lt;/p&gt;

&lt;p&gt;米娅上周收获了一个她的宝藏节目《乐队的夏天》，&lt;br /&gt;
几十只乐队的现场后劲加在一起，&lt;br /&gt;
抵得上《波西米亚狂想曲》的后劲。&lt;br /&gt;
她昨天晚上突然问我：&lt;br /&gt;
“你作为 A 站老用户，&lt;br /&gt;
有没有那种自己喜欢了很久的小众爱好，&lt;br /&gt;
后来突然火了感觉很挫败的感觉？”&lt;/p&gt;

&lt;p&gt;在“我不是我没有别瞎说”的第一否认力还没生效的时候，&lt;br /&gt;
我脑子里闪过了一百个单词。&lt;br /&gt;
“有，还不少。”&lt;br /&gt;
我还是这么回答了。&lt;/p&gt;

&lt;p&gt;在米娅下一个问题还没问出口之前，&lt;br /&gt;
我也提前给了她答案：&lt;br /&gt;
“是的，后面我就不喜欢了。”&lt;/p&gt;

&lt;p&gt;最近工作感觉比较无力的一点是，&lt;br /&gt;
我真切地感受到了“技术不是瓶颈”在工作中的存在，&lt;br /&gt;
有不少同事也因为这点而另谋高就了。&lt;br /&gt;
虽然说新陈代谢是组织保持活力的必要成分，&lt;br /&gt;
但“生命很大世界更大”这句话也重复的有点疲惫。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>谈谈《谈 996》</title>
      <link>https://liriansu.com/posts/2019-04-14-meta-996/</link>
      <pubDate>Sun, 14 Apr 2019 15:16:24 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-04-14-meta-996/</guid>
      <description>&lt;p&gt;很多人会喜欢 Lisp 里的宏 (Macro)。&lt;br /&gt;
语言里的宏提供了一种元编程 (Meta-Progamming) 的能力。&lt;br /&gt;
假如你用过魔兽世界里的宏，&lt;br /&gt;
你也可以想象这里的“元游戏”是什么意思：&lt;br /&gt;
它注重的不是游戏本身，&lt;br /&gt;
而是对游戏求导所得出的“游戏的本质”。&lt;/p&gt;

&lt;p&gt;今天这篇《谈谈&amp;lt;谈 996&amp;gt;》其实是我想写的一篇方法论的文章，&lt;br /&gt;
或者我更喜欢称之为: Meta 文章。&lt;/p&gt;

&lt;h2 id=&#34;历史的进程&#34;&gt;历史的进程&lt;/h2&gt;

&lt;p&gt;最近因为 &lt;a href=&#34;https://github.com/996icu/996.ICU&#34;&gt;github/996icu&lt;/a&gt; 项目引出了一系列的事件，&lt;br /&gt;
在我看来基本上是像人血馒头一样是可以吃的津津有味的。&lt;/p&gt;

&lt;p&gt;一次大型的社会性事件中，&lt;br /&gt;
最好玩的是看人类社会的不同角色对事件本身发表的看法。&lt;br /&gt;
而且基本上“屁股决定脑袋”或者说“你会成为你喜欢的人”这种道理都是不变的。&lt;/p&gt;

&lt;p&gt;每当这时候我就会想起筱敏写的那句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1789年7月14日巴黎人民攻克巴士底狱的当夜，&lt;br /&gt;
当路易十六听闻消息时惊慌地问：&lt;br /&gt;
“这是一场叛乱吗？”&lt;/p&gt;

&lt;p&gt;他的廷利昂古尔公爵当即回答道：&lt;/p&gt;

&lt;p&gt;“不，陛下，这是一场革命。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;社会是由人类组成的，&lt;br /&gt;
所以这个整体有的时候会表现出奇特的单人所不具有的特性，&lt;br /&gt;
进而进行组织性的进化与修复。&lt;br /&gt;
最终回过头看，&lt;br /&gt;
不禁就会发出江学长那样的感慨：&lt;br /&gt;
个人的奋斗是很重要，&lt;br /&gt;
但也要兼顾历史的进程啊。&lt;/p&gt;

&lt;h2 id=&#34;言论管理&#34;&gt;言论管理&lt;/h2&gt;

&lt;p&gt;我其实蛮喜欢看一些八卦文章的。&lt;br /&gt;
（比如推荐一个博主叫“萝严肃”，&lt;br /&gt;
他写的长文都会查不少背景知识）&lt;br /&gt;
石原里美在文章里经常被表扬“表情管理”做得很好。&lt;br /&gt;
同样地，“言论管理”也是资本家会被重点关注的一处特质。&lt;/p&gt;

&lt;p&gt;带着这点去看各个资本家的行动，&lt;br /&gt;
就很有意思了。&lt;/p&gt;

&lt;p&gt;有一部分资本家的言论管理就是少说话，&lt;br /&gt;
外界对他们的评价就是“比较技术”。&lt;br /&gt;
而很大一部分资本家的发言就很精妙，&lt;br /&gt;
他们会为了心中更美好的世界而发言。&lt;/p&gt;

&lt;p&gt;但可惜的是，&lt;br /&gt;
人类的悲喜并不相通。&lt;/p&gt;

&lt;p&gt;涉及公益、教育这种大家都认可的话题还好，&lt;br /&gt;
但工作这个话题本身就涉及社会性分工，&lt;br /&gt;
不同的人会因为不同的事情有不同的感受。&lt;br /&gt;
假如资本家在“996工作制度”这个话题上直白的表达“我非常享受工作本身”及其类似的观点，&lt;br /&gt;
很自然地会收到无区别的批判，&lt;br /&gt;
因为这个时候他的原罪是他的身份。&lt;/p&gt;

&lt;p&gt;当一个人的符号属性重于社会属性时，&lt;br /&gt;
他发表的所有言论都应当有明确的导向性目的。&lt;br /&gt;
这就是“言论管理”。&lt;/p&gt;

&lt;h2 id=&#34;自我认知&#34;&gt;自我认知&lt;/h2&gt;

&lt;p&gt;以前上学考试结束以后，&lt;br /&gt;
总有人会哀嚎“哎呀考试考砸了完了完了。”&lt;br /&gt;
结果最后他成绩非常好。&lt;br /&gt;
虽然也&lt;a href=&#34;https://www.zhihu.com/question/285977219/answer/574675736&#34;&gt;有个说法叫“本质是因为怕被认为无能”&lt;/a&gt;，&lt;br /&gt;
但不论如何，&lt;br /&gt;
假如你的行为轻信了他人的言论，&lt;br /&gt;
就很容易被误导进坑里。&lt;br /&gt;
最终导致“其它人都是嘴上喊着成绩差，结果你是真的成绩差。”&lt;/p&gt;

&lt;p&gt;就跟上面一节说的一样，&lt;br /&gt;
现在的信息流（包括你正在看到的这篇文章）都充斥着言论管理。&lt;br /&gt;
一个信息是否有价值影响个人的行动，&lt;br /&gt;
是需要被识别、筛选并取其精华的。&lt;/p&gt;

&lt;p&gt;接下来的这段时间我们会看到更多的关于 996 的言论，&lt;br /&gt;
有些会刺耳，有些会很解气。&lt;br /&gt;
但是哪些里面蕴含了“建设性意见”，&lt;br /&gt;
就需要我们睁大眼睛去辨别了。&lt;/p&gt;

&lt;p&gt;当他们在谈论 996 的时候，&lt;br /&gt;
我在思考的是这个谈论本身。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件工程实践之 django/python</title>
      <link>https://liriansu.com/posts/2019-04-10-software-engineering-django/</link>
      <pubDate>Wed, 10 Apr 2019 22:09:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-04-10-software-engineering-django/</guid>
      <description>&lt;p&gt;软件工程实践系列文章，&lt;br /&gt;
会着重讲述实际的工程项目中是如何协作开发软件的。&lt;br /&gt;
本文主要介绍了 django/python 系列的工具链。&lt;/p&gt;

&lt;h2 id=&#34;outline&#34;&gt;outline&lt;/h2&gt;

&lt;p&gt;本文包括以下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;outline&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;django: 一个搭建后端服务的工具箱。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;framework: django vs flask/tornado/spring/laravel&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;restful: django/restframework/swagger&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;worker: django/uwsgi/gevent/celery/channels&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;database: django/mysql/sqlite/migrations&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;python: 一门依赖开发者的语言。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;developing: gitlab/pipenv/docker&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;quality: unittest/pytest/flake8/pylint/yapf&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;deploy: fabric/aws/nginx&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;conclusion&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;django&#34;&gt;django&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/django/django&#34;&gt;django&lt;/a&gt; 是一个大名鼎鼎的后端开发框架，&lt;br /&gt;
它自己的口号是 &lt;code&gt;the web framework for perfectionists with deadlines.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在我用 django 开发的这几年来，&lt;br /&gt;
我觉得它是一个逻辑上自洽，&lt;br /&gt;
并且为了逻辑自洽甚至舍弃了一部分功能的框架。&lt;/p&gt;

&lt;h3 id=&#34;framework&#34;&gt;framework&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/se/django_vs.png&#34; alt=&#34;django-vs&#34; /&gt;&lt;br /&gt;
&amp;gt; search google for &lt;code&gt;django vs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;讲框架避免不了的是同行竞争，&lt;br /&gt;
比如到网上搜一下 &lt;code&gt;django vs ...&lt;/code&gt; 就有一大堆搜索结果。&lt;br /&gt;
其实框架之间的比较是很难的，&lt;br /&gt;
每种框架都有自己适合的业务场景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/standards.png&#34; alt=&#34;xkcd-927&#34; /&gt;&lt;br /&gt;
&amp;gt; xkcd-927: standards&lt;/p&gt;

&lt;p&gt;django 最大的特点就是 &lt;strong&gt;&lt;code&gt;Model&lt;/code&gt; 是一等公民&lt;/strong&gt;。&lt;br /&gt;
在 django 中的所有的操作都会跟 &lt;code&gt;Model&lt;/code&gt; 相关，&lt;br /&gt;
比如它提供了自带的强大 ORM,&lt;br /&gt;
也有一系列挂载在 &lt;code&gt;Model&lt;/code&gt; 上的校验等。&lt;/p&gt;

&lt;p&gt;个人感觉在项目的业务需求达到了某种程度的多样化以后，&lt;br /&gt;
基础框架用什么并不重要，&lt;br /&gt;
适合开发团队才是最重要的。&lt;/p&gt;

&lt;p&gt;鉴于本文的标题是 django,&lt;br /&gt;
所以我们只讲 django。&lt;/p&gt;

&lt;h3 id=&#34;restful&#34;&gt;restful&lt;/h3&gt;

&lt;p&gt;我参与的项目基本都是前后端分离的项目，&lt;br /&gt;
后端提供的接口都是用 &lt;code&gt;djangorestframework&lt;/code&gt; 写的。&lt;br /&gt;
虽然像 &lt;code&gt;HATEOAS&lt;/code&gt; 这样的高级属性还没用到，&lt;br /&gt;
但接口是遵循 &lt;code&gt;restful&lt;/code&gt; 风格的，&lt;br /&gt;
比如像用 http method+status 表达语义，&lt;br /&gt;
对资源的定义等。&lt;/p&gt;

&lt;p&gt;接口文档我们选用了 &lt;code&gt;drf-yasg&lt;/code&gt; 来生成符合 &lt;code&gt;swagger&lt;/code&gt; 规范的文档。&lt;br /&gt;
曾经我们也试过 &lt;code&gt;django-rest-swagger&lt;/code&gt; 这个库，不过……&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/se/django_rest_swagger.png&#34; alt=&#34;django-rest-swagger-readme&#34; /&gt;&lt;br /&gt;
&amp;gt; another help-wanted project&amp;hellip;&lt;/p&gt;

&lt;p&gt;使用现成框架的好处是语言表达力极强，&lt;br /&gt;
最终我们实现一个“解密微信提供的手机号”接口的&lt;del&gt;伪&lt;/del&gt;业务代码大概如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WeChatVS&lt;/span&gt;(BaseVS):

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@with_response&lt;/span&gt;(empty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@with_request&lt;/span&gt;(DecryptionSiri)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@action&lt;/span&gt;(methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;], detail&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, url_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;decryption/phone&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt_wechat_phone&lt;/span&gt;(self, request, uid):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; 解密并修改用户的手机号
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_account_request(request, uid)
        openid, encrypted_data, initial_vector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data
        phone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WeChatManager(openid)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt_safely(encrypted_data, initial_vector)
        &lt;span style=&#34;color:#75715e&#34;&gt;# TODO(ldsink): 找产品问一下外国手机号怎么处理&lt;/span&gt;
        hutils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_error(&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; hutils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_chinese_phone(phone), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o(╥﹏╥)o 目前只支持国内的手机号&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;modify(phone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;phone)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty_response()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的十行代码包含了文档、外链、错误检查、写库，&lt;br /&gt;
让写业务代码本身也有种施法的快感。&lt;/p&gt;

&lt;h3 id=&#34;worker&#34;&gt;worker&lt;/h3&gt;

&lt;p&gt;最开始服务器上我们跑的是 django+uwsgi 的普通模式，&lt;br /&gt;
用 &lt;code&gt;wrk&lt;/code&gt; 去压一个小接口，&lt;br /&gt;
测试环境 4G 内存的机器 QPS 只有 40 左右。&lt;br /&gt;
后来加上了 gevent, monkey patch 一下，改到了协程模式&lt;br /&gt;
同样的接口同样的机器 QPS 上升到了大概 600。&lt;br /&gt;
调优一下效果会更好。&lt;br /&gt;
（需要更高性能的业务可能就根本不用 python 了 Orz）&lt;/p&gt;

&lt;p&gt;celery 充当了我们的定时任务+异步任务框架，&lt;br /&gt;
我们也拆分了 读写密集型/计算密集型 的两类队列以处理不同的事情。&lt;br /&gt;
对于业务中的即时通知部分，&lt;br /&gt;
我们用了 channels 库来实现 web socket 的功能。&lt;/p&gt;

&lt;p&gt;对于这些大型的框架，其实我们选择余地并不大。&lt;br /&gt;
比如虽然 django 开发者有说在 3.0 会考虑大幅度重写异步调用，&lt;br /&gt;
channels 项目会逐渐弃坑……&lt;br /&gt;
但毕竟 &lt;code&gt;perfectionists with deadlines.&lt;/code&gt;&lt;br /&gt;
不能说人家功能不完美，我们就不干活了嘛&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;database&#34;&gt;database&lt;/h3&gt;

&lt;p&gt;我们用到的数据库也是 mysql/mongo/redis 这御三家，&lt;br /&gt;
所以就是每个选取对应的连接库就是了。&lt;/p&gt;

&lt;p&gt;值得一提的是在单元测试里，&lt;br /&gt;
我们用 &lt;code&gt;sqlite(in-memory)&lt;/code&gt; 替代了 mysql 数据库。&lt;br /&gt;
sqlite 里缺失了 mysql 的函数的问题，&lt;br /&gt;
也可以用 &lt;code&gt;connection.create_function&lt;/code&gt; 的方法来规避掉。&lt;/p&gt;

&lt;p&gt;在上线时，还有一个很好玩的东西是 &lt;code&gt;database migration&lt;/code&gt;，&lt;br /&gt;
这个基本上跟“给行驶中的火车换轮子”一样刺激。&lt;br /&gt;
详细的细节以后会专门开篇文章讲一下（挖坑预警），&lt;br /&gt;
从结果上来说我们做到的是&lt;strong&gt;利用 Django Migration 做到数据库结构变更全兼容&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;python&#34;&gt;python&lt;/h2&gt;

&lt;p&gt;上面一小节中，我们基本上是走马观花地过完了 django 相关的三方库。&lt;br /&gt;
到了真正用 python 开发的时候，&lt;br /&gt;
我们遇到的更多的是框架之外的奇遇。&lt;/p&gt;

&lt;p&gt;每门语言都有自己的味道。&lt;br /&gt;
我很喜欢 python 的一点是：&lt;br /&gt;
这门语言有着非常强的表达张力。&lt;br /&gt;
就像上面举的那段典型业务代码一样，&lt;br /&gt;
在实际的开发中，&lt;br /&gt;
python 是能完美表达开发者心中所想的。&lt;/p&gt;

&lt;p&gt;但假如开发者自己都没想清楚自己要写啥，&lt;br /&gt;
这就有点不妙了。&lt;/p&gt;

&lt;p&gt;所以我们有一系列的开发工具来保持清醒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/meme/stay_awake.jpg&#34; alt=&#34;stay-awake&#34; /&gt;&lt;br /&gt;
&amp;gt; 强制清醒.jpg&lt;/p&gt;

&lt;h3 id=&#34;quality&#34;&gt;quality&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/se/hax_principles.png&#34; alt=&#34;hax-principles&#34; /&gt;&lt;br /&gt;
&amp;gt; &lt;a href=&#34;https://www.zhihu.com/question/300762444/answer/529335326&#34;&gt;贺师俊在《如何引导程序员新人按正确的流程开发？》下面一段我很欣赏的回答&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;除了开发流程上的类似要求，&lt;br /&gt;
我们对代码本身也执行了类似的严格要求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;单元测试覆盖率必须得在 96% 以上 (unittest/pytest/coverage)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;代码的逗号、换行、引号的使用都必须符合规范 (flake8)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;代码强制经过 linter 检验，禁止多种黑魔法 (pylint)&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;代码的各个模块之间必须符合特定的拓扑顺序 (pylint-topology)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;代码风格（如字典的复制、长列表、换行与空行）强制统一 (yapf)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中&lt;strong&gt;单元测试覆盖率必须得在 96% 以上&lt;/strong&gt;值得被单独拎出来表扬一下。&lt;/p&gt;

&lt;p&gt;业务代码的 96% 的覆盖率是什么概念呢？&lt;br /&gt;
这意味着代码里只有那种真正的边缘情况是没被测到的。&lt;br /&gt;
（比如为了兼容微信 SYSTEM ERROR -1000 写的代码）&lt;/p&gt;

&lt;p&gt;为了达到了这么高的覆盖率，&lt;br /&gt;
我们也专门强化过单元测试的表达力，&lt;br /&gt;
比如一段测试创建用户接口的&lt;del&gt;伪&lt;/del&gt;代码可能如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_create_account&lt;/span&gt;(self):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; 测试创建用户 &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_model_increase(Account, delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;account_url(), {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hulucc&amp;#39;&lt;/span&gt;})
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ok(response, username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hulucc&amp;#39;&lt;/span&gt;, tags__length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_model_increase(Account, delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
        response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;account_url(), {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hulucc&amp;#39;&lt;/span&gt;})
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bad_request(response, message&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AccountErrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DUPLICATE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/se/gitlab_ci_sample.png&#34; alt=&#34;gitlab-ci-sample&#34; /&gt;&lt;br /&gt;
&amp;gt; 所有这些限制都在 CI 中检查了，不通过的话是不让 merge into master 的&lt;/p&gt;

&lt;h3 id=&#34;developing&#34;&gt;developing&lt;/h3&gt;

&lt;p&gt;我们的合作方式是用 gitlab 作为代码托管平台。&lt;br /&gt;
为了团队的开发效率，&lt;br /&gt;
我们还自己写了个小机器人来处理各种如分支合并、有效性检查、贴标签之类的杂活。&lt;/p&gt;

&lt;p&gt;gitlab ci 不仅被用来做开发阶段的质量保证，&lt;br /&gt;
最终我们的构建上线也走的是 gitlab ci &lt;a href=&#34;https://liriansu.com/python-deployment-automation-one-sample&#34;&gt;(以前我们用的是 jenkins)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/se/gitlab_pr_sample.png&#34; alt=&#34;gitlab-pr-sample&#34; /&gt;&lt;/p&gt;

&lt;p&gt;对于 python 的依赖管理，&lt;br /&gt;
我们用的是 pipenv,&lt;br /&gt;
&lt;code&gt;pip list&lt;/code&gt; 一下大概有了 181 个库。&lt;br /&gt;
(关于 pipenv 的介绍可以参见&lt;a href=&#34;https://ldsink.com/archives/the-future-of-python-dependency-management/&#34;&gt;《Python 依赖管理的未来 - ldsink》&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;也因为我们线上用的是 docker,&lt;br /&gt;
所以不想装依赖的也可以直接用 docker 的环境开发。&lt;/p&gt;

&lt;h3 id=&#34;deploy&#34;&gt;deploy&lt;/h3&gt;

&lt;p&gt;部署这一块我们暂时还没上 k8s,&lt;br /&gt;
目前走的是 gitlab ci 中调用 fabric + aws(boto3) 直接操作裸 docker 的方式。&lt;br /&gt;
aws 的负载均衡器提供了基础的流量切换服务，&lt;br /&gt;
我们也是借用了现成的服务达到灰度发布、无缝发布的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/se/gitlab_ci_deploy.png&#34; alt=&#34;gitlab-ci-deploy&#34; /&gt;&lt;br /&gt;
&amp;gt; 用 GitLab CI 部署的步骤图&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;至此，本文介绍了一遍我们在 Python 业务后端的实践。&lt;/p&gt;

&lt;p&gt;对于高可用、容器化、数据库等屠龙技，&lt;br /&gt;
业界其实有非常多的探讨，&lt;br /&gt;
大家也很容易找到现成的文章。&lt;/p&gt;

&lt;p&gt;但具体到业务后端的工程化实践，&lt;br /&gt;
能借鉴的大型项目并不多。&lt;br /&gt;
我读过的也只有&lt;a href=&#34;https://github.com/reddit-archive/reddit&#34;&gt;两年前的 reddit 代码&lt;/a&gt;跟 &lt;a href=&#34;https://github.com/getsentry/sentry&#34;&gt;sentry&lt;/a&gt; 这个 django 项目符合要求了。&lt;/p&gt;

&lt;p&gt;总的来说，我们用 django 在开发中遵循的约定跟共识有这些：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;做正确的事情。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;比如我们在讨论过后，一致觉得“线性的 Commit 历史是最干净的”，从当天开始我们的 Commit 历史就是干净的线性历史了。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自动化一切能自动化的工作。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;用 swagger 自动化生成文档，用 gitlab ci 自动化质量保证。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;尽可能使用最新的特性，让代码时刻保持崭新。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;我们每隔一阵就会把所有依赖升到最新的稳定版。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不过因为这个我们也踩了不少坑。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不少时候三方库会引入全新的用法，动辄改动 100+ 的文件数。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个时候就到了 Vim Macro 展现魔法的时候了。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;假如你也在用 Django 作为后端框架的话，&lt;br /&gt;
不防尝试一下上面提到的各类工具，&lt;br /&gt;
绝对物超所值噢 :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《流浪地球》电影观感</title>
      <link>https://liriansu.com/posts/2019-02-06-wandering-earth/</link>
      <pubDate>Wed, 06 Feb 2019 13:45:34 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-02-06-wandering-earth/</guid>
      <description>&lt;p&gt;假如你想跟家人在春节去看场电影的话，&lt;br /&gt;
非常推荐去看看《流浪地球》。&lt;br /&gt;
（本文可能只有轻微剧透。）&lt;/p&gt;

&lt;h2 id=&#34;电影&#34;&gt;电影&lt;/h2&gt;

&lt;p&gt;电影本身我认为是一个非常成功的类型片，&lt;br /&gt;
加上了国产滤镜跟科幻滤镜以后，&lt;br /&gt;
口碑在春节档电影里排第一也是可以想象的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/wechat/wandering_earth.jpg&#34; alt=&#34;comment&#34; /&gt;&lt;/p&gt;

&lt;p&gt;电影剧情的底子其实跟《钢铁侠》《超人归来》之类的超级英雄电影本质上是一样的：&lt;br /&gt;
主角出生 - 锻炼自己 - 遇到低谷 - 组成团队 - 创造奇迹 - 拯救世界。&lt;br /&gt;
这样的类型片近十年已经有不少了，&lt;br /&gt;
要想在他们中间脱颖而出，&lt;br /&gt;
需要能把故事讲好。&lt;/p&gt;

&lt;p&gt;大刘（刘慈欣）就在这里发挥了非常重要的作用了。（我脑补的）&lt;/p&gt;

&lt;p&gt;虽然电影故事是在原作小说一段子情节之上，&lt;br /&gt;
原创发挥出的独立故事。&lt;br /&gt;
但电影开场的字母上写了“全程监制：刘慈欣”几个字，&lt;br /&gt;
整个剧本也透出了一股浓浓的“刘氏直男科幻”的味道。&lt;/p&gt;

&lt;p&gt;无论是最开始的“中国味道赛博朋克”的都市背景，&lt;br /&gt;
还是中间提到的“饱和救援”方法论，&lt;br /&gt;
甚至是贯穿电影的转折，&lt;br /&gt;
都用厚重的真实感冲淡了一部分超级英雄类型片本身的魔幻感。&lt;/p&gt;

&lt;p&gt;进而这又引出了这个电影非常“共产主义”的一部分：&lt;br /&gt;
电影里的超级英雄不是个体，&lt;br /&gt;
而是人类这个集体。&lt;/p&gt;

&lt;p&gt;之前看过一个说法，&lt;br /&gt;
说外国人看三国看到的是那个年代里英雄闪烁，&lt;br /&gt;
中国人看三国看到的是刘皇叔山穷水尽也要带上人民。&lt;br /&gt;
《流浪地球》也是一样，&lt;br /&gt;
虽然电影的镜头跟着主角一行人，&lt;br /&gt;
但是我们可以清晰地感知到：&lt;br /&gt;
是人类本身，在创造人类自身的历史。&lt;/p&gt;

&lt;p&gt;除了原作者监制、共产主义精神这两点，&lt;br /&gt;
《流浪地球》电影里还有一点能让我露出“老母亲式”微笑的：&lt;br /&gt;
故事讲得圆。&lt;/p&gt;

&lt;p&gt;整个电影埋了不少伏笔，&lt;br /&gt;
虽然有些可能让观众能猜出后面剧情的进程，&lt;br /&gt;
但是电影并没有给人一种“穿山甲最后怎么了？”的失落感，&lt;br /&gt;
基本埋的伏笔都用上了，&lt;br /&gt;
而且还疑似致敬了大刘另一本小说的剧情，&lt;br /&gt;
提到了一个彩蛋。&lt;/p&gt;

&lt;p&gt;总的来说，电影本身的原作者监制、共产主义精神、故事讲得圆，&lt;br /&gt;
这三点让它成为了一部不错的类型片。&lt;br /&gt;
缺点的话其实要讲也有不少，&lt;br /&gt;
但在我的滤镜加持下就不提了。&lt;br /&gt;
额外提一句，假如是受“战狼PTSD”的影响有点怕吴京的话，&lt;br /&gt;
这部片里吴京武戏不多，&lt;br /&gt;
可以安心观影。&lt;/p&gt;

&lt;h2 id=&#34;感受&#34;&gt;感受&lt;/h2&gt;

&lt;p&gt;先打个岔讲个好玩的&lt;br /&gt;
我是跟家人一起去看的电影，&lt;br /&gt;
去的是一家“4D电影院”。&lt;br /&gt;
我们都知道3D是指长宽高，&lt;br /&gt;
那多出来的第4D在哪呢？&lt;/p&gt;

&lt;p&gt;电影里冰天雪地吹大风的时候，&lt;br /&gt;
电影院的扶手会朝你吹风；&lt;br /&gt;
电影里主角开车颠簸的时候，&lt;br /&gt;
电影院的椅子会疯狂颠你；&lt;br /&gt;
电影里东西砸下来的时候，&lt;br /&gt;
电影院的椅背也会猛击你背……&lt;br /&gt;
感觉像是去了一场欢乐谷…&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;北京市第三区交通委提醒您：&lt;br /&gt;
道路千万条，安全第一条。&lt;br /&gt;
行车不规范，亲人两行泪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;回到正题。&lt;/p&gt;

&lt;p&gt;在我眼里这电影还有一点好，&lt;br /&gt;
就是它宣扬大爱的方式非常地中国化。&lt;/p&gt;

&lt;p&gt;比如西方人拍的超级英雄电影，&lt;br /&gt;
宣扬的大爱其实是“爱能解决一切”，&lt;br /&gt;
“任何人通过努力都能做成任何看起来不可能的事”。&lt;br /&gt;
郭帆拍的是个啥子捏：&lt;br /&gt;
“中国人的爱就是回家过年。”&lt;br /&gt;
很难想象外国人会拍出“回家过年吧”的桥段来…&lt;br /&gt;
（当时电影院里也给我看的一愣一愣的）&lt;/p&gt;

&lt;p&gt;最后电影结束以后（没有菜单），&lt;br /&gt;
字幕放了两首歌，&lt;br /&gt;
一首是刘欢的《带着地球去流浪》，&lt;br /&gt;
一首是逃跑计划的《夜空中最亮的星》。&lt;/p&gt;

&lt;p&gt;看着结尾电影字幕里飘过的中英文制作组人员，&lt;br /&gt;
我有点出神。&lt;/p&gt;

&lt;p&gt;之前看惊奇/漫威的电影，&lt;br /&gt;
Mia 跟我都会等到字幕结束。&lt;br /&gt;
然后一起指着“哇上面还有 HR 的名字”，&lt;br /&gt;
“IT 的名字也能上诶”。&lt;/p&gt;

&lt;p&gt;那个时候我就在想：&lt;br /&gt;
外国能批量制造这么多的类型片，&lt;br /&gt;
是因为他们背后有强大的电影产业链在支持；&lt;br /&gt;
什么时候我们中国也有先行者拍点片，&lt;br /&gt;
然后带动一下特效、道具、剧本、投资的相关发展，&lt;br /&gt;
即使拍的稍微烂点，&lt;br /&gt;
我也愿意当个精神股东支持一下啊。&lt;br /&gt;
&lt;del&gt;毕竟我真的很想看以北上广深为背景的超级英雄电影&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;希望“中国科幻电影元年”的说法能在今年敲定下来。&lt;br /&gt;
再许个愿吧，&lt;br /&gt;
希望大刘的《乡村教师》《球状闪电》也能被拍成电影，&lt;br /&gt;
等到相关产业链成熟了，&lt;br /&gt;
《三体》三部曲就可以拍它个七八部，&lt;br /&gt;
最终组成&lt;del&gt;吴京&lt;/del&gt;大刘电影宇宙！&lt;/p&gt;

&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;

&lt;p&gt;观影之外的还有几个很好玩的事情。&lt;/p&gt;

&lt;p&gt;一个是去微博、豆瓣、知乎上看看《流浪地球》的口碑/票房发展。&lt;br /&gt;
毕竟从票房排片上来说，&lt;br /&gt;
小破球早期的目标观众还是泛科幻受众，&lt;br /&gt;
但口碑跟中国味是有望给电影带来不少自来水的。&lt;br /&gt;
品一品大众舆论也是很好玩的。&lt;/p&gt;

&lt;p&gt;二是电影目测能带动大刘的相关小说销量。&lt;br /&gt;
虽然人类在他笔下经常被揉来揉去，&lt;br /&gt;
但是他特有的科学与人文结合的方式，&lt;br /&gt;
经常会给人一种“科学宗教化”的观感。&lt;br /&gt;
大家有兴趣的话也可以去读读他在《三体》之外的一些小说。&lt;br /&gt;
（比如《球状闪电》）&lt;/p&gt;

&lt;p&gt;三是过节了，家人在一起要注意安全。&lt;/p&gt;

&lt;p&gt;只有中国人拍的电影，&lt;br /&gt;
里面才会加入这样的台词：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;北京市第三区交通委提醒您：&lt;br /&gt;
道路千万条，安全第一条。&lt;br /&gt;
行车不规范，亲人两行泪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何构建工程师团队</title>
      <link>https://liriansu.com/posts/2019-01-28-developer-team/</link>
      <pubDate>Mon, 28 Jan 2019 23:46:45 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-01-28-developer-team/</guid>
      <description>&lt;p&gt;“工程师团队”这个话题我一直非常好奇，&lt;br /&gt;
我经常会问我的朋友们：&lt;br /&gt;
“你们公司这个是怎么样的？”&lt;br /&gt;
这篇文章讲的就是我自己对于这个话题的思考。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/weibo/as_leader.png&#34; alt=&#34;pic&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;上一篇&lt;a href=&#34;https://liriansu.com/about-active-thinking&#34;&gt;《积极面思考》&lt;/a&gt;中提到了，&lt;br /&gt;
最近写的东西都更偏向于“道”一些。&lt;br /&gt;
本文虽然标题是叫“如何构建工程师团队”，&lt;br /&gt;
但其实讲的东西基本都是主观的想法，&lt;br /&gt;
或者不考虑标题长度的话，&lt;br /&gt;
更恰当的标题说不定是：&lt;br /&gt;
《我们仍未知道那天苏子岳脑海中幻想的是一个什么样的工程师团队》。&lt;/p&gt;

&lt;p&gt;主要涉及的观点可能包括如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自己&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;像游戏主程序员一样工作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;信赖，往往会创造出美好的境界&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;永远抱着初心者的空杯心态&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;团队&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;四世三公的三公指的是公平、公正与公开&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用工具践行自动化&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我爸爸是刘备：放权&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文化&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/pareto-rule-of-programmers&#34;&gt;《程序员的二八定律》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/about-active-thinking&#34;&gt;《积极面思考》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在种田与爆兵中寻找平衡&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;其它的&lt;del&gt;标题党&lt;/del&gt;话题&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;真的是写 PPT 的不如讲 PPT 的，讲 PPT 的不如听 PPT 的吗？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;早上九点上班，晚上九点下班，一周上六天班，好吗？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/this-is-why-i-dont-give-you-a-job-zh-cn&#34;&gt;《为什么我不招你当我的员工》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/is-it-possible-to-be-rich-easily-by-programming&#34;&gt;《搞 IT 的培训三个月就月入上万？》&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来这里想用单个词语来概括标题的（就像我以前的说明文那样），&lt;br /&gt;
但是想想，危言耸听胡言乱语好像也更加 Drama 一些。&lt;br /&gt;
那我们就篡改一下&lt;a href=&#34;https://baike.baidu.com/item/%E5%86%99%E7%BB%99%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%BD%A0/20830750&#34;&gt;张梅的《写给未来的你》&lt;/a&gt;来引出正文吧：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;要学会欣赏真，&lt;br /&gt;
要在重重面具下看到真。&lt;/p&gt;

&lt;p&gt;世上的圆滑标准很多，&lt;br /&gt;
但出类拔萃却极少。&lt;br /&gt;
而往往出类拔萃又隐藏在卑琐狂荡之下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;自己&#34;&gt;自己&lt;/h2&gt;

&lt;p&gt;不论是构建团队，&lt;br /&gt;
还是追求事业，&lt;br /&gt;
人总是要先做自己，&lt;br /&gt;
以前的人管这叫“修身”，&lt;br /&gt;
外国也有部电影《修身客的救赎》就是讲这个的。&lt;/p&gt;

&lt;h3 id=&#34;定位&#34;&gt;定位&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;像游戏主程序员一样工作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假如你在一个十人左右的技术团队当领导者，&lt;br /&gt;
你希望自己是一个什么样的定位呢？&lt;br /&gt;
我会希望我是一个&lt;strong&gt;游戏主程序员&lt;/strong&gt;一样。&lt;br /&gt;
我从大学就有这个想法了。&lt;br /&gt;
（这句话的目标是澄清我没想蹭螃蟹科技的热点）&lt;/p&gt;

&lt;p&gt;游戏的主程序员要做什么呢？&lt;br /&gt;
呃，其实我不知道。&lt;br /&gt;
不过有知乎上的顾煜在&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20232566&#34;&gt;《What makes a good lead programmer》&lt;/a&gt;里说得好：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;主程序员最常见的相关素质包括：&lt;br /&gt;
专业能力过硬、沟通效果良好、管理效率高、擅长目标分解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主程序员也是从小程序员一路 level up 上来的，&lt;br /&gt;
他得解决让各利益相关方达成共识，&lt;br /&gt;
让大家在同心追求目标的路上噪音尽可能小。&lt;br /&gt;
只要有需要的话，主程序员还可以是所有人的兜底方案，&lt;br /&gt;
团队的锅第一个会落在他的头上，&lt;br /&gt;
难调的 Bug 最终也会落在他的头上。&lt;br /&gt;
能力越大，责任越大，讲的也是这个道理。&lt;/p&gt;

&lt;p&gt;这样做的话，&lt;br /&gt;
业务上能不受阻碍地去推进，&lt;br /&gt;
技术上没有后顾之忧。&lt;br /&gt;
唯一算得上缺点的，&lt;br /&gt;
大概是成为主程序员不仅需要付出努力，&lt;br /&gt;
也得时刻警醒自己多加思考吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;黄色的树林前有两条路，&lt;br /&gt;
很遗憾不能我全都要。&lt;br /&gt;
我选择了行人稀少的那一条，&lt;br /&gt;
它改变了我的一生。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;方式&#34;&gt;方式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;信赖，往往会创造出美好的境界&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我其实一直很关注亚文化圈子。&lt;br /&gt;
（这个话题也是我一直想写篇文章聊一聊的）&lt;br /&gt;
假如说人跟组织是社会的细胞跟器官，&lt;br /&gt;
那么亚文化就像是社会的脉搏一样：&lt;br /&gt;
时刻变化，又无比精确地反映着社会的心跳频率。&lt;/p&gt;

&lt;p&gt;如今的亚文化中，&lt;br /&gt;
“霸权”大部分情况处在负面的语境中，&lt;br /&gt;
而“丧”大部分的语境都承担着正向的情绪宣泄。&lt;br /&gt;
随着语言跟文化的解构，&lt;br /&gt;
越来越多的人会在跟他人相处中保持安全距离，&lt;br /&gt;
不轻易信任别人，也不竭力付出自己。&lt;/p&gt;

&lt;p&gt;听着很有种“囚徒困境”的感觉对吧。&lt;br /&gt;
在&lt;a href=&#34;https://daily.zhihu.com/story/9362305&#34;&gt;“多次重复的囚徒困境”变种实验&lt;/a&gt;中，&lt;br /&gt;
最佳策略非常简单：&lt;br /&gt;
“一开始默认信任，之后一报还一报。”&lt;/p&gt;

&lt;p&gt;就像超级英雄电影里演绎的一样，&lt;br /&gt;
一个团队假如大家单打独斗就很容易被逐个击破。&lt;br /&gt;
能获得最终胜利的方法，&lt;br /&gt;
都是大家相互信任，然后用 &amp;ldquo;Watch My Back&amp;rdquo; 式的宣言来达成目标。&lt;/p&gt;

&lt;p&gt;从自己信赖别人开始，&lt;br /&gt;
往往就能创造出美好的团队信任感。&lt;/p&gt;

&lt;h3 id=&#34;心态&#34;&gt;心态&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;永远抱着初心者的空杯心态&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最开始钦定“主程序员”的原因，&lt;br /&gt;
往往是这货写代码又快又狠，&lt;br /&gt;
兄弟们都服他，&lt;br /&gt;
于是组织上一研究决定，&lt;br /&gt;
他就多了一个“带领大家一起冲”的任务了。&lt;/p&gt;

&lt;p&gt;工程师团队的 Tech Leader 有不少都是那种“兄弟们跟我冲”的类型，&lt;br /&gt;
从一线出身的人很容易会有“我行我上”的冲动。&lt;br /&gt;
（事实上我也常有……）&lt;br /&gt;
但其实这并不科学。&lt;/p&gt;

&lt;p&gt;假如所有的难题都是由主程序员来解决，&lt;br /&gt;
那么主程序员的实力就是团队的天花板。&lt;br /&gt;
假如是写的死规则，&lt;br /&gt;
那么围棋机器人的棋力最高也只能到编码的程序员这，&lt;br /&gt;
只有实战跟反馈能锻炼出会“机器学习”的阿法狗。&lt;/p&gt;

&lt;p&gt;团队也是一样，&lt;br /&gt;
永远抱着初心者的空杯心态，&lt;br /&gt;
就仿佛自己就是最菜的。&lt;br /&gt;
毕竟&lt;a href=&#34;https://liriansu.com/adult-life&#34;&gt;假如自己这样都是最菜的，那么团队得有多强啊&lt;/a&gt;！&lt;/p&gt;

&lt;h2 id=&#34;团队&#34;&gt;团队&lt;/h2&gt;

&lt;p&gt;去年难得追完了一整部番，&lt;br /&gt;
叫&lt;a href=&#34;https://www.bilibili.com/bangumi/media/md102632/&#34;&gt;《中间管理录·利根川》&lt;/a&gt;，&lt;br /&gt;
体裁是很稀少的职场搞笑番。&lt;br /&gt;
这番横七竖八地透出了几个歪歪扭扭的字：&lt;br /&gt;
逢山开路，遇水造桥。（雾&lt;/p&gt;

&lt;h3 id=&#34;氛围&#34;&gt;氛围&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;四世三公的三公指的是公平、公正与公开&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先打个岔解释一下，防止有人把上面这句我编的句子当真了。&lt;br /&gt;
四世三公讲的是袁绍身出名门、身份高贵，&lt;br /&gt;
他往上四辈祖先都是三公：大司马、大司徒、大司空（总之就是很厉害）&lt;/p&gt;

&lt;p&gt;构建团队，在做好自己之外，&lt;br /&gt;
确定团队的氛围是非常重要的事情。&lt;br /&gt;
往远了说，团队的氛围会决定做事情的效率和效果，&lt;br /&gt;
会影响新人的融入、跟其它团队的对接；&lt;br /&gt;
往近了说，你要在这样的团队中担当主程的角色。&lt;br /&gt;
所以团队的氛围必须是你认为的正确。&lt;/p&gt;

&lt;p&gt;公平、公正跟公开是我认为的正确。&lt;/p&gt;

&lt;p&gt;公平，是指机会均等。&lt;br /&gt;
每个人都会有同样的机会、同样的空间去完成他的目标。&lt;br /&gt;
公正，是指权责平衡。&lt;br /&gt;
每个人因为实力不同，所以承担的任务、期待的产出也是不一样的。&lt;br /&gt;
公开，是指信息透明。&lt;br /&gt;
每个人都能获取到及时、准确的消息，不会因为内部的消息传达而影响了共识，进而影响到事情的推进。&lt;/p&gt;

&lt;p&gt;其实工程师在这点上要求很低，&lt;br /&gt;
在分锅的时候讲清楚*是什么*、*为什么*，&lt;br /&gt;
*怎么做*就交给我们去决策，&lt;br /&gt;
最终工程师会选择合适的技术与分工方案去完成的。&lt;/p&gt;

&lt;p&gt;听起来，&lt;br /&gt;
这个道理也同样适用于&lt;br /&gt;
“女朋友该如何使唤男朋友干活”呢。&lt;/p&gt;

&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;用工具践行自动化&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人这个芦苇不仅会思想，&lt;br /&gt;
还会用工具。&lt;br /&gt;
工程师就更加了，&lt;br /&gt;
就像&lt;a href=&#34;https://liriansu.com/engineer-culture&#34;&gt;《工程师文化》&lt;/a&gt;中讲的一样：&lt;br /&gt;
工程师文化的其中一条就是用工具解决问题。&lt;/p&gt;

&lt;p&gt;团队的工具暂且不提，&lt;br /&gt;
我所见过的优秀的工程师都有一个统一的特征：&lt;br /&gt;
擅长使用工具，甚至自己发明工具。&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://liriansu.com/my-programmer-habits&#34;&gt;程序员都是懒人&lt;/a&gt;，&lt;br /&gt;
但有些懒是能一劳永逸的。&lt;br /&gt;
他会写一段能自动泡咖啡的代码脚本，&lt;br /&gt;
然后每天都不用动手按下那该死的按钮。”&lt;/p&gt;

&lt;p&gt;工程师的团队也一样需要工具来自动化各种流程。&lt;br /&gt;
从最基础的自动化的代码检查，&lt;br /&gt;
到自动化的持续集成、自动化的监控，&lt;br /&gt;
甚至是自动化的分工、自动化的沟通。&lt;br /&gt;
这里的每一项自动化都可以节约对应的人力，&lt;br /&gt;
或者从财务的角度：“提高人效。”&lt;/p&gt;

&lt;p&gt;在我理想中的工程师团队里，&lt;br /&gt;
还有这么一拨工程师，&lt;br /&gt;
他们的任务就是给其它工程师做好用的工具。&lt;br /&gt;
可能在一线业务上会少两三个程序员，&lt;br /&gt;
但是整个团队的总生产力能大大提升。&lt;/p&gt;

&lt;h3 id=&#34;权责&#34;&gt;权责&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;我爸爸是刘备：放权&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话是“三国杀”游戏里“刘禅”的台词，&lt;br /&gt;
传达出了一种生在普通家庭的平凡感。&lt;/p&gt;

&lt;p&gt;就像前面四世三公里聊到的，&lt;br /&gt;
公正意味着权责平衡，&lt;br /&gt;
这点也是工程师认知中非常重要的一环。&lt;br /&gt;
无论是有赞的年会宣言还是罗辑思维的公开信，&lt;br /&gt;
我认为都是权责问题上的无奈之举：&lt;br /&gt;
因为没能成为一个权责平衡的团队，&lt;br /&gt;
所以才要宣扬这个道理。&lt;/p&gt;

&lt;p&gt;四世三公里的公正（权责）值得单独拎出来说，&lt;br /&gt;
因为在我的认知中，公正比公平难以执行，&lt;br /&gt;
但有的时候更正确。&lt;br /&gt;
举个栗子。&lt;/p&gt;

&lt;p&gt;比如一个团队每个季度都要评一次绩效，&lt;br /&gt;
然后组织上规定，&lt;br /&gt;
每个团队的绩效都得排名，&lt;br /&gt;
总有一个人要吃 0 分。&lt;/p&gt;

&lt;p&gt;（看似）公平的办法是什么呢？轮流来。&lt;br /&gt;
大家和和气气，轮流吃 0 分，&lt;br /&gt;
这次我吃蛋，下次到你家。&lt;br /&gt;
公正的办法是什么呢？按表现来。&lt;br /&gt;
在最能贴近事实的统计学数据下，&lt;br /&gt;
最差的吃 0 分。&lt;br /&gt;
假如一直是最差的呢？&lt;br /&gt;
那就一直吃 0 分。&lt;br /&gt;
当然，假如整个团队做的业务都崩了，那都吃 0 分，或者解散。&lt;/p&gt;

&lt;p&gt;在公正的条件下，放权给每一个人是一个能把事情做好的办法。&lt;br /&gt;
我自己做的技术选型，之后重构也是我来。&lt;br /&gt;
我搭的基础设施，不好用我修。&lt;br /&gt;
我写的流程，在过年期间稳定撑过了高并发，甚至不用触发 on call，我牛逼。&lt;br /&gt;
自由触发自主，自主就会自豪。&lt;/p&gt;

&lt;p&gt;一次我跟在拼多多的好友聊天，&lt;br /&gt;
他说他最喜欢创业感觉的一点是：&lt;br /&gt;
“跟产品经理过了需求，&lt;br /&gt;
我说三天能做完。&lt;br /&gt;
然后啪，一天做好测试上线了，&lt;br /&gt;
我感觉我可太牛逼了。”&lt;/p&gt;

&lt;h2 id=&#34;文化&#34;&gt;文化&lt;/h2&gt;

&lt;p&gt;假如你们有注意的话，&lt;br /&gt;
很多组织或者团队不仅有文化，&lt;br /&gt;
还有文化的具象符号。&lt;br /&gt;
团队的文化就是团队的灵魂，&lt;br /&gt;
团队的灵魂是由团队的领导者所决定的。&lt;/p&gt;

&lt;h3 id=&#34;精英&#34;&gt;精英&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;20%的程序员写出了80%的代码。&lt;/p&gt;

&lt;p&gt;—— &lt;a href=&#34;https://liriansu.com/pareto-rule-of-programmers&#34;&gt;《程序员的二八定律》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然程序员们喜欢把自己比喻成“码农”、“码工”，&lt;br /&gt;
职称也是叫“工程师”，&lt;br /&gt;
大学里学的也是叫“软件工程”。&lt;/p&gt;

&lt;p&gt;但其实编码跟所有脑力劳动有着一样的特性：&lt;br /&gt;
人跟人的产出差别是指数级的。&lt;/p&gt;

&lt;p&gt;诗人李白写的诗，传唱度比一万个末流诗人加起来还要高；&lt;br /&gt;
哲学家马克思的思想，影响了整个历史的进程；&lt;br /&gt;
自然语言学家刘半农创造的她字，催生了跨越千里的情书；&lt;br /&gt;
给顶级程序员一根针，他们就能在刻满一张 4GB 的光盘（梗）。&lt;/p&gt;

&lt;p&gt;不提横向对比，&lt;br /&gt;
即使是一个人的产出也会有云泥之别。&lt;br /&gt;
一个程序员一天工作 8 小时，&lt;br /&gt;
可能他最专注的那 2 小时就做完了一整天的功能，&lt;br /&gt;
其他时间他只不过是往里面写新的 bug，&lt;br /&gt;
然后再努力找出来修复而已。&lt;/p&gt;

&lt;p&gt;所以一个追求最终生产力的文化，&lt;br /&gt;
一定会把提升精英工程师的产出，&lt;br /&gt;
提高工程师的有效工作占比放在一个重要的位置。&lt;/p&gt;

&lt;p&gt;比如让谷歌“臭名昭著”的 &lt;code&gt;20% rule&lt;/code&gt;，&lt;br /&gt;
官方说法是每个工程师只分配 80% 时间在工作上，&lt;br /&gt;
剩下的 20% 的时间去做自己感兴趣的副业。&lt;br /&gt;
但其实这反而激发了工程师们的热情，&lt;br /&gt;
让一些人付出了 120% 的时间在业务上。&lt;br /&gt;
最终可能大部分 20% 的项目都没产生效应，&lt;br /&gt;
但是少部分 20% 的项目以及这些项目带来的文化热情传染是有着非常大的价值的。&lt;/p&gt;

&lt;h3 id=&#34;上进&#34;&gt;上进&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;从正面去思考问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;聊完精英这个话题，&lt;br /&gt;
很容易想到金字塔模型，&lt;br /&gt;
进而会有一个问题：&lt;br /&gt;
“那假如少部分工程师做了大部分产出，&lt;br /&gt;
剩下的大部分工程师怎么办呢？裁员吗？”&lt;/p&gt;

&lt;p&gt;这个问题问的很有趣。&lt;/p&gt;

&lt;p&gt;我的想法是一个团队在建立的时候，&lt;br /&gt;
是会经过一套标准恒定的人才筛选机制的。&lt;br /&gt;
这个背景下，从个人角度看来，&lt;br /&gt;
我作为团队里产出占比很低的人，&lt;br /&gt;
我也很绝望啊…&lt;br /&gt;
比如我们公司就有个前端，&lt;br /&gt;
他不仅做业务做的又快又猛，&lt;br /&gt;
技术问题上他也想法多，&lt;br /&gt;
一下就能薅一个 demo 出来。&lt;br /&gt;
你猜只能仰望他的我，会怎么想？&lt;/p&gt;

&lt;p&gt;没错，我会希望自己也努力成为这样优秀的人。&lt;/p&gt;

&lt;p&gt;好的文化不仅能催化顶级人才的产出，&lt;br /&gt;
还能让有潜力肯努力的优秀人才进化成顶级人才。&lt;br /&gt;
十年后二十年后一部分元老承担着公司的运作，&lt;br /&gt;
离职的大家也散落在不同的公司，&lt;br /&gt;
都是像主程序员一样做着核心的事情。&lt;br /&gt;
所谓聚是一团火，散是满天星。&lt;/p&gt;

&lt;p&gt;依靠流程、考核、规定去提升团队统计学意义上的生产力，&lt;br /&gt;
并不是从正面去解决问题的办法。&lt;br /&gt;
营造一个上进的文化，&lt;br /&gt;
就会让大家知道向东流一定能流入大海，&lt;br /&gt;
这样才能从根本上解决问题。&lt;br /&gt;
从团队的角度来说，&lt;br /&gt;
大家的总体生产力更加高了，&lt;br /&gt;
事情也更容易做了；&lt;br /&gt;
从个人的角度来说，&lt;br /&gt;
个人命运跟公司进程结合在了一起，&lt;br /&gt;
回报是非常可期的。&lt;/p&gt;

&lt;h3 id=&#34;远见&#34;&gt;远见&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在种田与爆兵中寻找平衡&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;战略类游戏中策略的选择，&lt;br /&gt;
往往会在两个方向中动态地摇摆：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;种田。你的经济跟科技都会更好，长期发展更有优势，但是很容易短期内被打爆。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;爆兵。你的战斗力会更强，短期战斗一定会胜利，但是长期看来非常疲软。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工程师团队做的事情其实本质上也是这两方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优化技术基建。&lt;br /&gt;
你的一切统计学指标都很好，也能支撑很大流量。&lt;br /&gt;
但是占用了太多业务开发的时间，你就没能有很大流量。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现业务需求。&lt;br /&gt;
你的业务需求做的很快，用户的反馈迅速，他们非常开心。&lt;br /&gt;
但是技术债越来越多了，甚至你们还没做安全防护，一被 DDOS 就会挂。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两件事情你中有我，我中有你，是动态平衡的。&lt;br /&gt;
不论是不做基础建设，或是万般皆下品惟有基建高，&lt;br /&gt;
都不是一个很好的情况，&lt;br /&gt;
工程师团队文化需要避免走向任何一个极端。&lt;/p&gt;

&lt;p&gt;理想中的距离就是恋爱中的“刚刚好”，&lt;br /&gt;
业务需求不会因为工期而挤走技术基建，&lt;br /&gt;
技术基建也不会因为想练屠龙技就放弃业务需求。&lt;br /&gt;
两方都谦谦有礼，都说着：“你先请”然后让出了自己的位置……&lt;/p&gt;

&lt;p&gt;不，醒醒，这样的情况不会发生。&lt;br /&gt;
除非事业发展停滞（公司要凉了啊），&lt;br /&gt;
在事业进展飞速的情况下，&lt;br /&gt;
业务需求永远都是层出不穷，&lt;br /&gt;
这种时候平衡点就化成了战略游戏攻略中的“随机应变”几个字了。&lt;br /&gt;
最终，团队会形成一种自调节的文化，&lt;br /&gt;
以实现高质量高效率的业务需求，&lt;br /&gt;
以及提前准备好足够牢固的基础建设 :)&lt;/p&gt;

&lt;p&gt;活在梦里的感觉，有点真实。&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
上面的个人、团队、文化是我从不同角度对工程师团队的理解。&lt;br /&gt;
但其实对于“道”的理解很多时候都是复杂的，&lt;br /&gt;
尤其是评价构建团队依靠的都是后验感知。&lt;/p&gt;

&lt;p&gt;但总的来说，我很喜欢我们目前的团队 :)&lt;br /&gt;
而且我们&lt;del&gt;强行&lt;/del&gt;达成了共识：&lt;br /&gt;
做对的事情，不论这件事情多难。&lt;/p&gt;

&lt;p&gt;下面是一些有可能相关，&lt;br /&gt;
但又不知道怎么去抽象的话题，&lt;br /&gt;
就罗列在最后当一点散文的尾巴吧。&lt;/p&gt;

&lt;h3 id=&#34;务虚与务实&#34;&gt;务虚与务实&lt;/h3&gt;

&lt;p&gt;最近有一句话又因为《新东方》年会的改编歌曲焕发二春了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;写 PPT 的不如讲 PPT 的，讲 PPT 的不如听 PPT 的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mia 去年升职为 Manager 以后，&lt;br /&gt;
也时不时跟我感慨，&lt;br /&gt;
她觉得目前工作中，&lt;br /&gt;
务虚的部分一下子多了不少，&lt;br /&gt;
感觉得更努力才行。&lt;/p&gt;

&lt;p&gt;这很科学。&lt;/p&gt;

&lt;p&gt;人在单打独斗的时候其实不需要太多思考，&lt;br /&gt;
依靠直觉去行动就行。&lt;br /&gt;
但是一个小队的队长，&lt;br /&gt;
就需要一些冠冕堂皇也好推心置腹也好的理由来说服队员们。&lt;br /&gt;
阿里巴巴这个级别的公司更是需要公司文化、价值观来维持组织的团结齐心。&lt;/p&gt;

&lt;p&gt;而作为组织文化的实体表现者，&lt;br /&gt;
就会有到“越往高处，务虚越多”的感受。&lt;br /&gt;
有可能当你成为了一整个公司的领导者，&lt;br /&gt;
必须得确保自己的认知是可复用、能推广的，&lt;br /&gt;
从而你得务虚再多一点，再多一点，&lt;br /&gt;
最终化身成了公司的吉祥物，&lt;br /&gt;
然后公司大成功！&lt;/p&gt;

&lt;h3 id=&#34;工作制度&#34;&gt;工作制度&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;早上九点上班，晚上九点下班，一周上六天班，真的好吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;直接的问法是：996 接受吗？&lt;/p&gt;

&lt;p&gt;虽然可以用很多论点去修饰，&lt;br /&gt;
但其实我核心的想法就是一条：&lt;br /&gt;
我无法接受强制的 996，&lt;br /&gt;
但是我是一个会自愿 996 工作的人。&lt;br /&gt;
具体的想法就不过多阐述了（现在半夜四点，我有点困意了）&lt;/p&gt;

&lt;p&gt;我认为企业选择 996 的工作制度其实跟人类喜欢喝酒一样，&lt;br /&gt;
是市场充分竞争环境下的自然结果。&lt;br /&gt;
目前存在的问题是整个工作制度存在恶性竞争，&lt;br /&gt;
导致损害社会劳动氛围的可能性。&lt;br /&gt;
可以附加一些“额外工作医保要求”跟“高龄员工工时补偿”之类的来进行制度优化。&lt;/p&gt;

&lt;p&gt;加班可以，常态不可以。&lt;br /&gt;
自愿可以，强制不可以。&lt;br /&gt;
健康可以，挂了就不行。&lt;/p&gt;

&lt;h3 id=&#34;招聘&#34;&gt;招聘&lt;/h3&gt;

&lt;p&gt;大纲里引用的句子是一篇七八年前的匈牙利网络文章，&lt;br /&gt;
当时我看的觉得蛮好玩的，&lt;br /&gt;
第一次以企业/资本的视角来看待员工。&lt;/p&gt;

&lt;p&gt;招聘是一个很让人头疼的问题。&lt;/p&gt;

&lt;p&gt;尤其是上面的文章中讲到了，&lt;br /&gt;
我的认知给自己立了一个 Flag:&lt;br /&gt;
“我只想招优秀的人。”&lt;/p&gt;

&lt;p&gt;两年前写&lt;a href=&#34;https://liriansu.com/what-a-hard-backend-interview&#34;&gt;《HR就讨厌我们这样的技术》&lt;/a&gt;的时候，&lt;br /&gt;
我们招人的标准一句话总结就是&lt;br /&gt;
“希望候选人对口（做过 Python 的互联网后端开发），&lt;br /&gt;
又希望候选人优秀（有在项目里担当主程序员的潜力）”&lt;/p&gt;

&lt;p&gt;当时招聘季 HR 把上海所有 Python 的简历都刷了一遍，&lt;br /&gt;
我们只给了 2% 的最终 offer 率，&lt;br /&gt;
于是 HR 锤爆了我们的狗头，&lt;br /&gt;
并警告我们：“上海的 Python 候选人池子被打爆了，你们考虑一下怎么办。”&lt;/p&gt;

&lt;p&gt;于是（在引入 Java 技术栈之外）我们思考了“对口+优秀”这个标准之后，&lt;br /&gt;
拿掉了“对口”这个需求，&lt;br /&gt;
只想招“优秀（有在项目里担当主程序员的潜力）”的人才。&lt;/p&gt;

&lt;p&gt;这个方案十分奏效，&lt;br /&gt;
我们去年新加入的队友都非常靠谱。&lt;br /&gt;
这也印证了前文对工程师团队文化的思考，&lt;br /&gt;
科学。&lt;/p&gt;

&lt;h3 id=&#34;绩效&#34;&gt;绩效&lt;/h3&gt;

&lt;p&gt;程序员是如今的热门行业，&lt;br /&gt;
热门行业的薪酬同样也是热门的话题。&lt;br /&gt;
（就像工业革命时的工人待遇一样）&lt;/p&gt;

&lt;p&gt;作为一个好奇宝宝，&lt;br /&gt;
我也在&lt;a href=&#34;https://liriansu.com/a-chat-with-roommates&#34;&gt;《一次有意义的吹B》&lt;/a&gt;，&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/is-it-possible-to-be-rich-easily-by-programming&#34;&gt;《培训三月，月入上万？&lt;/a&gt;，&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/a-chat-with-schoolmates&#34;&gt;《公司文化、工资期权、开发体验》&lt;/a&gt;中多次聊到这个话题的细节。&lt;/p&gt;

&lt;p&gt;从更高的认知角度上，&lt;br /&gt;
我确认并坚定了我从毕业以来的观点：&lt;/p&gt;

&lt;p&gt;只要维持每年的进步，&lt;br /&gt;
人的生命会是指数上升的。&lt;br /&gt;
你如今的成就，&lt;br /&gt;
不过是你十年后的成就里的繁星一点。&lt;/p&gt;

&lt;p&gt;就像唐代斯在最后赠给马克西米连的“等待与希望”一样。&lt;br /&gt;
我的朋友，作为工程师的我想送给你两个词，&lt;br /&gt;
它们饱含着“递归”、“复利”乃至“宇宙膨胀”的内在哲学：&lt;br /&gt;
思考，坚持。&lt;/p&gt;

&lt;p&gt;（全文完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>积极面思考</title>
      <link>https://liriansu.com/posts/2019-01-23-about-active-thinking/</link>
      <pubDate>Wed, 23 Jan 2019 23:25:20 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-01-23-about-active-thinking/</guid>
      <description>&lt;p&gt;最近半年对方法论的思考比较多，&lt;br /&gt;
所以可能写的都跟“术”关系不大，&lt;br /&gt;
而更加偏向于“道”一些。&lt;/p&gt;

&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;我记得中学历史课本中，&lt;br /&gt;
在很前面的显眼位置上，&lt;br /&gt;
写着这么一句李世民对魏征的评价：&lt;br /&gt;
“夫以铜为镜，可以正衣冠；&lt;br /&gt;
以史为镜，可以知兴替；&lt;br /&gt;
以人为镜，可以明得失。”&lt;/p&gt;

&lt;p&gt;这句话就像图书馆的闭馆铃声一样，&lt;br /&gt;
总会在深夜让我抽离自己的身躯，&lt;br /&gt;
以一个更高维的角度看自己、看别人。&lt;/p&gt;

&lt;p&gt;就像在&lt;a href=&#34;https://liriansu.com/my-programmer-habits&#34;&gt;《写程序的我的性格》&lt;/a&gt;跟&lt;a href=&#34;https://liriansu.com/adult-life&#34;&gt;《毕业三年的报告》&lt;/a&gt;里面我自己反复念叨的一样，&lt;br /&gt;
工作很容易让没有防备的人类变成自我重复的机器。&lt;br /&gt;
前阵子跟一个产品的好朋友聊天，&lt;br /&gt;
讲到招人的喜好，&lt;br /&gt;
他说他只喜欢那种“工作经验大于工龄”的人。&lt;br /&gt;
或者换句话说，“工作的效率比大部分人都要高”的人。&lt;/p&gt;

&lt;p&gt;在我看来，成为一个效率比别人高的人并不难。&lt;br /&gt;
其中一条很有效的办法，我称之为“积极面思考”。&lt;/p&gt;

&lt;h2 id=&#34;什么是积极面思考&#34;&gt;什么是积极面思考&lt;/h2&gt;

&lt;p&gt;简单来说，就是从事情的正面去思考问题。&lt;/p&gt;

&lt;p&gt;比如举个有点小众的栗子。&lt;br /&gt;
蓝猫的配音演员是葛平，他曾经也陷入过跟六小龄童一样的恶搞文化中心里，&lt;br /&gt;
但他既没逃避也没斥责，而是“放下了身段”跟恶搞他的大家玩成了一片。&lt;br /&gt;
最终大部分恶搞的同学都“路人转粉”，尊称他为“葛叔”了。&lt;br /&gt;
同样的道理，只要六小龄童老师能跟“六学家”们打成一片，他的风评也会再次走高的。&lt;/p&gt;

&lt;p&gt;再举个工作中的栗子。&lt;br /&gt;
工作里少不了的事情是协同合作，&lt;br /&gt;
而多人协同合作容易导致“因为沟通的问题影响到了事情的进度”。&lt;br /&gt;
遇到沟通所产生问题的时候，&lt;br /&gt;
不论是文本化记录结果、寻求拍板人甚至是自己多做一点减少沟通的量，&lt;br /&gt;
都是有效的正面思考问题产生的行为。&lt;br /&gt;
而像分责推锅就并不是从事情的正面去思考问题了。&lt;/p&gt;

&lt;p&gt;当面对问题的时候，能不怕问题，&lt;br /&gt;
不用懒政跟拖延去推迟问题的解决时间，&lt;br /&gt;
而是从解决问题的根本去思考、行动，&lt;br /&gt;
这就是积极面思考。&lt;/p&gt;

&lt;h2 id=&#34;为什么要积极面思考&#34;&gt;为什么要积极面思考&lt;/h2&gt;

&lt;h3 id=&#34;积极面思考是解决问题的捷径&#34;&gt;积极面思考是解决问题的捷径&lt;/h3&gt;

&lt;p&gt;我司有一点“中国互联网公司的通病”：微信办公。&lt;br /&gt;
之前我还在做B端业务的时候，&lt;br /&gt;
我微信里工作群有 300 多个，&lt;br /&gt;
基本上是周六正在跟女朋友约会，&lt;br /&gt;
然后突然就被拉进了一个微信群处理问题，&lt;br /&gt;
因为这点我还成为过电影院里看手机的我眼中的“无素质人群”。&lt;/p&gt;

&lt;p&gt;当时我非常崩溃。&lt;br /&gt;
一方面我是作为工程师招进来的，却要做售前、售后、客服的工作；&lt;br /&gt;
另一方面由于我平常写代码写的最多，也很好说话，&lt;br /&gt;
并不是 Leader 的我充当着实质上的项目经理的角色。&lt;br /&gt;
当时有次周六凌晨三点，刚处理完事情的我发现CS同事二狗也在线，&lt;br /&gt;
我问他在干什么，他说周六我们的餐饮客户搞活动，他还要录十几个营销活动…&lt;/p&gt;

&lt;p&gt;当然，别看我说的这么崩溃，其实我心里非常愿意呢。&lt;br /&gt;
假如一家公司是做企业级服务的，那么只要这家公司想要变得卓越，“客户第一”就一定在公司的核心价值观里。&lt;br /&gt;
之前&lt;a href=&#34;https://liriansu.com/weekly-wander&#34;&gt;《最近跟女朋友的周常》&lt;/a&gt;里也讲到了，“客户第一”是需要公司跟员工一起努力达成的。&lt;br /&gt;
所以虽然我一开始奉献出了周末（忙的时候连一周一休都做不到）&lt;br /&gt;
但随着操作手册的建立、流程的规范还有持续的功能更新，&lt;br /&gt;
后面的事情越来越顺畅了。&lt;/p&gt;

&lt;p&gt;这件事情给我的附加感受是，&lt;br /&gt;
我真正地体会到了从开发者、项目管理者、用户的不同角度去看一件事情的全貌。&lt;br /&gt;
而且我确认了一个事实：&lt;br /&gt;
多方合作中，是能找到共赢点的。&lt;br /&gt;
只要想明白了这个点，事情就一定可以迎刃而解。&lt;br /&gt;
这就是所谓“积极面思考是解决问题的捷径”。&lt;/p&gt;

&lt;h3 id=&#34;积极面思考是正向循环的关键环节&#34;&gt;积极面思考是正向循环的关键环节&lt;/h3&gt;

&lt;p&gt;一般语境中，区分内向型人格跟外向型人格主要是用沟通意愿区分的。&lt;br /&gt;
但我偏向于另一种区分方法：&lt;br /&gt;
外向型人格与人沟通会回复精力；&lt;br /&gt;
而内向型人格与人沟通会消耗精力，他们靠独处来回复精力。&lt;/p&gt;

&lt;p&gt;Mia 曾经评论过我，说我有一个内在的自给自足的循环，&lt;br /&gt;
是这个自洽的循环给我提供了活下去的勇气（听起来怪怪的&amp;hellip;）&lt;br /&gt;
没错，积极面思考在我看来是正向循环的关键环节。&lt;/p&gt;

&lt;p&gt;人的正向循环是依靠认知、行动、反馈的每个环节去自洽地形成的。&lt;br /&gt;
其中行动、反馈的过程跟结果都很难去控制，&lt;br /&gt;
所以认知就是达成正向循环的关键。&lt;br /&gt;
积极面思考会带来更正向的心里暗示，&lt;br /&gt;
而积极的行动也会潜移默化地改变所处的环境，&lt;br /&gt;
从而最终加大正向反馈的可能性。&lt;/p&gt;

&lt;p&gt;多让座、多说请跟谢谢、礼貌待人其实都可以划入这个理论的范畴里。&lt;/p&gt;

&lt;h3 id=&#34;积极面思考能扩大影响力&#34;&gt;积极面思考能扩大影响力&lt;/h3&gt;

&lt;p&gt;人类的潜力是无穷的，&lt;br /&gt;
然而大部分人类都会浪费它。&lt;br /&gt;
Zen of Python 里也说过：&lt;code&gt;Now is better than never.&lt;/code&gt;&lt;br /&gt;
正面去思考问题并作出应对可能会比较难，&lt;br /&gt;
但不论是个人还是集体，&lt;br /&gt;
选择正面去迎接问题是长远的最优解。&lt;/p&gt;

&lt;p&gt;就像 Fate/Zero 小说里的亚历山大大帝一样，&lt;br /&gt;
他最充满魅力的一点就是他的王道。&lt;br /&gt;
他的伙伴韦伯也因为跟亚历山大的思想交流，&lt;br /&gt;
而改变了一生的道路。&lt;/p&gt;

&lt;h2 id=&#34;综述&#34;&gt;综述&lt;/h2&gt;

&lt;p&gt;总的来说，积极面思考能解决当下的问题，&lt;br /&gt;
也能带来长远的进步和影响力。&lt;br /&gt;
假如作为读者的你愿意的话，我非常推荐你尝试一下这样思考问题。&lt;/p&gt;

&lt;p&gt;当然啦，光是思考是不够的，也要有对应的行动哦。 :)&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>回首看向2018年的OKR</title>
      <link>https://liriansu.com/posts/2019-01-22-my-2018-okr-review/</link>
      <pubDate>Tue, 22 Jan 2019 22:07:02 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2019-01-22-my-2018-okr-review/</guid>
      <description>&lt;p&gt;去年默默践行了一年的个人 OKR,&lt;br /&gt;
今年年初也是到了回顾的时候了。&lt;/p&gt;

&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;去年写&lt;a href=&#34;https://liriansu.com/my-2018-okr&#34;&gt;《这就是我2018年的OKR》&lt;/a&gt;的时候，&lt;br /&gt;
我刚处于一个从各类渠道学到了这个技巧的兴奋期，&lt;br /&gt;
所以非常激动地设下了（自以为）很精妙的几个小目标。&lt;/p&gt;

&lt;p&gt;一年下来，我收获不小。&lt;br /&gt;
其中感触最深的一点是坚持自我审视对个人成长的有效帮助，&lt;br /&gt;
或者换一句话说，叫“坚持的力量”。&lt;/p&gt;

&lt;p&gt;OKR 这种东西，就像小学生对以后职业的幻想一样，&lt;br /&gt;
是即美好又容易幻灭的东西。&lt;br /&gt;
最关键的并不是目标是怎么定的，&lt;br /&gt;
而是定目标的人是如何去认知他的目标的。&lt;/p&gt;

&lt;p&gt;举个栗子，我给自己定下的年度目标有一条是“帮助陌生人 50 次”。&lt;br /&gt;
这点让我在路上走路都走不安稳了，一直左顾右盼看看有没有哪个人需要天降帮助的。&lt;br /&gt;
（最终顺带完成了不少把垃圾捡起来丢到垃圾桶里的普通成就）&lt;/p&gt;

&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;/h2&gt;

&lt;p&gt;去年定下的 OKR 是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O1. 技术影响力大幅度提升&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;学习/理解/使用/掌握6个技术工具&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;成为1k+ star项目的主contributor&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;技术文章输出20篇&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自己有233 star以上的代码项目&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;O2. 事业上做出极大贡献&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;团队的OKR完成率在80%以上&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;review 10万行代码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当300场面试官&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;成为整个团队top 1%的人&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;O3. 保持幸福度爆满的状态&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;与亲人总语音时间超过1000分钟&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;跟女朋友争吵次数小于3次&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;帮助陌生人达50人次&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;新增500首红心歌曲&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很简单，分三点来看就行了。&lt;/p&gt;

&lt;h3 id=&#34;技术影响力&#34;&gt;技术影响力&lt;/h3&gt;

&lt;p&gt;技术影响力这点上，其实跟我设想的方向有很大出入，&lt;br /&gt;
主要原因是：我 2018 年一整年负责的都是一整个团队，而不仅是只要对自己负责了。&lt;br /&gt;
一个很大的区别是以前我可以非常活跃地抢锅，&lt;br /&gt;
然后在第一线的业务技术锻炼中获取直接经验，&lt;br /&gt;
并且快速升级。&lt;br /&gt;
现在很多时候是得适度地分锅，&lt;br /&gt;
然后让队友们在第一线的业务技术中去锻炼，&lt;br /&gt;
以让不同诉求的同学都能找到个人跟公司的平衡。&lt;br /&gt;
于是在目标 (Object) 的方向上产生了偏差，&lt;br /&gt;
关键结果 (KeyResult) 上的完成情况就偏差更大了。&lt;/p&gt;

&lt;p&gt;技术工具上我一整年接触的比我想的要多了很多，&lt;br /&gt;
不仅对语言框架库 (Python/Django/ZeroMQ) 有了更深入的使用，&lt;br /&gt;
还对项目进度合作甚至向上向下的管理有了更进一步的认知。&lt;/p&gt;

&lt;p&gt;而在公众输出上，由于一年的闲暇时间基本都奉献给了我的事业（指工作），&lt;br /&gt;
所以开源上今年只自然增长到了 200 个 star，&lt;br /&gt;
一年下来文章也只写了 18 篇，&lt;br /&gt;
总的来说，这一项给自己打个 70 分吧。&lt;/p&gt;

&lt;h3 id=&#34;事业贡献&#34;&gt;事业贡献&lt;/h3&gt;

&lt;p&gt;我认为 2018 年在事业上的投入带给我的回报是非常大的。&lt;br /&gt;
虽然一整年下来，部门的事业没能坐上火箭，部门的兄弟们也没能升职加薪苟富贵，&lt;br /&gt;
不过目前看来，我们的未来仍然是非常可期的。&lt;/p&gt;

&lt;p&gt;从付出的角度上来说，Review 10 万行代码是肯定做到了，&lt;br /&gt;
光是近半年自己写的代码就有一万多行。&lt;br /&gt;
300 场面试官也已经达成了，&lt;br /&gt;
不过这个 KR 其实定的不好，&lt;br /&gt;
因为它的实现完全是依靠公司招人的计划以及跟 HR 小姐姐们的努力看简历有关的。&lt;br /&gt;
关于团队的部分没办法找到一手数据去查验，&lt;br /&gt;
不过我最自豪的一点是我们团队的大家一致保持着非常高的研发标准，&lt;br /&gt;
没有破窗效应，而且气氛还很棒，让我很喜欢在这里工作。&lt;/p&gt;

&lt;p&gt;而从收获的角度上来说，我收获最多的就是各类的间接经验。&lt;br /&gt;
不仅包括技术选型、团队合作的一些实验、项目管理工具的实验，&lt;br /&gt;
还包括我跟听了一整年的产品团队的需求分析、设计回顾甚至是跟创始人的战略制定。&lt;br /&gt;
假如以前的我只对“从零到一”很有信心的话，&lt;br /&gt;
现在的我对“从一到十”乃至“从十到百”也一样充满着信心了。&lt;/p&gt;

&lt;p&gt;总的来说，我其实在这个目标上付出的最多，&lt;br /&gt;
对应的收获也是最大的。&lt;/p&gt;

&lt;h3 id=&#34;幸福度&#34;&gt;幸福度&lt;/h3&gt;

&lt;p&gt;其实当时 OKR 里面加这一条，&lt;br /&gt;
我有种“小意思，加上让大家看看吧”的轻蔑的想法。&lt;br /&gt;
人只要知足，就很容易达到幸福的状态。&lt;br /&gt;
当然，一年来的事实也验证了我的想法。&lt;/p&gt;

&lt;p&gt;刚开始去实践目标的时候，&lt;br /&gt;
我逐渐又意识到了一点：&lt;br /&gt;
“人心所想会在潜意识里发出回声。”&lt;/p&gt;

&lt;p&gt;比如我给自己列了一条“与亲人总语音时间超过 1000 分钟”。&lt;br /&gt;
这是什么意思呢？&lt;br /&gt;
刨去过年，一年大概有 50 周。&lt;br /&gt;
假如每周都跟家里打电话的话，&lt;br /&gt;
每次通话时间保持到 20 分钟就行了。&lt;br /&gt;
于是当时我周常给家里打电话的时候特意留意了一下，&lt;br /&gt;
得出了一个让我一愣的结论：&lt;br /&gt;
“不去主动接话题的话，跟家里的通话是聊不到 20 分钟的。”&lt;br /&gt;
就像鸡汤里说的那样，亲情就是这么遥远又纤细的一根电话绳啊。&lt;/p&gt;

&lt;p&gt;总的来说，幸福度这个目标的完成状况我很满意。&lt;br /&gt;
年末我的网易云红心也成功地涨到了 2500，&lt;br /&gt;
并且给我一种我把云村听穿了的感觉。&lt;/p&gt;

&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;

&lt;p&gt;认真地过了一遍去年的 OKR 以后，&lt;br /&gt;
感觉时间这种东西，&lt;br /&gt;
食用起来的确是非常的美味。&lt;/p&gt;

&lt;p&gt;今年的目标我还没想清楚，&lt;br /&gt;
不过有一点应该是不会变的，&lt;br /&gt;
多写文章，记录自己的思想，&lt;br /&gt;
然后产生白底黑字的回音。&lt;/p&gt;

&lt;p&gt;毕竟永恒的方法，&lt;br /&gt;
就是刻在石头上。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何搭建个人的舒适工作环境 —— 又名 Surface Pro 使用感言</title>
      <link>https://liriansu.com/posts/2018-12-04-dev-env/</link>
      <pubDate>Tue, 04 Dec 2018 23:16:29 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-12-04-dev-env/</guid>
      <description>&lt;p&gt;首先感谢 Mia 在预算见底的年底，&lt;br /&gt;
卖掉了 iPhone 给我补上了款项…&lt;/p&gt;

&lt;p&gt;这篇文章大概会涉及三个方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Surface Pro 体验&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我的开发环境硬件搭配&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我的开发环境软件搭配&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;surface-pro-体验&#34;&gt;Surface Pro 体验&lt;/h2&gt;

&lt;p&gt;我以前B站就逛逛动画区跟鬼畜区，&lt;br /&gt;
前几个月开始逛科技区跟生活区以后，&lt;br /&gt;
草单就像猫刨过的卫生纸一样疯狂变长。&lt;/p&gt;

&lt;p&gt;在很多件很有科技感的物件中，&lt;br /&gt;
我看中了 Surface Pro。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/env/sp.jpg&#34; alt=&#34;sp&#34; /&gt;&lt;br /&gt;
&amp;gt; 码字时的桌面一览&lt;/p&gt;

&lt;p&gt;Surface Pro 是微软出的一款平板电脑。&lt;br /&gt;
我看中的是 Surface Pro 6，&lt;br /&gt;
硬件参数是 512GB SSD 硬盘 + 16G 内存 + 8代4核i7 CPU (i7-8650U)，没有独立显卡，没有风扇，&lt;br /&gt;
除了支持触屏以外，身上的接口包括一个音频口、一个雷电2（兼容 miniDP）接口、一个 USB 3.0 接口、一个 Surface Connect 充电口。&lt;br /&gt;
国行官方售价是裸机 14888 RMB，&lt;br /&gt;
图里的键盘售价是 788 RMB,&lt;br /&gt;
粘在屏幕左边的触控笔是 728 RMB.&lt;/p&gt;

&lt;p&gt;上面数据有点冷冰冰的，&lt;br /&gt;
让我们举些具体的栗子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;机身很轻。机身重量是 700g, 背在书包里感觉仅等于背着半本《算法导论》。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;抱着走非常方便。配合 XODO/Bamboo 等触屏应用使用可以完全无纸化办公，连跟候选人聊天都是带着看简历。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;而且记的笔记天生就是电子版这一点非常开心&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;怪不得用 iPad 的@快雪初晴 会整天想写点什么&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不会想用 Surface 玩大型游戏。没有独显让我连 dota2 都不想装。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;然而我还是装了 Artifact 跟文明 6。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;玩文明比想象的要流畅很多，标速一百回合内无明显卡顿。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不过就是比较烫，比得上边充电边阴阳师的小米 MIX 了。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;工作时不会有任何卡顿感。16G 的内存同时开着 Chrome + JetBrains + Music 完全无压力。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/env/tasks.jpg&#34; alt=&#34;task&#34; /&gt;&lt;br /&gt;
&amp;gt; 开发时的常见内存占用&lt;/p&gt;

&lt;p&gt;总的来说，购入 Surface 以后，&lt;br /&gt;
我用它替换了&lt;a href=&#34;https://liriansu.com/my-friend-ldsink&#34;&gt;之前用的公司神舟电脑&lt;/a&gt;。&lt;br /&gt;
目前还在蜜月期的我回家也会背着这个小本子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/env/weibo.jpg&#34; alt=&#34;weibo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;我的开发环境硬件搭配&#34;&gt;我的开发环境硬件搭配&lt;/h2&gt;

&lt;p&gt;我对硬件开发环境的需求大概是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;公司和家里都得有舒适的开发环境&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;我回家一般也会写点小代码&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;公司的配置得更好一些&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;工作日我一天大概要睡 8 小时，剩下 12 小时在公司，4 小时在家。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一周在公司写代码的时间占比更高。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;显示器得多一点，键盘鼠标得满上&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;我不太习惯单屏切多桌面&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;俗话说的好：越菜的程序员键盘越大&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;来自广东，就是粤菜&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/env/desktop.jpg&#34; alt=&#34;desktop&#34; /&gt;&lt;br /&gt;
&amp;gt; 程序员的桌面&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;电脑（主机）：Surface Pro&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;公司的标配是当年的 Mac Pro&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我自己要了个神舟，现在已经还了回去了&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;显示器：Dell U2417H * 3 + 显示器臂&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;公司的标配是俩，自己又补了一个&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;显示器臂我买的 乐歌+NewBalance, 感觉 NB 便宜些质量也还行，全买 NB 也 OK&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;键鼠：Cherry 青轴 + 牧马人&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;键帽是一套无刻的高帽，@hulucc 买错了匀给我的，很好用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;牧马人是淘宝活动 5 元买的，因为我用 Vim 所以用的不多，也很好用（滑稽&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;配件：Surface Dock + Bose QC 35II + 小米排插/数据线&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;值得拿出来说的就这几个&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Surface Dock: 官方的拓展坞，只占用一个 Connect 充电口，供给了两个雷电2四个USB一个网口，插拔极度方便！一键下班不是梦&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Bose QC 35II: 属于&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20665153&#34;&gt;洗碗机类需求&lt;/a&gt;，用了就回不去没降噪耳机的时候了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;小米排插/数据线: 性价比高而且实用，假如是自己买的话强烈推荐（我这是公司配的&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后是价格环节：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Surface 裸机 + 键盘是必备的，算上笔一整套大概是 16000 左右，京淘等活动期可能会有优惠，学生也可以买官方的九折教育套餐。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Dell U2417H 是 1.5k 左右，显示器的话看个人偏好。前阵子看到个干货：&lt;a href=&#34;https://www.zhihu.com/question/35668312/answer/446745873&#34;&gt;《如何选购显示器》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;键鼠耳机就略过了，Dock 的话官方价要 1.5k, 假如你有多屏需求的话是必买的&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能整套看起来是很特么贵的，&lt;br /&gt;
但是可以一件件地慢慢攒啊 :)&lt;/p&gt;

&lt;h2 id=&#34;我的开发环境软件搭配&#34;&gt;我的开发环境软件搭配&lt;/h2&gt;

&lt;p&gt;距离我上次写的&lt;a href=&#34;https://liriansu.com/windows-dev-env&#34;&gt;《搭建舒适的 Windows 开发环境》&lt;/a&gt;已经过去了快两年，&lt;br /&gt;
现在再去 review 当时的开发环境，&lt;br /&gt;
发现我用的软件基本上都换了一圈…&lt;/p&gt;

&lt;p&gt;不过不论在什么平台开发，&lt;br /&gt;
用什么软件提升生产力，&lt;br /&gt;
我认为总的原则是不会变的：&lt;br /&gt;
&lt;strong&gt;聚焦目标，提升效率，减少重复&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;两年前的我主要面对的问题，以及解决方案有这么些：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装软件不方便：用 &lt;code&gt;chocolatey&lt;/code&gt; 去自动化安装&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;切换程序/寻找文件不方便：用 &lt;code&gt;wox + everything&lt;/code&gt; 来定位&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;需要在类 linux shell 下工作：用 &lt;code&gt;git bash&lt;/code&gt; 作为工作的环境&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;有很多一定要在 linux 下才能做的事情：用 &lt;code&gt;virtualbox + vagrant + putty&lt;/code&gt; 的本地虚拟化解决方案&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;提升工作体验：使用 &lt;code&gt;网易云音乐 + 有道云笔记 + 有道词典&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;想成为一个有理想有追求的人：用 &lt;code&gt;Vim&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在我面对的问题跟解决方案，相较于两年前都有些许不同：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装软件不方便：&lt;strong&gt;手动安装&lt;/strong&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;本质上这是 Windows 混乱自由的生态导致的，很多软件都无法被 &lt;code&gt;chocolatey&lt;/code&gt; 支持（比如 Steam&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;即使是用 &lt;code&gt;scoop&lt;/code&gt; 或者是 &lt;code&gt;choco&lt;/code&gt; 支持的软件，也会因为每个软件有些微不同的配置，而产生让强迫症不爽的自动化安装体验&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;所以现在我选择手动安装所有软件。其实感觉还行，因为电脑里也不会装上千个软件…&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;切换程序/寻找文件不方便：&lt;strong&gt;用 &lt;a href=&#34;https://www.listary.com/&#34;&gt;&lt;code&gt;listary&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listary&lt;/code&gt; 的功能已经完美覆盖了 &lt;code&gt;wox + everything&lt;/code&gt; 了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对中文的支持也非常好&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/env/hyper.jpg&#34; alt=&#34;hyper&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;需要在类 linux shell 下工作：&lt;strong&gt;用 &lt;a href=&#34;https://hyper.is/&#34;&gt;&lt;code&gt;Hyper&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git bash&lt;/code&gt; 一点不好的就是它太丑了，我配了好久都没配出好看的感觉&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hyper&lt;/code&gt; 我用的主题是 &lt;a href=&#34;https://github.com/yui540/hyper-akari&#34;&gt;&lt;code&gt;hyper-akari&lt;/code&gt;&lt;/a&gt;, 是一个我非常喜欢的 &lt;a href=&#34;https://yui540.graphics&#34;&gt;CSS 魔法哥&lt;/a&gt;的作品&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有很多一定要在 linux 下才能做的事情：&lt;strong&gt;那就去 linux 下做吧&lt;/strong&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;目前做的后端是可以完美跨平台开发测试的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于特定的功能会用 fake/mock 给滤掉，不妨碍开发体验&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于其它的体验上的软件，&lt;br /&gt;
就属于见仁见智各取所需的事情啦。&lt;br /&gt;
最后附上一些我的小习惯：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;统一管理所有软件的配置，都放在了 &lt;a href=&#34;https://github.com/LKI/LKI&#34;&gt;github.com/LKI/LKI&lt;/a&gt; 里面。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在统一的 workspace 下放代码 （我用的是 &lt;code&gt;C:\Code&lt;/code&gt;）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;ss + Proxifier + SwichyOmega&lt;/code&gt; 实现复杂规则下的科学上网。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;:wink: 用 &lt;code&gt;Vim&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>技术人员要怎么选择自己的职业发展道路</title>
      <link>https://liriansu.com/posts/2018-10-25-company-stategy/</link>
      <pubDate>Thu, 25 Oct 2018 23:35:26 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-10-25-company-stategy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇文章的灵感来自于最近的一次跟好友聊天。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;临近毕业的时候，我要找工作了。&lt;br /&gt;
但是当时的我其实非常懵逼：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我没有职业发展规划，我甚至连我想进什么样的公司都没偏好（反正我只能写代码）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;就算我有偏好（比如钱多事少离家近），我也不知道哪个公司符合我的偏好&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;即使我知道有这样的公司（比如我想象中的谷歌），我也不一定能进&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;网上/生活里别人关于职业发展的说法五花八门（比如写代码是吃青春饭），甚至还互相冲突&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是我秉承着车到山前必有路的快乐心态，&lt;br /&gt;
去了第一家给我发 offer 的公司。&lt;br /&gt;
（结果工作出人预料地鱼块，详情参见&lt;a href=&#34;https://liriansu.com/adult-life&#34;&gt;《前文》&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;如今的我再回头去审视这种青涩的想法，&lt;br /&gt;
我最大的感慨是：&lt;br /&gt;
信息量的多寡，的确是决策好坏的决定性因素啊。&lt;/p&gt;

&lt;p&gt;我觉得当时我的懵逼是完全正常，&lt;br /&gt;
而且我的决策机制（去第一家合适的）也是没有大问题的。&lt;br /&gt;
因为我现在是这么想的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;没有最佳策略，只有你最赞赏的策略&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不仅要靠自我奋斗，还要考虑到历史的进程&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;目标往往不是一开始就定死的，而是要不断更新的&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;没有最佳策略&#34;&gt;没有最佳策略&lt;/h2&gt;

&lt;p&gt;人在面对选择题的时候，&lt;br /&gt;
总想找出正确答案。&lt;br /&gt;
但不是所有选择都是选择题，&lt;br /&gt;
总有选择是没有标准答案的，&lt;br /&gt;
这个时候人就会想选C。&lt;/p&gt;

&lt;p&gt;比如职业相关的话题，&lt;br /&gt;
总会出现这一类问题：&lt;br /&gt;
“是去大厂比较好？还是去创业型公司？”&lt;/p&gt;

&lt;p&gt;的确，在信息量不足的情况下，&lt;br /&gt;
这种问题是非常难以回答的。&lt;br /&gt;
Richard Liu 有一篇写的蛮好的文章&lt;a href=&#34;https://zhuanlan.zhihu.com/p/46702362&#34;&gt;《职场抉择：我适合大公司，独角兽，还是幼角兽？》&lt;/a&gt;就是讲这个话题的。&lt;/p&gt;

&lt;p&gt;这几种公司的优点代表了不同的策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创业公司：机会极多，非常自由，事情做成的话成就感巨高。适合适应能力强，想独当一面的人。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;独角兽：未来可期，各方面都比较优秀，团队水平会比较高。适合业务能力突出，想快速成功的人。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大厂：发展稳定，社会影响力大，工作不会侵占过多个人生活。适合在意公私平衡，想稳定工作的人。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如有朋友跟我聊过他的跳槽策略，&lt;br /&gt;
就是挑着C轮/D轮的独角兽公司去，&lt;br /&gt;
只要趋势不变的话，&lt;br /&gt;
一两年公司就可以上市，&lt;br /&gt;
然后再过两三年期权就可以套现。&lt;br /&gt;
这样他就可以用他优秀的工作技能，&lt;br /&gt;
获得不错的报酬。&lt;/p&gt;

&lt;p&gt;不过我个人来说不会选择这样的策略。&lt;br /&gt;
我认为人类的事业感受可以分为这么六个方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;报酬：劳动获取的劳动等价物（钱）是否满意？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;业务：对做的事情本身是否有成就感？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;体验：工作的体验（环境/制度）是否舒适？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;发展：工作内容是否稳定？对工作的未来是否有期待？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;生活：与工作交叉的人生（通勤/假期）是否舒服？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;团队：跟一起共事的人是否开心？&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最理想的工作，就是这几个问题的回答都是正面的。&lt;br /&gt;
不过很多时候看到这样的问题，&lt;br /&gt;
感受到的反而是一种无力感：&lt;br /&gt;
我的工作对我影响很大，但很多地方好像无法改变。&lt;/p&gt;

&lt;p&gt;这就对了，就是这样的。&lt;/p&gt;

&lt;h2 id=&#34;历史的进程&#34;&gt;历史的进程&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的进程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话很多人都听过，是江学长视察联合工程公司的时候说的。&lt;br /&gt;
有一个我经常举的栗子，道理也是类似的：&lt;/p&gt;

&lt;p&gt;一个人的发展，其实是乘法原理导致的。&lt;br /&gt;
蚍蜉和大树是很好的朋友，&lt;br /&gt;
蚍蜉在 Hooli 的广告部门工作，经常划水；&lt;br /&gt;
大树在 PiedPiper 的业务部门工作，朝九晚十，一周六天。&lt;br /&gt;
一年下来，Hooli 稳定发展，增长了 20%，&lt;br /&gt;
广告部门增长更快，增长了 50%，&lt;br /&gt;
蚍蜉有点划，其他同事评分都是 A，就他是个 B。&lt;br /&gt;
而大树呢，工作认真，贡献突出，个人评分 A++，&lt;br /&gt;
但是 PiedPiper 今年业绩一般，只增长了 5%，&lt;br /&gt;
大树所在的业务部门更是业绩下滑了 20%。&lt;br /&gt;
结果 Hooli 因为发展快速，蚍蜉都成了个小 Manager 开始带人了；&lt;br /&gt;
而大树所在的整个业务线都要被砍掉裁员。&lt;/p&gt;

&lt;p&gt;用优雅的数学来归纳这个粗糙的故事就是：&lt;br /&gt;
&lt;code&gt;个人的成长 = 个人 * 团队 * 公司 * 历史的进程&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;就像很多独角兽公司都会引用的那句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if you&amp;rsquo;re offered a seat on a rocket ship,&lt;br /&gt;
you don&amp;rsquo;t ask what seat.&lt;br /&gt;
You just get on.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Eric Schmidt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以假如有机会的话，&lt;br /&gt;
在面试一家公司的时候，&lt;br /&gt;
去跟你未来的队友们聊一聊吧。&lt;br /&gt;
初创公司的话，看看创始人是怎么样的；&lt;br /&gt;
公司分了不同的部门以后，看看部门Leader是什么样的人；&lt;br /&gt;
扁平化的工作氛围，就跟（潜在）未来的队友们聊聊。&lt;br /&gt;
在合适的氛围、优秀的团队里，&lt;br /&gt;
个人的成长会有最大的加速度。&lt;/p&gt;

&lt;h2 id=&#34;不断更新的目标&#34;&gt;不断更新的目标&lt;/h2&gt;

&lt;p&gt;小时候想当科学家，&lt;br /&gt;
大学想当CEO，&lt;br /&gt;
毕业以后想当CTO，&lt;br /&gt;
面试的时候觉得当架构师不错，&lt;br /&gt;
入职了以后想想就当个后端吧，&lt;br /&gt;
现在觉得写好 Python 业务代码才是真切的目标。&lt;br /&gt;
以上就是“更新的目标”的含义了（并不&lt;/p&gt;

&lt;p&gt;认真地讲，&lt;br /&gt;
我感觉在工作里除了具体技能的提升，&lt;br /&gt;
还有一部分很重要的是&lt;strong&gt;掌握信息量的增多&lt;/strong&gt;。&lt;br /&gt;
在信息量不足的时候，&lt;br /&gt;
人类是很难做出最佳的选择的。&lt;br /&gt;
这也是为什么我们写程序的时候，&lt;br /&gt;
总会想问清楚“需求是什么？”“以后业务逻辑可能会怎么变？”&lt;br /&gt;
随着信息量的增大，&lt;br /&gt;
人类总可以做出合适的决策。&lt;/p&gt;

&lt;p&gt;所以其实接触工作的过程，&lt;br /&gt;
其实也是一个人不断扩充信息量，&lt;br /&gt;
然后根据掌握的信息，&lt;br /&gt;
不断修正目标的过程。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;所以对于主题“技术人员要怎么选择自己的职业道路”，&lt;br /&gt;
这篇文章客套地讲了一些虚的道理：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;选择合适的策略来找到心仪的公司&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;注意工作的团队也是非常重要的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在信息量增大时，及时更新目标&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;emmmmmm, 感觉这里的道理有点太虚了。&lt;br /&gt;
那我们就在接下来的文章里讲一些具体的干货吧 XD&lt;br /&gt;
祝大家都能找到自己心仪的事业，并且为之奋斗一生~&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018 QCon 第一天早上参会有感</title>
      <link>https://liriansu.com/posts/2018-10-18-qcon-2018-shanghai/</link>
      <pubDate>Thu, 18 Oct 2018 18:54:24 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-10-18-qcon-2018-shanghai/</guid>
      <description>&lt;p&gt;其实这次的 QCon 一共有三天，&lt;br /&gt;
但是我只去了半天。&lt;/p&gt;

&lt;p&gt;前几个月 QCon 临近，&lt;br /&gt;
老大豪气干云地一挥：&lt;br /&gt;
“今年我们买票去听 QCon！”&lt;br /&gt;
于是我们非常开心地到网站上一看，&lt;br /&gt;
一张票几千人民币…&lt;br /&gt;
……&lt;br /&gt;
预算不多的我们只能在力所能及的范围内买一些票，&lt;br /&gt;
然后把每张票拆成好几块，&lt;br /&gt;
让尽可能多的同学都去感受一下“全球软件开发大会”的氛围。&lt;br /&gt;
（QCon 的中文名真的是叫这个！）&lt;/p&gt;

&lt;p&gt;这次我就去听了个早上，&lt;br /&gt;
在主会场彭蕾/臧秀涛致辞以后，&lt;br /&gt;
听了三场讲师的分享。&lt;/p&gt;

&lt;h1 id=&#34;java-api-design-best-practices&#34;&gt;Java API Design Best Practices&lt;/h1&gt;

&lt;p&gt;第一场本来是个老外讲 Go 的，&lt;br /&gt;
但好像路上堵车没能来得及到会场，&lt;br /&gt;
所以临时换了个讲 Java 的老外。&lt;/p&gt;

&lt;p&gt;这位老哥叫 Jonathan，&lt;br /&gt;
呆的公司一路是 Sun/Oracle/Microsoft，&lt;br /&gt;
介绍完自己以后，&lt;br /&gt;
PPT 突然切到了 &lt;Effective Java (3rd)&gt;,&lt;br /&gt;
然后 Jonathan 吹了一波：&lt;br /&gt;
“这可是写 Java 的程序员都必看的一本书！”&lt;/p&gt;

&lt;p&gt;然后话题逐渐切入正轨，Jonathan 提出了好的 API 会有的几个特质：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;易懂的 (Understandable)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;稳定的 (Consistent)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;合适的 (Fit for purpose)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;文档好 (Well documented)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;节制的 (Restrained)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;可进化 (Evolvable)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后 Jonathan 用具体的例子穿插着讲了一下他对这几个特质的理解。&lt;/p&gt;

&lt;p&gt;我听下来感觉抛去具体的语法例子，&lt;br /&gt;
优秀的 API 特质都是共通的，&lt;br /&gt;
就像之前写的&lt;a href=&#34;https://liriansu.com/api-design-in-python&#34;&gt;《优雅的 Python 接口设计》&lt;/a&gt;一样。&lt;/p&gt;

&lt;p&gt;最后 Jonathon 又吹了一波 &lt;Effective Java&gt;，&lt;br /&gt;
并且还极力宣传说：“你们这些只看过第二版的，记得买第三版看看啊…”&lt;br /&gt;
简直让人怀疑这本书给他分成了（x&lt;/p&gt;

&lt;h1 id=&#34;腾讯微服务架构的过去-现在与未来&#34;&gt;腾讯微服务架构的过去、现在与未来&lt;/h1&gt;

&lt;p&gt;休息了一会儿，就到了腾讯讲师刘昕的回合了。&lt;/p&gt;

&lt;p&gt;虽然话题是微服务框架，&lt;br /&gt;
但是感觉大部分时间刘昕都在宣传自家框架 &lt;a href=&#34;https://github.com/tarscloud&#34;&gt;Tars (github.com/TarsCloud)&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;不过整体讲的逻辑还是很清晰的：&lt;br /&gt;
- 最早遇到了业务逻辑复杂、代码质量难控、运营管理混乱、监控体系缺失的问题。&lt;br /&gt;
- 后来在“大系统小做”的指导思想下，逐步开始统一框架。&lt;br /&gt;
- 框架是首先实现了服务调用+服务治理的基础功能。&lt;br /&gt;
- 然后提升了性能+易用性。&lt;br /&gt;
- 现在还引入了容器化+高拓展性（其实到这一步就可以开源推广了）&lt;/p&gt;

&lt;p&gt;刘昕用的 PPT 里有两个很好玩的数据。&lt;br /&gt;
一个是 51% 都考虑往 Cloud Native 的架构转。&lt;br /&gt;
这个数据引出的话题是一个很不错的话题，&lt;br /&gt;
让 AWS 重度用户很想说些什么，&lt;br /&gt;
感觉下次可以专门码一篇文章。&lt;/p&gt;

&lt;p&gt;还有一个是用 服务治理/多语言 的不严谨划分成的四象限：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/micro_services.jpg&#34; alt=&#34;MS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;非常有趣。&lt;/p&gt;

&lt;p&gt;最后刘昕还花了不少时间讲了一下 TARS 支持的多门语言。&lt;br /&gt;
听了以后我很佩服（然后选择了 service mesh&amp;hellip;）&lt;/p&gt;

&lt;h1 id=&#34;the-past-present-and-future-of-go-2&#34;&gt;The Past, Present, and Future of GO 2&lt;/h1&gt;

&lt;p&gt;休息了一会儿后，本应第一个开讲的 David Chaney 终于来啦。&lt;br /&gt;
（@hulucc 问：他跟 Go 啥关系啊？&lt;br /&gt;
@紫月酥 答：应该就像 @jkzing 跟 VueJS 的关系一样，是核心 Contributor。）&lt;/p&gt;

&lt;p&gt;一开始 David 讲了很多历史，&lt;br /&gt;
比如 Go 诞生的初衷，&lt;br /&gt;
Go 从小长大一路走过的路，&lt;br /&gt;
软工和编码的区别，&lt;br /&gt;
Go 多个版本的更新，&lt;br /&gt;
现在用 Go 的公司/团队/项目之类的…&lt;br /&gt;
听得我感觉又是一个典型的布道师，&lt;br /&gt;
就当是给纯萌新科普 Go 了…&lt;/p&gt;

&lt;p&gt;然后！&lt;br /&gt;
David 突然又介绍了一波 gopher 这个萌物：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/gopher.jpg&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（感觉全场一下子就四老外兴奋.jpg起来了）&lt;/p&gt;

&lt;p&gt;在漫长的铺垫以后，&lt;br /&gt;
David 终于讲到了 Go 面临并且要解决的三个大的问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;依赖管理 (Dependency management)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;错误处理 (Error handling)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;泛型 (Generics)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;听到这里，我一拍大腿：&lt;br /&gt;
“对对对！我当时就是因为这个弃坑的！”&lt;/p&gt;

&lt;p&gt;随之 David 不紧不慢地用各种小例子给出了目前的解决方案：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go 1.11 里已经可以用 go modules 来管理依赖了。（初见的我有种 node_modules 的熟悉即视感）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Go 2 里会引入 check/handle 等语法糖来处理错误，本质上还是要第一时间让程序员自己处理错误的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Go 2 里会有泛型，目前可能会引入 contract。（但具体怎么搞，我感觉我这里没太听明白，之后得去深入看看）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/generic_dilemma.jpg&#34; alt=&#34;generic&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而后 David 还特别强调了一下，&lt;br /&gt;
Go2 和 Go1 只是大版本不一样，&lt;br /&gt;
“是不会像 Python3 或者 Perl6 那样滴…”&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;主会场第一天上午到此就全部结束了。&lt;br /&gt;
整体下来，我感觉对眼界增长大于技术收获。&lt;br /&gt;
可以知道同僚都在朝着什么方向去深耕也是非常不错的收获。&lt;/p&gt;

&lt;p&gt;2018年的最后一个季度肯定会再次把 Go 给捡起来认真玩一下…&lt;br /&gt;
（不过没有参数默认值真的写起来很难受啊.jpg）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/qcon.jpg&#34; alt=&#34;qcon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>优雅的 Python 接口设计</title>
      <link>https://liriansu.com/posts/2018-09-21-api-design-in-python/</link>
      <pubDate>Fri, 21 Sep 2018 20:57:46 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-09-21-api-design-in-python/</guid>
      <description>&lt;p&gt;今天跟&lt;a href=&#34;https://github.com/hulucc&#34;&gt;@hulucc&lt;/a&gt; 日常写码吹比，&lt;br /&gt;
讲到了选第三方库的原则说：&lt;br /&gt;
“我其实发现我现在选库不太 care 他源码是怎么实现的，&lt;br /&gt;
但是我非常喜欢那些 api 设计得巨科学的库。”&lt;/p&gt;

&lt;h2 id=&#34;科学的-api&#34;&gt;科学的 API&lt;/h2&gt;

&lt;p&gt;API 设计的科学大概是什么样的呢？&lt;br /&gt;
比如举一个有名的例子就是 &lt;a href=&#34;https://github.com/requests/requests&#34;&gt;requests&lt;/a&gt; 这个库。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Requests is one of the most downloaded Python packages of all time,&lt;br /&gt;
pulling in over 11,000,000 downloads every month.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个库的 API 用起来大概是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; response = requests.get(&amp;#39;https://api.github.com/user&amp;#39;, auth=(&amp;#39;user&amp;#39;, &amp;#39;pass&amp;#39;))
&amp;gt;&amp;gt;&amp;gt; response.status_code
200
&amp;gt;&amp;gt;&amp;gt; response.headers[&amp;#39;content-type&amp;#39;]
&amp;#39;application/json; charset=utf8&amp;#39;
&amp;gt;&amp;gt;&amp;gt; response.encoding
&amp;#39;utf-8&amp;#39;
&amp;gt;&amp;gt;&amp;gt; response.raise_for_status()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里设计的所有 Python 程序语言都是见文知意的英文人类语言，&lt;br /&gt;
&lt;code&gt;requests.get&lt;/code&gt; 中的 &lt;code&gt;requests&lt;/code&gt; 不仅是包名，&lt;br /&gt;
还化身成了代码语义的一部分。&lt;br /&gt;
返回的 &lt;code&gt;response&lt;/code&gt; 就是一个典型的 HTTP 协议对象，&lt;br /&gt;
只要对 HTTP 协议有一定了解的程序员，&lt;br /&gt;
基本上不用看文档都能猜到它的主要属性和相关作用。&lt;br /&gt;
对应还有便捷的 &lt;code&gt;.raise_for_status()&lt;/code&gt; 和 &lt;code&gt;.json()&lt;/code&gt; 这样的常用方法。&lt;br /&gt;
这就是科学的 API 给我的感受。&lt;/p&gt;

&lt;p&gt;当然，库的作者（也就是那个帅哥 &lt;a href=&#34;https://github.com/kennethreitz&#34;&gt;Kenneth Reitz&lt;/a&gt;）也清楚自己的代码接口优雅，&lt;br /&gt;
他的个人签名也是这么说的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I wrote @requests: HTTP for Humans.&lt;br /&gt;
The only thing I really care about is interface design.&lt;br /&gt;
  &amp;ndash; Kenneth Reitz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;不科学的-api&#34;&gt;不科学的 API&lt;/h2&gt;

&lt;p&gt;大部分开源高星项目的接口都是比较优雅的，&lt;br /&gt;
那么不科学的 API 大概是什么样子呢？&lt;br /&gt;
唔，我的话，翻一翻自己两三年前的代码，&lt;br /&gt;
就满是不科学的 API 实现了。&lt;/p&gt;

&lt;p&gt;最早接触 &lt;code&gt;**kwargs&lt;/code&gt; 这个东西的时候，&lt;br /&gt;
我非常喜欢用这个语法，&lt;br /&gt;
比如我常常会写这么一种函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
        now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt;, datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now())
        key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;)
        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样写的好处是看起来灵活的一比，实现起来爽。&lt;br /&gt;
以后假如要加参数，&lt;br /&gt;
往往只要在 &lt;code&gt;record.create&lt;/code&gt; 里面加一个新的 &lt;code&gt;kwargs.get&lt;/code&gt; 就行了。&lt;br /&gt;
然而在大部分情况，这样的实现只会把参数给隐式化：&lt;br /&gt;
记不住参数调用 &lt;code&gt;record.create&lt;/code&gt; 的时候还得进函数看实现；&lt;br /&gt;
而且万一把 &lt;code&gt;value&lt;/code&gt; 拼错成了 &lt;code&gt;valeu&lt;/code&gt;，&lt;br /&gt;
函数是会像某些语言一样正常运行的！&lt;br /&gt;
然后会在后面某个地方报错，&lt;br /&gt;
这样就很难方便找出根源了。&lt;/p&gt;

&lt;p&gt;后来我大部分情况会这么写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(now&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的显式调用强制要求参数的正确性，&lt;br /&gt;
虽然实现起来要写的参数多了，&lt;br /&gt;
但是调用和阅读的时候更加明确。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&amp;#39;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&amp;#39;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&amp;#39;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&amp;#39;s do more of those!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后来我看到 &lt;code&gt;The Zen of Python&lt;/code&gt; 的这句 &lt;code&gt;Explicit is better than implicit&lt;/code&gt; 总会想到这个例子。&lt;br /&gt;
（关于 Python 接口参数设计的，有一篇我觉得说的很好的知乎文章：&lt;br /&gt;
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25017419&#34;&gt;《Python函数接口的一些设计心得 - 灵剑》&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;The Zen of Python&lt;/code&gt; 里还有非常多珠玑可以挖掘。&lt;br /&gt;
比如在做的一个项目 &lt;a href=&#34;https://github.com/zaihui/hutils&#34;&gt;hutils&lt;/a&gt;，&lt;br /&gt;
想着把公司里各种 Python Web 中常用到的函数抽出来做个基础库，&lt;br /&gt;
结果写的时候 80% 的时间都在想怎么让 API 变的更科学。&lt;/p&gt;

&lt;p&gt;比如我们写后端的时候，&lt;br /&gt;
经常会遇到要转化框架错误类的情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;service_call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        external_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ExternalServiceError &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ex:
        log_error(ex)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; APIError(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error calling external service&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对应的，我们会有个这样的装饰器来封装错误处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@contextlib.contextmanager&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;catches&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;exceptions,
            raise_to: &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseException&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
            raise_from: Callable[[&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseException&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
            log&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False,
            ignore&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; exceptions &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ex:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; log:
            log_error(ex)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; ignore:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; raise_from:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; raise_from(ex)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; raise_to  &lt;span style=&#34;color:#75715e&#34;&gt;# pylint: disable=raising-bad-type&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了封装的装饰器以后，&lt;br /&gt;
简单的错误转化就可以跟业务代码相分离：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@catches&lt;/span&gt;(ExternalServiceError, raise_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;APIError(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error calling external service&amp;#39;&lt;/span&gt;), log&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;service_call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;):
    external_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这样的装饰器实现会在 Code Review 阶段就会被像 &lt;a href=&#34;https://github.com/hulucc&#34;&gt;@hulucc&lt;/a&gt; 这样的铁血队友锤回来，&lt;br /&gt;
这样的 API 实现有几个不够科学的地方：&lt;br /&gt;
* &lt;code&gt;raise_to&lt;/code&gt; 和 &lt;code&gt;raise_from&lt;/code&gt; 有重叠之处，&lt;br /&gt;
  而且调用者不注意的话会触发 &lt;code&gt;raise None&lt;/code&gt; 的问题，&lt;br /&gt;
  连 &lt;code&gt;pylint&lt;/code&gt; 都注意到了。&lt;br /&gt;
  应当使用类型判断来合并参数。&lt;br /&gt;
* 这样错误转化，原错误类的堆栈信息会丢失。&lt;br /&gt;
  应当使用 &lt;code&gt;raise ... from ...&lt;/code&gt; 的语法来保留堆栈信息。&lt;br /&gt;
* &lt;code&gt;transfer&lt;/code&gt;/&lt;code&gt;ignore&lt;/code&gt;/&lt;code&gt;retry&lt;/code&gt; 其实是相对独立的逻辑，&lt;br /&gt;
  混合处理当然可以，&lt;br /&gt;
  不过最好的情况是逻辑拆分，独立处理。&lt;/p&gt;

&lt;p&gt;一波讨论以后，&lt;br /&gt;
顺带顺手支持 &lt;code&gt;catches(Exception, raises=raise_api_error)&lt;/code&gt; 的快捷写法，&lt;br /&gt;
装饰器的实现就改成了这样子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@contextlib.contextmanager&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;catches&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;exceptions, raises: Union[&lt;span style=&#34;color:#a6e22e&#34;&gt;BaseException&lt;/span&gt;, Callable[[&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseException&lt;/span&gt;]], log&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False):
    exceptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exceptions &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;,)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; exceptions &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ex:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; callable(raises):
            raises &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raises(ex)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; log:
            log_error(__name__, raises)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; raises &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;感觉更加优雅了呢。&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;Python 因为语法及其灵活，&lt;br /&gt;
所以其实接口的设计是全看程序员的设计水平的。&lt;br /&gt;
但往往科学又优雅的实现就像 &lt;code&gt;There should be one-- and preferably only one --obvious way to do it&lt;/code&gt; 这句话说的一样，&lt;br /&gt;
是万中取一的。&lt;/p&gt;

&lt;p&gt;不仅要实现功能，&lt;br /&gt;
还要优雅，不要污。&lt;br /&gt;
看来写程序的确是要想得多，&lt;br /&gt;
怪不得程序员会头发少呀 :)&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毕业三年的报告</title>
      <link>https://liriansu.com/posts/2018-09-09-adult-life/</link>
      <pubDate>Sun, 09 Sep 2018 19:46:37 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-09-09-adult-life/</guid>
      <description>&lt;p&gt;前阵子在知乎上看到一个问题，&lt;br /&gt;
叫&lt;a href=&#34;https://www.zhihu.com/question/31907973&#34;&gt;《读研三年与工作三年的人有哪些差别》&lt;/a&gt;。&lt;br /&gt;
我的思绪突然被唤醒了：&lt;br /&gt;
对哦，原来我已经毕业了三年了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，本文有一万字，可能要读个半小时？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我跟小米娅的工作习惯都比较类似，&lt;br /&gt;
前阵子闲聊的时候我们算了一下：&lt;br /&gt;
正常的朝九晚六加双休，&lt;br /&gt;
一周是工作 40 小时；&lt;br /&gt;
不过因为我们两个人基本上下班以后还会看工作相关的事情，&lt;br /&gt;
平均下来工作日会多工作 2 小时，&lt;br /&gt;
周末还会有一天干职业相关的事情，&lt;br /&gt;
所以满打满算可以说一周工作 60 小时。&lt;br /&gt;
嚯。也就是说我们工作两年，就有四年工作经验了。&lt;br /&gt;
赚翻了耶。&lt;/p&gt;

&lt;p&gt;当然了，这个工作经验 buff 只是说着玩的。&lt;br /&gt;
认真地说，要算工作经验的话，&lt;br /&gt;
我更愿意从 2014年7月7日 算起，&lt;br /&gt;
那是作为实习生的我第一份工作的 First Day（定语真多）。&lt;/p&gt;

&lt;h2 id=&#34;实习&#34;&gt;实习&lt;/h2&gt;

&lt;h3 id=&#34;通勤&#34;&gt;通勤&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2014-07-07.png&#34; alt=&#34;pic1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们大学的设定是大四一年是给你实习的，&lt;br /&gt;
然后我因为硬学习成绩不算好，&lt;br /&gt;
考不动研也想早点致用，&lt;br /&gt;
所以抱着找一份实习工作，&lt;br /&gt;
然后毕业以后转正成为正式工的想法。&lt;/p&gt;

&lt;p&gt;当时 &lt;a href=&#34;lazy-coding-thinking&#34;&gt;QAD(一家美资跨国软件公司)&lt;/a&gt; 跑来学校校招，&lt;br /&gt;
我就去参加了面试。&lt;br /&gt;
面试的流程是笔试 + 群面 + 单面，&lt;br /&gt;
跟 NIMO (交大网管部) 的面试流程极为相似。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;所以我熟练地就通过了。（并没有）&lt;/del&gt;&lt;br /&gt;
我其实填完了姓名和手机就愣住了，&lt;br /&gt;
因为第三个空叫“目标职位”，&lt;br /&gt;
有 SE, QA 和 BA 个选项可以勾选。&lt;br /&gt;
我便举手问了负责发试卷的 HR 小姐姐 Gloria，&lt;br /&gt;
Gloria 跟我说你软件学院的就填 SE 吧，&lt;br /&gt;
其它两个不用填，我就顺从地填了 SE。&lt;/p&gt;

&lt;p&gt;后来我才知道要填职位是因为公司分工所致的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QAD 在全球各个地方都设有研发中心，中国的研发中心设在上海。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当然了，上海其实不止有研发，还有销售、售后等等部门。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;研发部门正式的说法叫 Research and Development, 写作 R&amp;amp;D, 读作 R and D。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;R&amp;amp;D 按照业务团队拆分成了好几个小组，我在的组是 Release Foundation, 中文意思大概是基础组件组，人多的时候大概有 20 个人。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;R&amp;amp;D 里每个组都是具有独立作战能力的，从技术选型、前端、后端到测试都是自己组内搞定。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;所以其实我们组内就两种职位：SE(开发) 和 QA(测试)，BA 是更一线的业务相关开发组才会设立的职位。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在实习了一个月以后终于搞明白了公司分工这个问题，&lt;br /&gt;
我很是兴奋，因为我觉得这是公司的脉络。&lt;br /&gt;
一个公司能成长到跨国的程度，&lt;br /&gt;
那公司组织结构什么的肯定是科学的！&lt;br /&gt;
学到了，以后有一天我开跨国公司了，&lt;br /&gt;
我也这么搞！&lt;br /&gt;
我很开心地这么想着。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2014-07-07-2.png&#34; alt=&#34;pic2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来我才知道还有是按职能分工的制度。&lt;br /&gt;
不过我一直沿用了跟别人介绍公司时，&lt;br /&gt;
先介绍公司业务范围、&lt;br /&gt;
再介绍公司分工组成、&lt;br /&gt;
最后介绍团队相关技术内容的套路。&lt;br /&gt;
因为我就很吃这样的套路呀 :)&lt;/p&gt;

&lt;h3 id=&#34;通勤-1&#34;&gt;通勤&lt;/h3&gt;

&lt;p&gt;不过实习的时候有一点我很困扰的是，&lt;br /&gt;
公司在浦东陆家嘴软件园，&lt;br /&gt;
学校在闵行。&lt;br /&gt;
算上走路每天单程得两小时，&lt;br /&gt;
来回四小时就没了。&lt;/p&gt;

&lt;p&gt;有些同学选择了在公司旁边合租了个房间。&lt;br /&gt;
不过我看了一下我的实习工资，&lt;br /&gt;
感觉付费上班有点亏，&lt;br /&gt;
就约着同在一家公司实习的李超一起每天 06:45 起床，&lt;br /&gt;
06:50 出门赶在 09:00 前到公司。&lt;/p&gt;

&lt;p&gt;公司的学长学姐发现我们俩居然选择了每天四小时的通勤，&lt;br /&gt;
就开玩笑跟我们说：“你们这样肯定受不了的，两个月内你们肯定会租房，或者要么就离职了…”&lt;br /&gt;
感谢这个反向 flag,&lt;br /&gt;
实习的一年就算被挤扁在 5 号线的门上，&lt;br /&gt;
我也是坚持四小时地铁来回。&lt;br /&gt;
并且我还在地铁上补完了想看的动漫和想读的书。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2014-07-29.png&#34; alt=&#34;pic3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;《代码大全 (Code Complete)》这本书的中文版和英文版都是在地铁上读完的，&lt;br /&gt;
直至今日想起来也清楚地记得，&lt;br /&gt;
身边全是上班的社畜只能举起手机仰头读书，&lt;br /&gt;
而被书里讲的一段代码陋习深深地震撼到的感觉。&lt;/p&gt;

&lt;h3 id=&#34;菜鸟&#34;&gt;菜鸟&lt;/h3&gt;

&lt;p&gt;面试的时候，我问 Joe 说组里的开发环境是怎么样的？&lt;br /&gt;
Joe 跟我说：“我们开发语言是 Perl 和 PHP，平常都是在 Linux 上用 Vim 开发。你接触过么？”&lt;br /&gt;
我尴尬地挠了挠头：“Perl/PHP 只听过，Linux 和 Vim 都只是在课上碰过，根本不了解。”&lt;br /&gt;
Joe 安慰道：“没事，写写就熟了。我们每个人都会有一个 Mentor 的。”&lt;/p&gt;

&lt;p&gt;噢 0w0，有 Mentor 啊，那我安心了，我心想。&lt;br /&gt;
在网管部我们也有 Mentor 这样的师徒制度，&lt;br /&gt;
一个明确的求助对象对新手来说是非常大的心理安慰，&lt;br /&gt;
当然最终的修行还是得靠个人的。&lt;/p&gt;

&lt;p&gt;入职的第一天我早到了一个小时，8 点就来了。&lt;br /&gt;
结果前台 MM 还没上班，&lt;br /&gt;
我站在门外等了十分钟等到了给我开门的扫地阿姨…&lt;br /&gt;
道谢以后找到了挂着我工牌的座位，&lt;br /&gt;
然后发现我身后已经坐着一个看起来快 30 岁的工程师了。&lt;br /&gt;
看了看他的工牌是叫 Justin Zhang,&lt;br /&gt;
我十分好奇地问他：“Justin 你好，我叫 Lirian，中文名是苏子岳。你是我的 Mentor 吗？”&lt;br /&gt;
Justin 若有所思地回答：“算……是吧？”&lt;br /&gt;
（实际上就是的）&lt;/p&gt;

&lt;p&gt;在做完了公司给新人的反腐败、反性侵等在线课程以后（没错…）&lt;br /&gt;
我摩拳擦掌地问 Justin 有啥我可以做的么，&lt;br /&gt;
Justin 说：“你去了解一下 Vim 吧。”&lt;br /&gt;
Emmmmmm, 还没理解这个任务的时候，&lt;br /&gt;
Justin 就打开了一个 Vim 的页面：&lt;br /&gt;
“我给你展示一下我们平常是怎么看代码、写代码的。”&lt;br /&gt;
然后 Justin 便向我展示了一下 Nerdtree/CTags 等各式功能，&lt;br /&gt;
并且帮我装上了他的配置 &lt;a href=&#34;https://github.com/schnell18/dotvim&#34;&gt;(schnell18/dotvim)&lt;/a&gt;…&lt;/p&gt;

&lt;p&gt;于是接下来的几天，我除了公司的新手村任务，&lt;br /&gt;
还开心地到处看 Vim 相关的资料（没错，我甚至连 vimtutor 都还没跑。）&lt;br /&gt;
越看我越觉得 Vim 这个东西，&lt;br /&gt;
真的是像 Justin 说的一样：&lt;br /&gt;
“Vim 是一个非常强大的工具，你学 Vim 可能要一个月，但是你用就能用一辈子。”&lt;br /&gt;
一开始不熟练的时候，&lt;br /&gt;
我经常地就是 jjjjjjjjj 或者 i→→→→→→→→→ 这样操作，&lt;br /&gt;
不过由于 Justin 时不时会站在我身后帮我 Review 代码，&lt;br /&gt;
在压力和自尊心下，我就改成了 }} 或者 f2$ 这样的操作了…&lt;/p&gt;

&lt;p&gt;我的 Mentor Justin 是一个代码洁癖非常重的工程师。&lt;br /&gt;
当时我们的项目管理是用 git + gitolite 管理的，&lt;br /&gt;
每次我们提交代码的时候，&lt;br /&gt;
Justin 都会用 git diff + vimdiff 来逐行 review 我们的代码。&lt;br /&gt;
有的时候需要在命令行敲命令，&lt;br /&gt;
Justin 也会站在我身后跟我讲一遍我要敲的命令。&lt;br /&gt;
并且以此我从 Justin 那学到了各种符号的英文说法，&lt;br /&gt;
比如 横杠 (dash), 反引号 (quote) 等等…&lt;br /&gt;
（不过最开始每次 Justin 跟我说 git rev dash list 的时候我都会一愣并且反应半天）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2014-08-27.png&#34; alt=&#34;pic4&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;忧虑&#34;&gt;忧虑&lt;/h3&gt;

&lt;p&gt;慢慢地，我习惯了用 Putty + Vagrant 搭开发环境，&lt;br /&gt;
用 Vim + Git 去编辑提交代码，&lt;br /&gt;
用 Perl 语言去解决业务问题。&lt;br /&gt;
但随着学到的东西越多，&lt;br /&gt;
我开始越来越担心自己不能变得杰出。&lt;/p&gt;

&lt;p&gt;那阵子上下班看了不少技术相关的文章/书籍，&lt;br /&gt;
其中有两个思想异常地打动我，&lt;br /&gt;
一个出自《代码大全》：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;关于程序员的经验：&lt;/p&gt;

&lt;p&gt;人们还荒唐地强调程序员有多少经验。&lt;br /&gt;
“我们需要有五年以上C语言编程经验的程序员”就是愚蠢的说法。&lt;br /&gt;
如果程序员过了前一两年还没有学好C语言，那么再加三年也没有意义。&lt;br /&gt;
这种“经验”和工作效能关系不大。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我当时看到了这句话，&lt;br /&gt;
回头想了一下自己这两周的工作，&lt;br /&gt;
发现我其实只是在单纯地挥发自己已有的知识！&lt;br /&gt;
我并不想工作三年以后，&lt;br /&gt;
成为那种实际只有一年工作经验然后重复了两年的人类。&lt;/p&gt;

&lt;p&gt;还有一个是我在上班路上想明白的。&lt;/p&gt;

&lt;p&gt;我玩竞技游戏会非常累，因为我很想赢。&lt;br /&gt;
我想赢也不是因为我多么享受胜利的感觉，&lt;br /&gt;
而是我害怕我努力却没有回报的付出回报不对等的挫败感。&lt;br /&gt;
所以很多时候我做事情不会尽力，&lt;br /&gt;
因为这样即使打团打输了，&lt;br /&gt;
我也有理由想：“not my fault，我只出了八成力。”&lt;/p&gt;

&lt;p&gt;但是还没毕业的我又想，&lt;br /&gt;
假如我真的选择了一条我不能尽力尽兴的人生道路，&lt;br /&gt;
那当我回首往事的时候，我怎会不因虚度年华而悔恨，也不因碌碌无为而羞愧呢？&lt;/p&gt;

&lt;p&gt;于是我在自己的心理暗示环节中，&lt;br /&gt;
加入了“比你聪明的人也有比你努力的啊”这一个鸡汤环节。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2015-01-27.png&#34; alt=&#34;pic5&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;转正&#34;&gt;转正&lt;/h2&gt;

&lt;h3 id=&#34;现实问题&#34;&gt;现实问题&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2015-07-05.png&#34; alt=&#34;pic6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在实习了一年以后，&lt;br /&gt;
我顺利地转正了。&lt;br /&gt;
我遇到了一个小难题：薪资。&lt;br /&gt;
当然，这里说难题并不是说公司为难我或者我不满意什么的。&lt;br /&gt;
首先我其实不太在意刚毕业的薪酬，因为我总觉得以后有一天我创造的价值会比我刚毕业一年的薪水还要多；&lt;br /&gt;
其次公司也不会压任何员工薪资，给的都是统一水平线的 offer。&lt;/p&gt;

&lt;p&gt;薪资的难题难在我隐隐感觉有点不够用。&lt;br /&gt;
大学时候我一个月生活费大概是一千多一些，&lt;br /&gt;
非常够用了。&lt;br /&gt;
毕业以后假如我要在公司附近租一个带厨房的一室户，&lt;br /&gt;
每个月大概要 3500，扣除这么多房租和其它杂项我每个月能剩两千多一些。&lt;/p&gt;

&lt;p&gt;当然了，正常的社会人肯定不会花这么多的占比来租房的。&lt;br /&gt;
但我想着我不烟不酒，不买衣服不吃大餐不社交，&lt;br /&gt;
回家要么看看技术博客要么玩玩游戏，&lt;br /&gt;
而且我女朋友也不是物质狂，&lt;br /&gt;
送不了贵的礼物就送点有心意的礼物…&lt;br /&gt;
讲道理省省也差不多够用？&lt;br /&gt;
于是我果断花了一半的月可支配收入在房租上…&lt;/p&gt;

&lt;p&gt;后来毕业快一年了，&lt;br /&gt;
我爸问我：“&lt;br /&gt;
你妈妈毕业以后住在外公那里，&lt;br /&gt;
毕业工作的一年钱基本全都存下来了，&lt;br /&gt;
后来我们结婚你外公还把存的工资都发给你妈妈了。&lt;br /&gt;
你这实习加工作两年了，总是存了点钱吧？”&lt;br /&gt;
我：“……存了存了…哦我要去洗衣服了，先挂了，886”&lt;/p&gt;

&lt;p&gt;那年我弟高考完去武汉读大学，&lt;br /&gt;
我打算送一个最新的 iphone 给他。&lt;br /&gt;
当时我去读大学的时候，&lt;br /&gt;
我舅送了我一部手提电脑 (Lenovo Y470),&lt;br /&gt;
收到礼物后，我心中充满了可支配的自由喜悦之情，&lt;br /&gt;
在 QQ 空间发了一条“我有自己的电脑了！开心的要哭了！”&lt;br /&gt;
我妈看到以后狠狠地批评了我：“有个电脑就这么没出息吗？快把这条状态删了。”&lt;br /&gt;
我：“……”&lt;br /&gt;
所以我弟上大学的时候，&lt;br /&gt;
我决定也让他体验一下这种可支配的自由喜悦 :)&lt;/p&gt;

&lt;p&gt;在认真算了一下最新 iphone 的价格，&lt;br /&gt;
以及我几个月的财政状况以后，&lt;br /&gt;
我连续两个月都厚颜无耻地拉着女朋友去吃社会食堂，&lt;br /&gt;
并且只点一个荤菜，然后蹭女朋友的青菜。&lt;br /&gt;
在吃了两个月的社会食堂以后，&lt;br /&gt;
我成功地爱上了掌中宝这道菜。&lt;br /&gt;
有一说一，掌中宝是真的好吃。&lt;/p&gt;

&lt;h3 id=&#34;last-day&#34;&gt;Last Day&lt;/h3&gt;

&lt;p&gt;从实习到转正还有一件对我来说感受很深的事情，&lt;br /&gt;
就是 Justin 离职去了平安好医生了。&lt;/p&gt;

&lt;p&gt;外企有一个充满仪式感的离职 Last Day,&lt;br /&gt;
在这天你可能会拿着一张 Checklist 一个个地做过去，&lt;br /&gt;
然后跟平常一起工作的同事聊聊工作上或者生活上的事情，&lt;br /&gt;
再发一封带有你个人联系方式的邮件给全上海再抄送平常对接的各种外国同事，&lt;br /&gt;
最后在所有 Checklist 都做完以后早点下班，&lt;br /&gt;
结束你在这家公司几年的雇员生涯，开始下一段的工作和人生。&lt;/p&gt;

&lt;p&gt;我看文学作品，&lt;br /&gt;
最受不了两种剧情：&lt;br /&gt;
一种是美人、英雄迟暮；&lt;br /&gt;
一种是再见难的离别。&lt;/p&gt;

&lt;p&gt;直到今天我也能想起 Justin 的 Last Day，&lt;br /&gt;
他早上正常地早到了快一个小时，&lt;br /&gt;
也正常地处理了事情，&lt;br /&gt;
中午组里的同事们正常地在楼下吃了个送别饭，&lt;br /&gt;
期间大家聊着以前、以后的事情。&lt;br /&gt;
下午四点多，&lt;br /&gt;
Justin 背着他的包，&lt;br /&gt;
声音不是很大地说了声：“我走了。”&lt;br /&gt;
然后大家都站了起来跟 Justin 告别，&lt;br /&gt;
在走道的 Justin 也停了下来，&lt;br /&gt;
笑容也一直停在了他的脸上，&lt;br /&gt;
直到转身离去。&lt;br /&gt;
我幽幽地感慨了一句：“Justin 要是再多站两分钟我感觉我都要哭出来了…”&lt;br /&gt;
顿时大家都忍不住笑了，&lt;br /&gt;
冲散了那股忧郁的离别气息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2015-04-30.png&#34; alt=&#34;pic7&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其实大部分人都不会一辈子只做一份工作，&lt;br /&gt;
在 21 世纪的上海也是如此。&lt;br /&gt;
所以其实在职场的大家，&lt;br /&gt;
也很清楚身边的同事在某一天，&lt;br /&gt;
可能会因为各种各样的事情而选择离开。&lt;br /&gt;
大家对离职的同事也会抱着祝福的心情，&lt;br /&gt;
毕竟世界很大，生命更大，&lt;br /&gt;
总有机会再见的。&lt;/p&gt;

&lt;p&gt;后来 Justin 走后的黄桃季节，&lt;br /&gt;
我们还是成功地照例蹭到了 Justin 渠道的美味黄桃 :)&lt;/p&gt;

&lt;h3 id=&#34;本职工作&#34;&gt;本职工作&lt;/h3&gt;

&lt;p&gt;在 Justin 走后，&lt;br /&gt;
我逐渐接手了整个项目。&lt;br /&gt;
随着新的一年校招，&lt;br /&gt;
新的实习生们也来到了公司，&lt;br /&gt;
我也变成了一个勤奋的小哥哥 (@Ray) 的 Mentor，&lt;br /&gt;
我便像当时 Justin 教我一样教他 Vim、Review 他的代码。&lt;/p&gt;

&lt;p&gt;在跟他交流的过程中，&lt;br /&gt;
恍惚间我看到了一年前我的影子，&lt;br /&gt;
间接地我对自己的理解更加深入了。&lt;br /&gt;
我好像很模糊地抓住了“该怎么样请教别人才能学的更快”、&lt;br /&gt;
“工作里要怎么发挥自主性比较合适”这样的概念。&lt;/p&gt;

&lt;p&gt;具体在业务开发里，&lt;br /&gt;
因为团队人员配置一直比较科学，&lt;br /&gt;
而且大家效率都比较高，&lt;br /&gt;
所以我们比预期项目进度早了两个月就开发完了 Perl 的版本。&lt;br /&gt;
然后这里我很开心地找到了一个可以写到简历上的事情。&lt;/p&gt;

&lt;p&gt;我很早就感觉到了项目会提早做完，&lt;br /&gt;
所以心里一直有个想法在摇曳：&lt;br /&gt;
“能不能用 Java 重写一遍这个 Perl 的命令行工具？”&lt;/p&gt;

&lt;p&gt;当时用 Perl 是因为这个命令行工具初版用的是 Perl，&lt;br /&gt;
加上 Perl 本身非常适合命令行的文本处理，&lt;br /&gt;
以及我们组的开发对 Perl 非常擅长。&lt;br /&gt;
但是 Perl 的缺点也很明显：&lt;br /&gt;
这不是主流语言，很难招有经验的人，&lt;br /&gt;
新手又容易因为学这个看不到前途就加大离职风险，&lt;br /&gt;
而且部署上 Perl 的部署跟系统关系挺大，&lt;br /&gt;
我们还踩过一个 prelink 跟 Perl 冲突的坑。&lt;br /&gt;
相比而言 Java 可能在文本处理上弱了，&lt;br /&gt;
但是在人员招聘、部署上会方便很多。&lt;/p&gt;

&lt;p&gt;不过做工程项目，遇到的很大问题就是性价比。&lt;br /&gt;
我们 Perl 版本的项目写了快一年，&lt;br /&gt;
算上单元测试代码量好像是五万行左右，&lt;br /&gt;
上线时间还有两个月，&lt;br /&gt;
看起来是不太可行的。&lt;br /&gt;
但是我们却把这件事情给做成了。&lt;/p&gt;

&lt;p&gt;整个事情主要是因为当时我的 Manager: Joe 的魄力。&lt;br /&gt;
（就是上文实习时候面试我的那个人！）&lt;br /&gt;
我中间跟 Joe 讲过 Perl vs Java 的话题，&lt;br /&gt;
他首先非常认可我的观点，&lt;br /&gt;
并且跟我说关于工程项目上的问题他都可以想办法搞定。&lt;/p&gt;

&lt;p&gt;于是我决定先自己在业余时间尝试用 Java 重写整个项目，&lt;br /&gt;
就算最后没用上也算是我练 Java 了。&lt;br /&gt;
那阵子晚上去社会食堂吃完饭加送女朋友上地铁以后，&lt;br /&gt;
我走路回家洗个澡就又赶回公司码代码。&lt;br /&gt;
因为熟悉逻辑加只是纯重构，还能抽象类加精简代码，&lt;br /&gt;
一个多月的时候我把整个项目的骨架加基本的单元测试都实现了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2015-11-12.png&#34; alt=&#34;pic8&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来一天 Joe 一看骨架都做好了，&lt;br /&gt;
于是很兴奋地拉上我们认真地合计了一下，&lt;br /&gt;
算了一下投入产出比，&lt;br /&gt;
归纳出来了 8 条英文的 &amp;ldquo;why should refactor from Perl to Java&amp;rdquo;。&lt;br /&gt;
最终 Joe 在跟各方协调沟通以后，&lt;br /&gt;
不仅用 Java 重写这个方案通过了，&lt;br /&gt;
我们还多了两个月的开发时间！（协商延期）&lt;br /&gt;
于是 Joe 又从组里其他项目抽调了好几个队友来一起开发到最终上线 :)&lt;/p&gt;

&lt;h3 id=&#34;外国队友&#34;&gt;外国队友&lt;/h3&gt;

&lt;p&gt;因为我们的命令行工具最终部署是各种外国程序员用的，&lt;br /&gt;
所以上线前我的组织任务就是跟外国的队友接洽。&lt;br /&gt;
对接最多的时候是连续两周每天早上 09:00 ~ 11:00 都要在线跟外国同事 (@Mythily) 语音会议，&lt;br /&gt;
然后她会共享她的屏幕，&lt;br /&gt;
我看着她的 Terminal 跟她讲解各种命令 or 文档。&lt;/p&gt;

&lt;p&gt;这个时候我突然就明白了为什么 Justin 会跟我说 &amp;ldquo;git rev dash list&amp;rdquo; 这样全英文的命令行读法，&lt;br /&gt;
因为我跟 Mythily 也只能这样说，&lt;br /&gt;
我又不可能跟外国人说 &amp;ldquo;ls 空格 -l 回车&amp;rdquo; ……&lt;/p&gt;

&lt;p&gt;可惜由于学艺不精，&lt;br /&gt;
我很多时候也只能：&lt;br /&gt;
&amp;ldquo;emmm, let me send you the command line in chat&amp;rdquo;&lt;br /&gt;
&amp;ldquo;yeah yeah yeah, space&amp;rdquo;&lt;br /&gt;
&amp;ldquo;no no no, dash, yeah git dash&amp;rdquo;&lt;/p&gt;

&lt;p&gt;不过还好 Mythily 是印度同事，&lt;br /&gt;
我们两个对有口音的英语的理解能力都超强，&lt;br /&gt;
沟通也很顺畅。&lt;/p&gt;

&lt;p&gt;有的时候做完了一天该做的任务我们还会闲聊一会，&lt;br /&gt;
一次她还开心地跟我科普了一个印度传统节日叫 Diwali,&lt;br /&gt;
并且邀请我什么时候可以趁 Diwali 去印度玩。&lt;br /&gt;
我也礼貌地邀请她在 Spring Festival 的时候来中国玩，&lt;br /&gt;
展现了一定的大国风范。&lt;/p&gt;

&lt;h3 id=&#34;业余技术&#34;&gt;业余技术&lt;/h3&gt;

&lt;p&gt;讲了很多工作上的事情，&lt;br /&gt;
一方面是因为真的上班在工作，&lt;br /&gt;
下班在思考，&lt;br /&gt;
睡前都在想代码要怎么写才比较优雅；&lt;br /&gt;
另一方便是真的穷，&lt;br /&gt;
平常的消遣就是看看 YYF 或者刷刷技术博客。&lt;/p&gt;

&lt;p&gt;技术类博客有个网站我很喜欢，叫 &lt;a href=&#34;https://coolshell.cn/haoel&#34;&gt;酷壳 coolshell&lt;/a&gt;。&lt;br /&gt;
酷壳的博主陈皓的状态就是我理想中的状态：&lt;br /&gt;
连续十几年都在技术的一线工作，&lt;br /&gt;
对语言、工具、架构、文化都有自己独到而优秀的理解，&lt;br /&gt;
对普通程序员有着不俗的影响力、引导着他们变得优秀，&lt;br /&gt;
至今仍奋斗在一线。&lt;/p&gt;

&lt;p&gt;受着这样的博客启发，&lt;br /&gt;
我也决定&lt;a href=&#34;https://liriansu.com/why-im-blogging&#34;&gt;开始自己写博客&lt;/a&gt;。&lt;br /&gt;
不过一开始没啥好写的，&lt;br /&gt;
我就&lt;a href=&#34;https://liriansu.com/vagrant-up-but-mount-no-device-zh&#34;&gt;列了一些解决bug的流程&lt;/a&gt;…&lt;/p&gt;

&lt;p&gt;在写博客的过程中，我发现这是个很好的进步途径：&lt;br /&gt;
写博客不仅可以督促我苟日新、日日新、又日新，&lt;br /&gt;
还能时常提醒我去看看别人是怎么发现问题、认知问题、解决问题的。&lt;br /&gt;
至少这不会让我变得与行业脱离太多，&lt;br /&gt;
也说不定可以避免一年经验重复N年的问题。&lt;/p&gt;

&lt;h2 id=&#34;变化&#34;&gt;变化&lt;/h2&gt;

&lt;h3 id=&#34;打击&#34;&gt;打击&lt;/h3&gt;

&lt;p&gt;有一天在黄浦江边上跑步的时候，&lt;br /&gt;
我突然接到了 Justin 的电话。&lt;br /&gt;
在聊了一下近况以后，&lt;br /&gt;
Justin 邀请我去他现在的公司平安好医生面试。&lt;br /&gt;
我思考了一下，&lt;br /&gt;
觉得去互联网公司试试也是不错，&lt;br /&gt;
而且 Justin 已经去当了前哨了，&lt;br /&gt;
公司应该是不错的，&lt;br /&gt;
我就高兴地去面试了。&lt;/p&gt;

&lt;p&gt;然后崩了…&lt;/p&gt;

&lt;p&gt;我去面的是 Java 后端，&lt;br /&gt;
于是面试官就问了我一些很平常的 Spring 框架/Java 线程池/GC/进程分析之类的，&lt;br /&gt;
结果我全都不会。&lt;br /&gt;
面试官也很无奈，&lt;br /&gt;
他就问我：“那你觉得你擅长一些什么？”&lt;br /&gt;
我弱弱的回答：“Vim？”&lt;br /&gt;
面试官想了想，问我：“把光标移到屏幕中间是哪个快捷键？”&lt;br /&gt;
我一愣，然后回答：“不知道……”&lt;br /&gt;
（后来查了以后才知道是 &lt;code&gt;M&lt;/code&gt;，我居然真的从来没用过…）&lt;/p&gt;

&lt;p&gt;后来我回来认真复盘过，&lt;br /&gt;
觉得面试我主要有几个问题：&lt;br /&gt;
一是的确菜，很多都不懂，不会不学不练；&lt;br /&gt;
二是过于自信没有准备，有些套路问题是可以先学习的；&lt;br /&gt;
三是没意识到写命令行的 Java 技术栈和写后端的 Java 技术栈是不一样的。&lt;br /&gt;
再加上面试没问算法题，&lt;br /&gt;
也没办法靠硬知识加分…&lt;/p&gt;

&lt;p&gt;不过最终还是给我发了 offer，&lt;br /&gt;
只吃薪酬上比较尴尬，&lt;br /&gt;
是跟我当前工作没有涨幅的 offer。&lt;br /&gt;
问了一下 HR，说是因为我是毕业没满一年，&lt;br /&gt;
所以是按应届生来的。&lt;br /&gt;
我心有不甘，不过非常理解。&lt;br /&gt;
虽然我没面过别人，不过换我面一个问题都回答不上来的人，&lt;br /&gt;
能发 offer 已经算给推荐人很大面子啦。&lt;/p&gt;

&lt;p&gt;面对着这份 offer，我开始纠结了。&lt;br /&gt;
理论上平薪跳槽不科学，&lt;br /&gt;
但是这可是互联网公司诶，火热的行业诶；&lt;br /&gt;
而且还有已知的大腿 Justin,&lt;br /&gt;
我跟着学总行了吧？&lt;br /&gt;
不过这么离开 QAD 总是心有不甘，&lt;br /&gt;
当时项目还没彻底完工，&lt;br /&gt;
而且不算实习的话工作还没满一年，&lt;br /&gt;
组里队友其实都很好…&lt;br /&gt;
emmm 纠结。&lt;/p&gt;

&lt;p&gt;一般来说英雄电影里，&lt;br /&gt;
低落时总有前辈站出来给出指导意见。&lt;br /&gt;
于是我尝试在微博上私信给左耳朵耗子，&lt;br /&gt;
并且得到了他的回复。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2016-03-14.png&#34; alt=&#34;pic9&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后我晚上跟皓哥电话聊了快两个小时。&lt;br /&gt;
电话里，他讲了他在亚马逊、阿里、自己创业的三段不同的经验，&lt;br /&gt;
以及他年轻时候类似的烦恼，&lt;br /&gt;
甚至还讲到他写代码解决问题时的方法思路以及对应的人生观。&lt;br /&gt;
皓哥给的建议是具体的，&lt;br /&gt;
那天晚上听在我耳中的却是非常理想主义的两个字：格局。&lt;/p&gt;

&lt;p&gt;人生在世近百年，&lt;br /&gt;
作为工程师会解决无数的问题，&lt;br /&gt;
所以有的时候眼前的问题放得更长远会有更好的解决方法。&lt;br /&gt;
挂了电话以后，&lt;br /&gt;
我心中想起了一句俗话：“莫欺少年穷。”&lt;br /&gt;
于是最后我在跟 Justin 提前沟通好以后，&lt;br /&gt;
跟 HR 小姐姐婉拒了这份 offer。&lt;/p&gt;

&lt;p&gt;（然后我每天都给自己打两升鸡血！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2016-06-26.png&#34; alt=&#34;pic10&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2016-07-04.png&#34; alt=&#34;pic11&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2016-07-11.png&#34; alt=&#34;pic12&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;普通的一天&#34;&gt;普通的一天&lt;/h3&gt;

&lt;p&gt;后来有一天，百姓网的 HR (@PP) 从我 GitHub 翻到了邮件，&lt;br /&gt;
发了封邮件要到我的微信，&lt;br /&gt;
然后约了个早上的面试。&lt;br /&gt;
在拼多多的基友 FM 也问我要不要去面面，&lt;br /&gt;
我就也顺便约了个同天下午的面试。&lt;/p&gt;

&lt;p&gt;早上去浩然面完百姓，&lt;br /&gt;
中午找 ldsink 在学校门口吃了个面，&lt;br /&gt;
吃完以后 ldsink 还顺路带我去他公司转了转。&lt;br /&gt;
刚走到凯利大厦时，一个同事跟 ldsink 打了下招呼，&lt;br /&gt;
我好奇地问：“这是谁啊？”&lt;br /&gt;
ldsink 说是一个销售同事。&lt;br /&gt;
我顿时感到十分惊讶：“你们这么热情的么？开发和销售都这么熟？”&lt;/p&gt;

&lt;p&gt;到了公司里逛了一圈，&lt;br /&gt;
感觉这个小公司的确小的比较明显，&lt;br /&gt;
人也少装修也比较裸，&lt;br /&gt;
不过见到了 Eason Jiang 的前室友，&lt;br /&gt;
一个同济大学的瘦子，&lt;br /&gt;
世界真小啊。&lt;/p&gt;

&lt;p&gt;晚上去拼多多面完以后，&lt;br /&gt;
跟 FM 还有 FHN 在公司旁边的面馆吃了碗面，&lt;br /&gt;
吃完都七点多了准备回家。&lt;br /&gt;
突然微信上 ldsink 问我吃完了吗，&lt;br /&gt;
他还说公司同事都没下班呢，&lt;br /&gt;
给我留了份盒饭，邀请我去一起吃…&lt;br /&gt;
我心想公司盒饭哪有外面面馆的面好吃，&lt;br /&gt;
不过还是跑过去了。&lt;/p&gt;

&lt;p&gt;结果发现我去是面试的！&lt;br /&gt;
我两周前发给周丞的简历都打印好了…&lt;br /&gt;
第一个面试官是个看起来就事业有成的后端，&lt;br /&gt;
做了两道算法题聊了聊天就没了；&lt;br /&gt;
第二个面试官就是上文的同济瘦子，&lt;br /&gt;
啥都没问，纯吹比，我给他看了看我业余写的前端玩具，&lt;br /&gt;
他给我介绍了下产品相关就没了…&lt;br /&gt;
然后我坐着稍微等了一下，&lt;br /&gt;
公司的 CEO 居然专门从外面赶回公司来见我，&lt;br /&gt;
然后他问了一下我的技术理想，&lt;br /&gt;
我跟他说了一下就开始互膜起来了（还是带身体动作的那种互膜…）&lt;/p&gt;

&lt;p&gt;回家以后我打电话跟女朋友说了下今天面试的情况，&lt;br /&gt;
并且我还猜测地跟她说：“假如都给我发 offer 的话，我应该会去再惠，这家公司给我的感觉很舒服。”&lt;/p&gt;

&lt;p&gt;后来我的确去了再惠，&lt;br /&gt;
并且和一帮很强的队友一起共事。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2016-12-13.png&#34; alt=&#34;pic13&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当你老了，回顾一生，就会发觉，&lt;br /&gt;
什么时候出国读书，&lt;br /&gt;
什么时候决定做第一份职业，&lt;br /&gt;
什么时候选定了对象而恋爱，&lt;br /&gt;
什么时候结婚，其实都是命运的巨变。&lt;/p&gt;

&lt;p&gt;只是当时站在人生的三岔路口，眼见风云千樯，&lt;br /&gt;
你作出选择的那一日，在日记上，相当沉闷和平淡，&lt;br /&gt;
当时还以为是生命中最普通的一天。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;新的开始&#34;&gt;新的开始&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2016-11-25.png&#34; alt=&#34;pic14&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;自由&#34;&gt;自由&lt;/h3&gt;

&lt;p&gt;在16年11月底，我从一家外企来到了一家A轮的互联网公司。&lt;br /&gt;
在逐渐熟悉了业务和技术以后，&lt;br /&gt;
我突然意识到了很多以前习以为常的东西其实是每个公司都不一样的。&lt;br /&gt;
其中让我感触最深的就是公司制度。&lt;/p&gt;

&lt;p&gt;比如说工作范畴。&lt;/p&gt;

&lt;p&gt;在外企的时候其实是定时定量的。&lt;br /&gt;
我做的事情是组里分配的，做快做慢都是这么多，&lt;br /&gt;
组里的事情是部门分到每个 Manager 上的，&lt;br /&gt;
基本上也是合理分配相对固定的。&lt;br /&gt;
但是在互联网公司的工作是全凭主动性的。&lt;br /&gt;
不仅你做得快那么你要做的事情会更多（当然做的慢绩效就差），&lt;br /&gt;
而且很多事情都是可以砍掉的！&lt;br /&gt;
很可能大家一讨论，发现有更科学的方法去实现，整个东西都不用做了。&lt;/p&gt;

&lt;p&gt;这样最直观的感受就是身边的同事 ownership 都巨高。&lt;br /&gt;
因为他做的事情是他参与思考讨论的，&lt;br /&gt;
所以大家的热情都非常高，&lt;br /&gt;
我第一次发现有这么多在家里都会工作的家伙…而他们居然都在我的公司里？？？&lt;/p&gt;

&lt;p&gt;还有像新人培训。&lt;/p&gt;

&lt;p&gt;QAD 有为期一个月多的新人培训，&lt;br /&gt;
期间除了业务培训，还有英文邮件、工作礼仪等等培训。&lt;br /&gt;
再惠技术部门的新人培训就只有一天，&lt;br /&gt;
一开始连 Mentor 机制也没，&lt;br /&gt;
就是靠招进来的都是大佬、大佬会自救自己想办法这么支撑下去的。&lt;br /&gt;
不过后来逐渐有 Buddy (就是Mentor) 机制，&lt;br /&gt;
以及有一系列完善的新手村任务熟悉业务了。&lt;/p&gt;

&lt;p&gt;还有就是招聘。&lt;/p&gt;

&lt;p&gt;在 QAD 招人的话我没参与过，&lt;br /&gt;
不清楚具体的情况，&lt;br /&gt;
不过基本上是 Manager 决定。&lt;br /&gt;
而我来再惠的第二周就让我跟着去面试了。&lt;br /&gt;
我很快发现相比于“挑选下属”的面试感觉，&lt;br /&gt;
再惠的面试其实是让我们“挑选队友”。&lt;br /&gt;
CEO/CTO 的最终面是质量把关，&lt;br /&gt;
前面的同事面试其实非常关键，&lt;br /&gt;
从不同角度去面试候选人才能保证永远招 A 类人。&lt;/p&gt;

&lt;p&gt;当然，我们录用率只有 4% 这点也被 HRMM 们多次批评过，&lt;br /&gt;
不过反过来说，我们离职率也只有 0% 呀。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2017-03-21.png&#34; alt=&#34;pic15&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;技术相关&#34;&gt;技术相关&lt;/h3&gt;

&lt;p&gt;虽然之前轻描淡写地讲了讲技术，&lt;br /&gt;
不过其实我在来再惠之前完全没接触过正规的 Python Web 后端开发。&lt;br /&gt;
我大概菜到一个什么程度呢？&lt;br /&gt;
就是假如津铭（上文提到的看起来事业有成的后端）当时面试的时候问我这些问题：&lt;br /&gt;
HTTP的请求方法每个有什么含义?/virtualenv是干什么的?/uwsgi是干什么的?&lt;br /&gt;
我一个都答不上来…&lt;/p&gt;

&lt;p&gt;菜，得认。&lt;br /&gt;
所以我那阵子每天回家都跟女朋友说：&lt;br /&gt;
“我好菜啊，队友好强啊，&lt;br /&gt;
但我真的好开心啊，感觉啥都能学到，&lt;br /&gt;
而且他们下班也会写代码，&lt;br /&gt;
感觉找到同类了啊，不过感觉再也追不上他们了啊”&lt;/p&gt;

&lt;p&gt;但我很快发现原本会绑住我的缚仙索不存在了：&lt;br /&gt;
我入职以后马上就有了各种测试环境的权限。&lt;br /&gt;
uwsgi配置搞不懂？那就去测试环境玩一下。&lt;br /&gt;
因为搞不懂而玩坏了？没事很快就会被前端爸爸找上门暴打一顿然后强制搞懂的。&lt;br /&gt;
恍惚间有一种刚玩dota时，选了个火枪然后很快懂了全英雄技能的感觉。&lt;/p&gt;

&lt;p&gt;那阵子的周末我基本上也在写公司相关的代码。&lt;br /&gt;
因为周末不会有测试环境被搞挂或者是冲突的问题，&lt;br /&gt;
所以我可以放肆地试错，然后学到各种经验。&lt;/p&gt;

&lt;p&gt;有了这段经验以后，&lt;br /&gt;
我十分确定一个事实：&lt;br /&gt;
尽可能地放权给程序员，&lt;br /&gt;
优秀的人会像李洛克解开了负重一样腾飞的。&lt;/p&gt;

&lt;h3 id=&#34;生活相关&#34;&gt;生活相关&lt;/h3&gt;

&lt;p&gt;在再惠的工作内容其实我写了很多别的文章去讲，比如：&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/my-work&#34;&gt;《我的工作》&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/engineer-culture&#34;&gt;《为什么我喜欢工程师文化》&lt;/a&gt;&lt;br /&gt;
就不过多阐述了。&lt;/p&gt;

&lt;p&gt;换工作这个节点对我还有一层意义，&lt;br /&gt;
就是我跟女朋友合租了。&lt;/p&gt;

&lt;p&gt;我爸妈都是老师，&lt;br /&gt;
小时候放学回家会听见他们聊各种学生、备课、科目组、考试的事情，&lt;br /&gt;
他们不仅生活上是温馨恩爱的夫妻，&lt;br /&gt;
工作上也会互相倾听给出建议，&lt;br /&gt;
这让我很是向往。&lt;br /&gt;
所以跟女朋友合租最让我开心的一点，&lt;br /&gt;
其实是下班回家以后可以瘫着，&lt;br /&gt;
要么听女朋友讲 HR 的职业生涯和各种破事，&lt;br /&gt;
要么跟女朋友讲工程师的发展规划和各种破事。&lt;/p&gt;

&lt;p&gt;不过想了想，&lt;br /&gt;
关于女朋友我也专门写过&lt;a href=&#34;https://liriansu.com/my-little-mia&#34;&gt;《我的女友小米娅》&lt;/a&gt;，&lt;br /&gt;
感觉也没什么特别可以说的。&lt;/p&gt;

&lt;p&gt;哎，高产的烦恼。&lt;/p&gt;

&lt;h2 id=&#34;结尾语&#34;&gt;结尾语&lt;/h2&gt;

&lt;p&gt;坐在电脑前，&lt;br /&gt;
认真地想了一下毕业三年所做的各种各样的事情，&lt;br /&gt;
让我感受最深的并不是什么实在的事情，&lt;br /&gt;
而是我思想的进步。&lt;/p&gt;

&lt;p&gt;对人友善、&lt;br /&gt;
用控制变量法研究问题、&lt;br /&gt;
换位思考这种从小就学的普适性的东西其实是非常正确并且有用的方法论。&lt;/p&gt;

&lt;p&gt;希望这个世界会在你我的努力下，&lt;br /&gt;
越来越美好 :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/adult/2018-01-01.jpg&#34; alt=&#34;pic16&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>公司文化、工资期权、开发体验——一线程序员的喜怒哀乐</title>
      <link>https://liriansu.com/posts/2018-08-11-a-chat-with-schoolmates/</link>
      <pubDate>Sat, 11 Aug 2018 23:55:50 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-08-11-a-chat-with-schoolmates/</guid>
      <description>&lt;p&gt;我有一群中学时学计算机奥赛的最好的朋友，&lt;br /&gt;
毕业以后我们散落在各个公司写码，&lt;br /&gt;
大家心照不宣地约定着“分开打钱，有事TP”，&lt;br /&gt;
时不时地就会聚在一起吃个饭。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer:&lt;br /&gt;
本文内容涉及大量个人感想，&lt;br /&gt;
记忆内容有模糊，&lt;br /&gt;
一切内容真实性不保证，&lt;br /&gt;
有任何问题由作者本人背锅。（没错就是他，快喷）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;一-友情&#34;&gt;（一）友情&lt;/h2&gt;

&lt;p&gt;Mia 有空的时候也会参加我们的季度聚会，&lt;br /&gt;
她和 YJ 的女朋友阿张是我们一堆男生聚会时的唯二妹子。&lt;br /&gt;
除了感慨：“程序员的手是好看啊。”&lt;br /&gt;
Mia 跟我也感慨过：&lt;br /&gt;
“我觉得你们这样真的很难得。&lt;br /&gt;
从初一初二就认识，&lt;br /&gt;
然后之后一直保持联系，&lt;br /&gt;
毕业以后也从事着一样的行业。&lt;br /&gt;
我觉得你们之间充满了共同话题。”&lt;br /&gt;
“对啊，日漫里面这就叫命运的羁绊。”&lt;/p&gt;

&lt;p&gt;我们一帮队友里，&lt;br /&gt;
有毕业去了谷歌英国，如今已经找到真爱的队友；&lt;br /&gt;
也有毕业进华为，一直在出国的单身队友；&lt;br /&gt;
有一路深造还在读书的队友，&lt;br /&gt;
还有先后从微软、网易、依图跳入拼多多怀抱的队友们。&lt;/p&gt;

&lt;p&gt;大部分时候我们会找个粤菜馆子吃点上海肠粉，&lt;br /&gt;
用来下饭的话题会从忍者村大战3v3经典对决，&lt;br /&gt;
聊到广东回南天和上海梅雨天的气候差别。&lt;br /&gt;
这次的聚会发起于刚从国外出差回来的华为小员工 enye。&lt;br /&gt;
就像以前的宿舍吹比一样，&lt;br /&gt;
这次的聊天吹比也让我颇有想法。&lt;/p&gt;

&lt;h2 id=&#34;二-公司文化&#34;&gt;（二） 公司文化&lt;/h2&gt;

&lt;p&gt;我们问 enye 他这次休息几天，&lt;br /&gt;
enye 说他请的三四天年假，可以休息九天。&lt;br /&gt;
众人：？？？啥操作？？？&lt;br /&gt;
enye 解释道华为有个约定，&lt;br /&gt;
就是出国回来默认有一天可以倒时差，&lt;br /&gt;
他就顺势请了一波连起来的假，以玩代休了。&lt;/p&gt;

&lt;p&gt;enye 又讲到他其实有过想跳槽，&lt;br /&gt;
大家问起原因，&lt;br /&gt;
enye 感慨道：“我存不下钱啊。”&lt;br /&gt;
因为工作性质，enye 要走遍世界各个国家，&lt;br /&gt;
他又忍不住在知乎上关注了美食和旅行的话题，&lt;br /&gt;
也难怪存不住钱。&lt;/p&gt;

&lt;p&gt;大家笑了一波他这第一世界的烦恼以后，&lt;br /&gt;
他又讲到：&lt;br /&gt;
“其实在我司，我难受的还有一种焦虑感。”&lt;br /&gt;
在 enye 的感受里，&lt;br /&gt;
华为是极度狼性文化的，&lt;br /&gt;
假如员工到了 &lt;sup&gt;35&lt;/sup&gt;&amp;frasl;&lt;sub&gt;40&lt;/sub&gt; 的年纪还没有一定成就，&lt;br /&gt;
就会被淘汰掉。&lt;br /&gt;
enye 还举了个例子：&lt;br /&gt;
他认识的当时跟他同期进去的人，&lt;br /&gt;
现在已经全部受不了走人了，&lt;br /&gt;
而 enye 一直是 top performance 的，&lt;br /&gt;
他也感觉自己到 &lt;sup&gt;35&lt;/sup&gt;&amp;frasl;&lt;sub&gt;40&lt;/sub&gt; 岁的时候不一定能做到高位。&lt;/p&gt;

&lt;p&gt;听完以后我不禁感慨道：&lt;br /&gt;
华为毕竟是华为啊。&lt;br /&gt;
拼多多的早期员工 FM 也说道：&lt;br /&gt;
我们公司各种方面都非常想学华为。&lt;br /&gt;
我问 FM，你们拼多多也是狼性文化的么？&lt;br /&gt;
FM 点了点头，并举了个例子：&lt;br /&gt;
他们目前做的很多事情都是朝令夕改的，&lt;br /&gt;
比如对接京东、对接微信的组，&lt;br /&gt;
开发已经开发好了，&lt;br /&gt;
但是过两周，对不起，业务上合同没谈下来，&lt;br /&gt;
整个组都给我解散，&lt;br /&gt;
大家做的东西都白做了。&lt;br /&gt;
大家沉默了一会，感觉没什么能说的，&lt;br /&gt;
就念了念阿里的咒语：“拥抱变化，拥抱变化。”&lt;/p&gt;

&lt;p&gt;我又接着问 FM：“那开发量上，你们忙吗？”&lt;br /&gt;
在两个组的 FM 和 Freedom 同时给出了不同的答案。&lt;br /&gt;
感觉很忙的 Freedom 说，&lt;br /&gt;
他们做的是公司的数据分析层 (hadoop + flink)。&lt;br /&gt;
公司人多了一倍的同时，他们组一个人没多，&lt;br /&gt;
每天忙的一笔。&lt;br /&gt;
FM 就附言说，像 Freedom 的组其实是特例，&lt;br /&gt;
拼多多大部分组已经慢下来了，&lt;br /&gt;
现在分工细了，花在沟通上的时间多了很多。&lt;br /&gt;
举个夸张的例子，以前一个组三天就能做完的东西，&lt;br /&gt;
现在可能两个组要做三周。&lt;/p&gt;

&lt;p&gt;“那听起来有点划，&lt;br /&gt;
你们还是 996 周日加班么？”&lt;br /&gt;
“对啊！”&lt;br /&gt;
FM 又感慨道，其实感觉现在的工作量可以不 996 了。&lt;br /&gt;
比如他现在带的组包括实习生有 6 个人，&lt;br /&gt;
很多时候大家的活都不是饱和的。&lt;/p&gt;

&lt;p&gt;讲到工作时间的问题又有个例子。&lt;br /&gt;
说拼多多上市的第二天他们开了员工大会，&lt;br /&gt;
两千多人在一个大会场里席地而坐，&lt;br /&gt;
老大们拿了张纸条出来，&lt;br /&gt;
说：“我们来回答一些大家关心的问题吧。”&lt;br /&gt;
然后读到：“我们现在人多位子挤，会不会搬新办公室？&lt;br /&gt;
我们会不会每两周多休息一天，引入单双休制度？&lt;br /&gt;
我们会不会每人发股票？”&lt;br /&gt;
台下的员工们非常兴奋，&lt;br /&gt;
每听到一个问题都热烈地鼓一次掌，&lt;br /&gt;
单双休的问题最是热烈。&lt;br /&gt;
然后老大们给出了素质三连：“不会，不会，不会。”&lt;br /&gt;
听完这个故事，在场众人又流下了沉默的无奈的泪水。&lt;/p&gt;

&lt;p&gt;作为局外人的我叹了口气：&lt;br /&gt;
讲道理全中国我只听过你们这一家这个量级的公司，&lt;br /&gt;
是全公司 996 的，其它顶多是分团队或者短暂的。&lt;br /&gt;
感觉单双休这个问题，&lt;br /&gt;
只有你们老大黄铮发言，&lt;br /&gt;
真正官方给意见才行。&lt;br /&gt;
不过话又说回来，&lt;br /&gt;
你们招人的时候给的钱估计是按 996 给的，&lt;br /&gt;
现在换成 995 了，&lt;br /&gt;
除非你们愿意降薪 16.6%，&lt;br /&gt;
要不公司肯定是亏的。&lt;br /&gt;
Freedom 又补充道：&lt;br /&gt;
对啊，现在其实有很多组的人是自己固定请事假，&lt;br /&gt;
然后达到手动降薪单双休的效果。&lt;/p&gt;

&lt;p&gt;大家又扯了一波单休和双休的本质区别，&lt;br /&gt;
总结出了一条真理，叫：&lt;br /&gt;
公司文化完全取决于老大，对小团队也是如此。&lt;br /&gt;
因为很多事情是只能由老大拍板的。&lt;/p&gt;

&lt;p&gt;讲着讲着，我又想了想我司。&lt;br /&gt;
很多方面上，拼多多给我的即视感跟我司非常像，&lt;br /&gt;
要总结一句可以是：“当下中国快速发展的互联网创业公司大抵如此，很多制度难以跟上。”&lt;br /&gt;
但另一方面，我又觉得很多事情我司的操作性比拼多多要强。&lt;br /&gt;
拼多多发展的比我司快很多，&lt;br /&gt;
所以很多基建、文化很难同步赶上，&lt;br /&gt;
但我司首先是有双休，&lt;br /&gt;
然后文化上内部的宣传也比拼多多好些。&lt;br /&gt;
讲着讲着，Freedom 想起了他毕业后去网易的事情，&lt;br /&gt;
笑着补充了一句：“其实公司文化这个东西，&lt;br /&gt;
对刚毕业的应届生影响很大的。&lt;br /&gt;
很多人对职场一辈子的感知都起源于最初的印象。”&lt;/p&gt;

&lt;p&gt;是啊，就像小王子感慨的那样：&lt;br /&gt;
沙漠的美，源于它之中隐藏的甘泉。&lt;/p&gt;

&lt;h2 id=&#34;三-工资期权&#34;&gt;（三）工资期权&lt;/h2&gt;

&lt;p&gt;讲到拼多多上市的员工大会，&lt;br /&gt;
我又问了一个敏感话题下的不敏感问题：&lt;br /&gt;
“你们上市以后，期权兑换股权的方式是怎么样的？”&lt;br /&gt;
得到的回答是标准的美国科技公司的做法，&lt;br /&gt;
跟网上的说法是一样的。&lt;br /&gt;
比如拿硅谷里的 PiedPiper 公司举个虚假的栗子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;公司还没上市，是没有股票，只有期权的&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;理论上，等上市了，期权可以用来换成股票&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;但期权也不是免费的，需要用*行权价*购买&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一般来说*行权价*比较低。举个栗子，相比于上市股票每股10USD，行权价可能是每股0.5USD。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PiedPiper 刚创业的时候发出了 20% 的期权。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;CEO 自己出的钱，出了 Idea，贡献了自己的住处，一个拥有 10%。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;其它 5 个早期员工每人拥有 2%。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;所有事情 CEO 拍板。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;剩下的 80% 大家设立了为期 4 年的期限均摊。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;这样即使第一年某个早期员工走了，他也只有 2% 的期权，不会占着茅坑不拉屎。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;之后来的新人也是 4 年领完所有期权。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大家努力干活，一条心做好产品。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;过了三个月，产品原型出了，算了一波市场以后，公司估值 80 万，投资人 A 投了 80 万。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;本来公司估值是 40 万，期权已经分出去了 20%，投资人给两倍钱就是要 40% 的期权。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;但是投资人说：这样，公司估值给你做翻倍，但是我想现在分完期权，等不及 4 年了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;公司缺钱投放产品，同意了。于是 CEO+众人 拿了 80 万现金和 50% 的期权，投资人 A 拿了 50% 期权。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;投资人 A 占得期权比高，不过公司还是 CEO 拍板，只不过每个月都要跟投资人 A 开一下例会，说一下拿着钱干什么去了。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;产品投放以后，效果很好，一年后，公司招了人，估值 300 万，又从投资人 B 那融了 200 万现金。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;因为之前期权分完了，所以现在新资金来了，大家的期权都被稀释了，大概比例是&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CEO 15%，五个早期员工 3%，投资人 A 30%，投资人 B 40%。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;现在 CEO 每个月要跟投资人 A 和投资人 B 开例会，有的时候要按投资人的想法来做事情。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;随着公司的发展，引入了更多资金，甚至公司准备上市了。&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;多个投资人和专业经理人组成了董事会，大部分公司业务方向由董事会决定，CEO 成为了真正的首席执行官。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为了写清楚募股书，公司停止了对新同事的期权发放。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为了避免公司上市后现金流损失，董事会建议 PiedPiper 设定了一个为期 5 年的期权兑换时间。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;因为后来发的很多是子公司的期权，所以董事会对不同子公司制定了从 5:1 到 10:1 不等的期权股票兑换比例。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（扯的例子有点长，而且都是个人猜想，可能很多不准确）&lt;br /&gt;
FM 主要讲了一点，&lt;br /&gt;
就是拼多多的期权兑换方式是 4 年拉满期权，兑换现金的时间还要 3 年。&lt;br /&gt;
这一听大家就都很蛋疼，&lt;br /&gt;
不约而同地说道：“那 FM 你这就肯定不能跳槽了啊，要不亏的一笔。”&lt;/p&gt;

&lt;p&gt;为了量化这个亏有多少，&lt;br /&gt;
我们又猜想了一组虚假的数字：&lt;br /&gt;
假设有 100k 股期权，&lt;br /&gt;
每股行权价是 0.1 美元,&lt;br /&gt;
上市发行价是 20.5 美元,&lt;br /&gt;
期权股票兑换比例是 5:1，&lt;br /&gt;
期权交税比例是 40%，&lt;br /&gt;
期权发放时间和兑换时间都是 4 年；&lt;br /&gt;
那么公司上市成功了以后，&lt;br /&gt;
你可以换到的现金是 (100k / 5) * 20.5 - 100k * 0.1 = 400k (美元)&lt;br /&gt;
你本质上这 8 年的工作相当于每年年薪多了 400k / 8 = 50k (美元) 约等于 350k (人民币)。&lt;br /&gt;
也就是说跟着公司创业成功的你，&lt;br /&gt;
相当于每年多了 35 万人民币的年薪。&lt;/p&gt;

&lt;p&gt;听起来很多，&lt;br /&gt;
那么我们再算下数学期望。&lt;br /&gt;
假设创业成功上市是九死一生的，&lt;br /&gt;
也就是概率是 10%（很高了！）&lt;br /&gt;
那么你在不知道公司未来的情况下，&lt;br /&gt;
创业公司的大饼 buff 其实等于 3.5 万的年薪，&lt;br /&gt;
约等于 3000 元的月薪。&lt;/p&gt;

&lt;p&gt;一顿瞎比分析以后，&lt;br /&gt;
大家又总结了一波：&lt;br /&gt;
“大部分情况下，你能拿多少的数学期望是恒定的。&lt;br /&gt;
不论你在小厂、中厂还是大厂。”&lt;/p&gt;

&lt;p&gt;不过讲到这里，&lt;br /&gt;
我不禁又跟 FM/Freedom 吐槽：&lt;br /&gt;
“你们拼多多实属异类，给的钱是真的多。”&lt;br /&gt;
之前金三银四的时候，&lt;br /&gt;
我们发 offer 的好几个人都直接去了拼多多，&lt;br /&gt;
一问为什么，offer 开的价格接近我们开的两倍，&lt;br /&gt;
真的夸张。&lt;/p&gt;

&lt;p&gt;不过我司有个好处，&lt;br /&gt;
就是绝对保证公平，&lt;br /&gt;
比如我是觉得我们公司没有任何倒挂的情况。&lt;br /&gt;
（倒挂：指的是因为行情变化，导致实力差距较大的同学因为入职时间先后，导致薪酬反转的一种现象）&lt;br /&gt;
互联网行业因为很吃研发水平，&lt;br /&gt;
所以导致优秀人才的薪酬是在逐年上涨的，&lt;br /&gt;
市场涨幅比公司涨幅高的结果是很多情况下同是毕业入公司，&lt;br /&gt;
16 年毕业的工作一年的老同学比 17 年刚毕业的同学薪酬还低。&lt;br /&gt;
知乎上还有个很火爆的 600W 阅读的问题《为何公司宁愿给新人开高工资，却不愿意给知根知底的老员工涨薪？》就是讲这个的。&lt;/p&gt;

&lt;p&gt;讲到倒挂，Freedom 就很痛苦地回忆道：&lt;br /&gt;
“我感觉当时我在的组，我的绩效是 271 里的 2，但是回报却是 1，很不公平。”&lt;br /&gt;
271 讲的是大部分公司激励制度是会按正态分布，&lt;br /&gt;
给表现最优秀的 20% 人最好的奖励，&lt;br /&gt;
让表现最差的 10% 吃屎（或者政治正确的说法叫给工作建议），&lt;br /&gt;
剩下的 70% 彼此彼此。&lt;br /&gt;
不同 Leader 的政策是不一样的：&lt;br /&gt;
有些 Leader 喜欢让大家轮流吃屎，&lt;br /&gt;
好处是大家和谐，&lt;br /&gt;
另外的 Leader 会让最差的吃屎，&lt;br /&gt;
很多情况下固定就是那个人一直在吃；&lt;br /&gt;
还有些 Leader 会有新手保护，&lt;br /&gt;
刚毕业的、刚加入团队的新同学最开始是不会吃屎的。&lt;br /&gt;
不过大家又吐槽，假如就按 dps 算的话，&lt;br /&gt;
新人是应该吃屎啊，我们也是在吃屎中成长的呀。&lt;/p&gt;

&lt;p&gt;一边说着，新上的油条肠粉又被大家瓜分干净了。&lt;/p&gt;

&lt;h2 id=&#34;四-开发体验&#34;&gt;（四） 开发体验&lt;/h2&gt;

&lt;p&gt;讲钱相关的话题总有一种大人的感觉，&lt;br /&gt;
庸俗又真实。&lt;br /&gt;
为了让话题不这么沉重，&lt;br /&gt;
在思考职业发展的 enye 又问：&lt;br /&gt;
“不考虑钱的话，去早期公司、中期公司、大公司有什么异同吗？”&lt;br /&gt;
“不考虑钱的话，”我想了想，说道，&lt;br /&gt;
“我非常、非常喜欢优秀的小厂的工作环境。”&lt;/p&gt;

&lt;p&gt;一方面是开发体验极好。&lt;br /&gt;
我们在只有几个人的时候，&lt;br /&gt;
虽然技术有分工、分前端和后端，&lt;br /&gt;
但是每个人都是业务全栈的，&lt;br /&gt;
也就是任何人能做任何事情，&lt;br /&gt;
数据流向数据存储数据格式？你的锅。&lt;br /&gt;
业务代码增删改查400/500？你的锅。&lt;br /&gt;
发版部署服务分布依赖关系？还是你的锅。&lt;br /&gt;
而且每次改动都是很快见效，&lt;br /&gt;
反馈效应极强。&lt;br /&gt;
FM 默默点头：&lt;br /&gt;
那个时候没什么沟通成本，&lt;br /&gt;
我说两天能做完，&lt;br /&gt;
然后两天就肝出来了，&lt;br /&gt;
你觉得我很牛逼，&lt;br /&gt;
我也觉得自己很牛逼啊！&lt;/p&gt;

&lt;p&gt;另一方面，就像 FM 说的，&lt;br /&gt;
是沟通成本的问题。&lt;br /&gt;
我问 FM：“你有没有感觉你们人多了以后，扯皮非常严重”&lt;br /&gt;
FM 说有，并且举了一个具体的例子：&lt;br /&gt;
他们研发因为人很多，&lt;br /&gt;
很多人都彼此不认识，&lt;br /&gt;
所以并不知道谁是组长谁有拍板的权利。&lt;br /&gt;
然后业务问题很多都是模棱两可的，&lt;br /&gt;
时不时就有人对业务问题产生了分歧，&lt;br /&gt;
然后 argue 了很久也没能拍板，&lt;br /&gt;
导致很多时间都花在了沟通上。&lt;/p&gt;

&lt;p&gt;讲到这个话题，&lt;br /&gt;
大家共鸣非常强，&lt;br /&gt;
工作既涉及开发又设计产品经理还涉及客户关系维护的 enye 非常激动地说：&lt;br /&gt;
“你知道为什么吗？这就是屁股决定脑袋！”&lt;br /&gt;
很多时候双方互相冲突的观点其实都是正确的，&lt;br /&gt;
问题是出在两个人的屁股都是朝着自己的方向的。&lt;br /&gt;
就算你到了高层也是一样，都是做着决策层的需求，&lt;br /&gt;
但是你们 KPI 不一样，团队也是不一样的，&lt;br /&gt;
自然就难避免扯皮了。&lt;/p&gt;

&lt;p&gt;聊到这里，我又想起了 OKR 整套方法论里面很重要的一个概念叫“校准”。&lt;br /&gt;
就是说大的任务被拆分时，&lt;br /&gt;
第一要保证的是它们的方向一定得是一致的，&lt;br /&gt;
不能有互相冲突的地方。&lt;br /&gt;
方法论里都这么讲了，&lt;br /&gt;
那反过来说这个问题其实是广泛存在的。&lt;/p&gt;

&lt;p&gt;讲着讲着，FM 就老气横秋地说道：&lt;br /&gt;
“所以其实作为研发，跟产品、运维、市场这些人搞好关系是很重要的。&lt;br /&gt;
即使是工作里，大家假如不作为伙伴互相看待的话，其实非常蛋疼的。”&lt;br /&gt;
众纷纷点头认可。&lt;/p&gt;

&lt;p&gt;扯了这么多，&lt;br /&gt;
我发现偏离了一开始的主题，&lt;br /&gt;
就补充道：&lt;br /&gt;
其实小厂好还是大厂好，&lt;br /&gt;
我感觉是不仅看人，还看团队的，&lt;br /&gt;
我是非常喜欢目前的团队氛围。&lt;br /&gt;
举个栗子，&lt;br /&gt;
我们前携程队友，&lt;br /&gt;
他来了我司以后感慨：&lt;br /&gt;
“卧槽原来还有这样的地方啊，&lt;br /&gt;
我以前在大公司学到的扯皮的那么一套居然都用不上了！”&lt;br /&gt;
众笑。&lt;/p&gt;

&lt;h2 id=&#34;五-感情生活&#34;&gt;（五） 感情生活&lt;/h2&gt;

&lt;p&gt;几个上世纪出生的男生聚在一起，&lt;br /&gt;
就聊起了 PLMM 的话题。&lt;br /&gt;
大家发现在场的 5 人里有 4 人是单身的，&lt;br /&gt;
并且有小伙伴都进入了“还是琪亚娜比较可爱”的佛系状态里，&lt;br /&gt;
不仅唏嘘了一下。&lt;/p&gt;

&lt;p&gt;最后，大家纷纷给下周一就又要去西班牙的 enye 头上插满了 flag:&lt;br /&gt;
“下次来上海，要带着妹子来。”&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么我喜欢工程师文化</title>
      <link>https://liriansu.com/posts/2018-07-26-engineer-culture/</link>
      <pubDate>Thu, 26 Jul 2018 22:38:44 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-07-26-engineer-culture/</guid>
      <description>&lt;p&gt;Mia 公司的母公司是 3G资本，&lt;br /&gt;
她前几天突然好奇公司的文化是怎么样的，&lt;br /&gt;
就去找了相关资料读了一遍。&lt;/p&gt;

&lt;p&gt;然后 Mia 惊奇地跟我说：&lt;br /&gt;
“我发现 3G资本 对人才的要求特别神奇。&lt;br /&gt;
三个关键词是 smart, poor, desire to be rich&amp;hellip;”&lt;br /&gt;
空气中顿时充满了快活的笑声。&lt;/p&gt;

&lt;p&gt;后来我又想，&lt;br /&gt;
我司有什么企业文化呢？&lt;br /&gt;
假如要我来说的话，&lt;br /&gt;
大概就是 &lt;code&gt;工程师文化&lt;/code&gt; 吧。&lt;/p&gt;

&lt;h1 id=&#34;工程师文化&#34;&gt;工程师文化&lt;/h1&gt;

&lt;p&gt;看美剧的时候，&lt;br /&gt;
我们会发现美国人一楼总有一个车库，&lt;br /&gt;
车库的工具箱里装着各种各样祖传的实用工具，&lt;br /&gt;
Mickey/Rick/Baymax 都是从车库里走出来的。&lt;/p&gt;

&lt;p&gt;软件工程师的工程师文化跟这个场景也很像：&lt;br /&gt;
- 在实践中学习&lt;br /&gt;
- 用工具解决问题&lt;br /&gt;
- 自主决策&lt;/p&gt;

&lt;p&gt;我很喜欢这样的工程师文化。&lt;br /&gt;
具体来说，&lt;br /&gt;
我们举一个B轮公司的研发部门为例子，&lt;br /&gt;
也就是我目前在的公司：&lt;br /&gt;
再惠（上海）网络科技有限公司。&lt;/p&gt;

&lt;h2 id=&#34;在实践中学习&#34;&gt;在实践中学习&lt;/h2&gt;

&lt;p&gt;我司有一份文档，&lt;br /&gt;
叫 &lt;code&gt;the Hitchhiker&#39;s Guide to ZaiHui Dev&lt;/code&gt;，&lt;br /&gt;
俗称“新手村任务”，&lt;br /&gt;
这个文档大概长这样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/engineer/guide.png&#34; alt=&#34;guide&#34; /&gt;&lt;/p&gt;

&lt;p&gt;文档里的章节包括搭建开发环境、&lt;br /&gt;
熟悉基础业务、参与合作流程、认识基础架构、&lt;br /&gt;
还有名为 DLC 的包括权限、队友、小脚本等附录。&lt;/p&gt;

&lt;p&gt;除了这一套完善的文档以外，&lt;br /&gt;
每个人还配有一名 buddy，&lt;br /&gt;
就像老刺客带新刺客一样，&lt;br /&gt;
新同学在万物皆虚万事皆允的路上不管有任何问题，&lt;br /&gt;
都是可以抓着 buddy 问个透彻的。&lt;/p&gt;

&lt;p&gt;比如其中后端的新手村任务大概长这样子（节选）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;玩 API&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;本地跑一个 server，尝试用接口获取 id=1 的商户信息&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尝试用测试环境的登录接口，拿到自己的 key&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;想办法给所有测试环境添加自己的权限账号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过调用 api 的方式修改自己库里的用户名&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;玩 DB&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;在测试环境入个会&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在代码里找到“阿瓦达索命”相关功能，注销掉自己的账号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;研究发验证码的代码 (pin.py) 到测试环境给自己设一个永久验证码&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;写 Bug&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;尝试搞挂&amp;lt;惠吧烤鱼&amp;gt;这个公众号，让微信提示“该公众号无法提供服务”（记得修！不然测试爸爸要叫！）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尝试不用 random 库，写一个有几率会挂的 ut&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;写一个循环引用，让所有 ut 都挂&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尝试去测试环境改一下代码，然后搞坏该环境的发版（期待结果是在 pull_new_code 的时候报错）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般来说，&lt;br /&gt;
有 python 经验的同学可以在一周左右做完新手村任务，&lt;br /&gt;
了解我们的主要业务和后端的大致实现框架。&lt;br /&gt;
刚毕业的同学也可以在整套流程中认识到 RESTful/MySQL/Git/Jenkins 等开发流程。&lt;/p&gt;

&lt;p&gt;对应的，我们还践行 DevOps 的原则，&lt;br /&gt;
就是 &lt;code&gt;Eat your own dog food&lt;/code&gt;。&lt;br /&gt;
不仅包括开发+架构设计+环境搭建一体化，&lt;br /&gt;
还包括可以瞎比玩别人的测试环境，&lt;br /&gt;
一个环境我搞挂了就得我来修，&lt;br /&gt;
不修的话就会被拿刀抵在背上来修（并不）…&lt;/p&gt;

&lt;h2 id=&#34;用工具解决问题&#34;&gt;用工具解决问题&lt;/h2&gt;

&lt;p&gt;截止到目前（2018年7月）为止，&lt;br /&gt;
我司技术部门（各端研发+测试）一共不到60人，&lt;br /&gt;
对应我们年费制的数千家商户，&lt;br /&gt;
平均下来每个人支持了100家商户。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这么想想敏俊（96年的刚毕业小帅哥）也支持了100家商户，&lt;br /&gt;
想想也为他感到有点小激动…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里就是我们用的大量工具起到了杠杆的作用，&lt;br /&gt;
放大了每个工程师的生产力。&lt;/p&gt;

&lt;p&gt;当时我被面试的时候，&lt;br /&gt;
谢老板的一句话给我印象很深：&lt;br /&gt;
“能用工具解决的问题，&lt;br /&gt;
我们是不会让工程师上的。”&lt;/p&gt;

&lt;p&gt;具体来说，&lt;br /&gt;
我们看一个典型开发流程所要经历的一些步骤。&lt;/p&gt;

&lt;h3 id=&#34;迭代&#34;&gt;迭代&lt;/h3&gt;

&lt;p&gt;我司一直跑的是敏捷开发，&lt;br /&gt;
早期用的是 Trello。&lt;br /&gt;
那时不仅产品不多，&lt;br /&gt;
产品经理也不多。&lt;/p&gt;

&lt;p&gt;后来队友逐渐在增加，&lt;br /&gt;
就尝试用了 Jira。&lt;br /&gt;
Jira 的好处是它功能强大可配置，&lt;br /&gt;
配套的 Confluence 等设施完善。&lt;br /&gt;
但是因为配置起来比较繁琐，&lt;br /&gt;
也没有让我们自己反复调整的时间，&lt;br /&gt;
大部分队友也就不太适应 Jira。&lt;/p&gt;

&lt;p&gt;后来一直到现在我们在用 Teambition。&lt;br /&gt;
目前每个产品线有自己的敏捷面板，&lt;br /&gt;
每两周一次迭代，周一计划会，下周五回顾会。&lt;br /&gt;
每天早上晨会，大家除了过一下昨天的进度和今天的计划，&lt;br /&gt;
还会主要把一些小的疑问/困难放在晨会里说出来，&lt;br /&gt;
10 个人的晨会大概 10 分钟就结束了，效率巨高。&lt;/p&gt;

&lt;p&gt;前几天面试的时候，&lt;br /&gt;
一个唯品会的小姑娘好奇地问我：&lt;br /&gt;
“你们的迭代是两周定时的么？”&lt;br /&gt;
我意识到其实不同团队对迭代的执行细节不一样，&lt;br /&gt;
就跟她解释了一下我们对迭代的理解：&lt;br /&gt;
“其实迭代就像地铁班车，&lt;br /&gt;
我们是写死两周一班车，&lt;br /&gt;
这个迭代能做完什么就做完什么。&lt;br /&gt;
车又不等人，做不完的下个迭代再做就行啦。”&lt;/p&gt;

&lt;h3 id=&#34;vcs&#34;&gt;VCS&lt;/h3&gt;

&lt;p&gt;我们用的版本控制工具是私有部署的 GitLab EE。&lt;br /&gt;
除了 Repository，&lt;br /&gt;
还用上了里面的 Merge Request/CI/CD/Docker Registry/Wiki 等功能。&lt;/p&gt;

&lt;p&gt;比如举我们的机器人 KevinBot 为例，&lt;br /&gt;
假如想要给 Kevin 加一个新功能大概流程是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fork 项目到本地开发&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;push 到自己的 repo，提一个 merge request&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;触发了 CI 检查&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;flake8 检查一波有没有语法问题，比如用了双引号、忘了写逗号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;django 检查一下有没有 migration 上的问题&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;跑完全部 ut，看看单元测试能不能过&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;跪求 code owner 来 review 自己的代码&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;会有线上评论，不好解释的会线下解释一波&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;有问题就打回去改了，重新 push&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;approve + merge&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自动触发了 docker 的自动构建&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;构建完成以后自动触发了发版，kevin 机器人发版完成&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/engineer/review.png&#34; alt=&#34;review&#34; /&gt;&lt;/p&gt;

&lt;p&gt;整个过程中 contributor 需要 fork + coding + merge request，&lt;br /&gt;
code owner 需要 review + approve + merge，&lt;br /&gt;
剩下的单元测试、镜像构建、版本更新都是一条流水线做完的~&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;于是小机器人就更新了一个又一个并不实用的好玩功能&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/engineer/alias.png&#34; alt=&#34;alias&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;监控&#34;&gt;监控&lt;/h3&gt;

&lt;p&gt;我们的监控系统分为几块。&lt;br /&gt;
所有监控的告警我们用的是邮件 + 微信机器人。&lt;br /&gt;
机器状态的监控我们用了云平台的自带功能 AWS CloudWatch，&lt;br /&gt;
业务的状态、日志监控我们用了 ELK 整套系统，&lt;br /&gt;
还有最直接实用的错误监控我们用的是 Sentry。&lt;/p&gt;

&lt;p&gt;比如说一年前每周都有好几个发版夜的时候，&lt;br /&gt;
大家都是一边看着 Jenkins console log，&lt;br /&gt;
一边看着 Sentry 看看会不会蹦出来一些 error log。&lt;br /&gt;
有的话当然就火线编程了！&lt;br /&gt;
（于是当时就有这样的九核围观的梗：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/engineer/fire.jpg&#34; alt=&#34;fire&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来我们终于迎来了正规军测试小伙伴的加入，&lt;br /&gt;
Sentry 依然还是我们在测试环境用的一个非常有效的 debug 手段，&lt;br /&gt;
不论是 error 还是 warning，&lt;br /&gt;
Sentry 上的每一个错误都有几率被抓起来吊着锤。&lt;/p&gt;

&lt;p&gt;有一次 Sentry 变慢了一些，&lt;br /&gt;
都被敏锐的旭总察觉到了事情并不简单，&lt;br /&gt;
从而牵扯出了一桩案件：&lt;a href=&#34;https://liriansu.com/solve-a-sentry-case&#34;&gt;《破案·Sentry迷云》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;自主决策&#34;&gt;自主决策&lt;/h2&gt;

&lt;p&gt;上面讲的这些工程师文化的方方面面，&lt;br /&gt;
各个优秀的团队都绝对也一样有这样的工程师团队。&lt;br /&gt;
但唯有一点，&lt;br /&gt;
我是觉得只有我司是特别的。&lt;/p&gt;

&lt;p&gt;套用一段之前在高德干活的拉总讲的话：&lt;br /&gt;
“我以前在高德，做的事情是领导分给我的。&lt;br /&gt;
我的领导呢，做的事情也是他的领导分给他的。&lt;br /&gt;
所有人要做的业务、要使用的技术都是相对固定的。&lt;br /&gt;
但是在再惠，根本就是怎么好怎么来。&lt;br /&gt;
而且实话说，我以前根本没有想象过，工作能这么开心！”&lt;/p&gt;

&lt;p&gt;拉总总是这么睿智（棒读）。&lt;/p&gt;

&lt;p&gt;政治老师说过，&lt;br /&gt;
我们答题要用总分总的形式容易得高分。&lt;/p&gt;

&lt;p&gt;看来工程师文化令人喜欢的一个原因，&lt;br /&gt;
就是工程师们也十分令人喜欢呀。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近跟女朋友的周常</title>
      <link>https://liriansu.com/posts/2018-06-05-weekly-wander/</link>
      <pubDate>Tue, 05 Jun 2018 00:22:48 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-06-05-weekly-wander/</guid>
      <description>&lt;p&gt;最近因为加班有点多，&lt;br /&gt;
经常打断二人世界，&lt;br /&gt;
导致女朋友有点不开心。&lt;/p&gt;

&lt;p&gt;（一）&lt;br /&gt;
前几个月的时候周常去觅食，&lt;br /&gt;
去的店家是港式风格装修的。&lt;br /&gt;
米娅正很开心地跟我讨论着墙纸上的 sasa 店面，&lt;br /&gt;
我眼角瞥见了桌上有一张二维码。&lt;/p&gt;

&lt;p&gt;“哇你看，他们家也有微信点餐。&lt;br /&gt;
我这几个月加班都在做这个！&lt;br /&gt;
你等我下我拍照发群里，&lt;br /&gt;
看看人家做的跟我们做的体验相比如何…”&lt;/p&gt;

&lt;p&gt;顿时米娅跟我聊天的兴致全无了。&lt;/p&gt;

&lt;p&gt;上周末的时候，&lt;br /&gt;
吃饭过程中又接了个语音，&lt;br /&gt;
然后我跟米娅说，&lt;br /&gt;
吃完饭我下午要去公司。&lt;/p&gt;

&lt;p&gt;米娅就很好奇地问了我一句：&lt;br /&gt;
“你们公司出 bug 都是你修吗？”&lt;/p&gt;

&lt;p&gt;我安慰米娅说：&lt;br /&gt;
“有些别的同事也要周末修 bug 的啦。”&lt;/p&gt;

&lt;p&gt;（二）&lt;/p&gt;

&lt;p&gt;第二天晚上跟米娅吃完饭出去散步消食，&lt;br /&gt;
不知不觉又聊到了加班这个话题。&lt;br /&gt;
出于“爱一个人就想跟他分享全部”的道理，&lt;br /&gt;
我不禁又跟米娅喋喋不休我的工作起来。&lt;/p&gt;

&lt;p&gt;“我跟你说，我感觉每个人的属性真的是不一样的。”&lt;/p&gt;

&lt;p&gt;米娅捧哏：“嗯？”&lt;/p&gt;

&lt;p&gt;“比如说我们公司吧。&lt;br /&gt;
因为工作制度是 965 + 弹性时间，&lt;br /&gt;
所以每个人的方差其实很大。&lt;br /&gt;
有些同事就是按时上班按时下班好好工作，&lt;br /&gt;
也有些同事跟我一样就是加班划水。”&lt;/p&gt;

&lt;p&gt;“噢，也就是说你们真的有人是不加班的咯？”&lt;/p&gt;

&lt;p&gt;“对啊当然。&lt;br /&gt;
你看加班这个属性，&lt;br /&gt;
其实不是跟公司绑定的而是跟我绑定的，&lt;br /&gt;
我在 QAD 不也晚上洗完澡回去干活么…”&lt;/p&gt;

&lt;p&gt;“噢…”&lt;/p&gt;

&lt;p&gt;（三）&lt;/p&gt;

&lt;p&gt;不过讲到这个，&lt;br /&gt;
我又想起上次看到的一个很好玩的说法：&lt;br /&gt;
“离职爆破半径。”&lt;br /&gt;
于是我想办法用人话跟米娅 demo 了一下：&lt;/p&gt;

&lt;p&gt;“虽然说每个人都是平等的，&lt;br /&gt;
但人和人之间真的差别还是蛮大的。”&lt;/p&gt;

&lt;p&gt;“怎么讲？”&lt;/p&gt;

&lt;p&gt;“比如说你看我们现在几十个人，&lt;br /&gt;
少几个人好像没啥问题。&lt;br /&gt;
但其实我拍脑袋可以数出几个人，&lt;br /&gt;
只要他们一瞬间全部离职，&lt;br /&gt;
我们的事情就会崩。”&lt;/p&gt;

&lt;p&gt;“啊？为什么啊。”&lt;/p&gt;

&lt;p&gt;“因为我们目前很多事情其实不是靠制度在维护的，&lt;br /&gt;
真的是靠优秀的人在顶着。&lt;br /&gt;
而且因为这些人太优秀了，&lt;br /&gt;
所以很多制度上的事情感觉还没有做的必要，&lt;br /&gt;
非常地‘以人为本’。”&lt;/p&gt;

&lt;p&gt;（四）&lt;/p&gt;

&lt;p&gt;“比如说我给你举个具体的例子，&lt;br /&gt;
就是 support。”&lt;/p&gt;

&lt;p&gt;“嗯好~”&lt;/p&gt;

&lt;p&gt;“我们公司是做 B 端产品的嘛，&lt;br /&gt;
也就是说商户其实才是我们的根本。&lt;br /&gt;
所以我个人非常信奉&lt;strong&gt;客户第一&lt;/strong&gt;，&lt;br /&gt;
跟 QAD 讲的那个 Customer First 的 Core Value 是一样的道理。&lt;br /&gt;
不过像这句话，&lt;br /&gt;
我从来不会在同事的面前提。”&lt;/p&gt;

&lt;p&gt;“啊，为啥？”&lt;/p&gt;

&lt;p&gt;“因为我觉得这个问题很敏感。&lt;br /&gt;
比如说个具体的，&lt;br /&gt;
我们目前是没有 technical support 部门的，&lt;br /&gt;
也就是说有任何搞不定的技术问题，都得 R&amp;amp;D 上，去解决问题。”&lt;/p&gt;

&lt;p&gt;“啊？你们 service 的同事呢？他们不是要负责上门安装么？”&lt;/p&gt;

&lt;p&gt;“对，我司分工里这叫 Customer Success。&lt;br /&gt;
他们其实也蛮苦逼，要负责 service + support 的工作。&lt;br /&gt;
不过他们不懂技术，所以我刚才说我们是没有 technical support 的。”&lt;/p&gt;

&lt;p&gt;“噢噢。”&lt;/p&gt;

&lt;p&gt;“这个没什么好或者不好，&lt;br /&gt;
这个是我们目前的现状。&lt;br /&gt;
但是问题是我们招人的时候，&lt;br /&gt;
或者说公司战略上不会明确这么一件事情：&lt;br /&gt;
就是技术的工作职责里包括支持。&lt;br /&gt;
这个其实就很崩，&lt;br /&gt;
人的屁股不同就会决定思想的不一样，&lt;br /&gt;
所以这里很多东西是纯靠我们的责任感去维持。”&lt;/p&gt;

&lt;p&gt;“那为什么你们公司不设 technical support 呢？”&lt;/p&gt;

&lt;p&gt;“唔，这个我就说不上话了。&lt;br /&gt;
我猜这个是公司成长之路上的阵痛吧。”&lt;/p&gt;

&lt;p&gt;（五）&lt;/p&gt;

&lt;p&gt;米娅想起了上次看到优衣库招聘启事上写的：&lt;br /&gt;
“我们是一家信奉实力主义至上的公司”&lt;br /&gt;
不禁感慨道：“那有家庭的人估计不能在这样的公司里工作。”&lt;/p&gt;

&lt;p&gt;“是啊，而且我们还有那种结了婚但是工作巨努力的同事…&lt;br /&gt;
简直可怕…”&lt;/p&gt;

&lt;p&gt;米娅又想到了什么，问：&lt;br /&gt;
“对了，那旭总是单身？”&lt;/p&gt;

&lt;p&gt;我：“大概……是吧……”&lt;/p&gt;

&lt;p&gt;讲到此处，&lt;br /&gt;
我和米娅才发现已经不知不觉走到了日月光。&lt;br /&gt;
只见门口的公交车站广告牌处，&lt;br /&gt;
一个“大满足”的杨洋正在笑容满面地看着我们。&lt;/p&gt;

&lt;p&gt;“走，原路返回，回家。”&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的一点强迫症</title>
      <link>https://liriansu.com/posts/2018-05-07-my-coding-ocd/</link>
      <pubDate>Mon, 07 May 2018 22:07:44 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-05-07-my-coding-ocd/</guid>
      <description>&lt;p&gt;每个程序员都有他自己的强迫症。&lt;br /&gt;
一旦被戳中了，&lt;br /&gt;
就不禁心里暗暗会喊一声“舒服”。&lt;/p&gt;

&lt;h1 id=&#34;正确使用空格&#34;&gt;正确使用空格&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;有研究显示，&lt;br /&gt;
打字的时候不喜欢在中文和英文之间加空格的人，&lt;br /&gt;
感情路都走得很辛苦，&lt;br /&gt;
有七成的比例会在 34 岁的时候跟自己不爱的人结婚，&lt;br /&gt;
而其余的三成最后只能把遗产留给自己的猫。&lt;br /&gt;
毕竟爱情跟书写都需要适时地留白。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/pangu.js&#34;&gt;vinta/pangu.js&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;现代社会的程序员总是要接触英文，&lt;br /&gt;
而很多时候我们会在中文中夹杂英文。&lt;/p&gt;

&lt;p&gt;这种时候假如见到不留白的字我就会很难受：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;错误：我今天带GF去吃了KFC的嫩牛五方。
正确：我今天带 GF 去吃了 KFC 的嫩牛五方。&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;正确使用全半角符号&#34;&gt;正确使用全半角符号&lt;/h1&gt;

&lt;p&gt;当时在微信公众号的文档 JSON 样例数据里，&lt;br /&gt;
发现了全角双引号的我，&lt;br /&gt;
就像初中时回宿舍路上，&lt;br /&gt;
在马路中央见到了一直死老鼠的阿锋一样惊恐。&lt;/p&gt;

&lt;p&gt;中文使用全角符号，&lt;br /&gt;
英文使用半角符号并留白，&lt;br /&gt;
连接处使用全角符号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;错误：你们搞信息竞赛(OI)的有句话叫&amp;#34;code is cheap，show me your boyfriend。&amp;#34;
正确：你们搞信息竞赛（OI）的有句话叫“code is cheap, show me your boyfriend.”&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;文本文件以换行符结尾&#34;&gt;文本文件以换行符结尾&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;No newline at end of file&lt;/code&gt; 这句话就像是“你房间没锁门”一样令人惊悚。&lt;/p&gt;

&lt;p&gt;不过专业地说，&lt;br /&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/729692&#34;&gt;在 POSIX 标准里行的定义&lt;/a&gt;是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3.206 Line&lt;br /&gt;
A sequence of zero or more non-&amp;lt;newline&amp;gt; characters plus a terminating &amp;lt;newline&amp;gt; character.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;使用正确的词描述事情&#34;&gt;使用正确的词描述事情&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;你们这样&lt;strong&gt;地&lt;/strong&gt;热情，&lt;br /&gt;
但还是要提高自己&lt;strong&gt;的&lt;/strong&gt;知识水平，&lt;br /&gt;
识&lt;strong&gt;得&lt;/strong&gt;唔识得啊？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;古人有一句话，&lt;br /&gt;
叫“学好的地得，走遍天下都不怕”。&lt;/p&gt;

&lt;p&gt;这么想来，&lt;br /&gt;
那个苍蝇问的那句话还是颇有思想性的：&lt;br /&gt;
“假如当时我们把屎叫做饭会怎么样？”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何带节奏</title>
      <link>https://liriansu.com/posts/2018-04-13-make-your-impact/</link>
      <pubDate>Fri, 13 Apr 2018 22:44:45 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-04-13-make-your-impact/</guid>
      <description>&lt;p&gt;3月份我司周常分享轮到我的时候，&lt;br /&gt;
我讲了这个话题。&lt;br /&gt;
就像学好了“meta编程”就可以编的一手好程序，&lt;br /&gt;
我想着假如大家能掌握“meta分享”的技巧，&lt;br /&gt;
那日后我们的内部分享便会是盛宴不断了。&lt;/p&gt;

&lt;p&gt;本文语气更贴近 presentation,&lt;br /&gt;
文学性会欠缺一些。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;今天的主题是“如何带节奏”，&lt;br /&gt;
我们也可以说“如何说服一个团体”，&lt;br /&gt;
或者叫“如何增加你的影响力”。&lt;/p&gt;

&lt;p&gt;所以很显然，&lt;br /&gt;
这次我要讲的东西很虚，&lt;br /&gt;
基本上全部都是鸡汤。&lt;br /&gt;
关于鸡汤类的文章/分享，&lt;br /&gt;
有一句话，叫：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;甲之砒霜，乙之蜜糖&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话出处我没太找到，&lt;br /&gt;
大概就是评价杨玉环的。&lt;br /&gt;
说到杨贵妃，古典四大美人之一，&lt;br /&gt;
她对于皇帝来说就是蜜糖，&lt;br /&gt;
但是对于劳苦大众来说就是砒霜。&lt;br /&gt;
这句话你也可以管它叫“千人千面”、“萝卜青菜”、“哈姆雷特和林黛玉”，&lt;br /&gt;
意思都是一样的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;朝闻道，夕死可矣&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话意思其实就等同于“纸上得来终觉浅”。&lt;br /&gt;
很多时候我们看文章、听分享得来的道理，&lt;br /&gt;
觉得蛮普通的。&lt;br /&gt;
等到真正践行的时候，&lt;br /&gt;
会发现这个道理的确科学啊。&lt;/p&gt;

&lt;p&gt;回到这句话，&lt;br /&gt;
意思就是你今天早上听了这个分享，&lt;br /&gt;
到晚上你就会发出“すごい”的感慨。&lt;br /&gt;
（众人愣，后笑）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;喜欢就会放肆，但爱就会克制&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话出自韩寒的《后会无期》，&lt;br /&gt;
他前阵子发了条微博：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/toocold.jpg&#34; alt=&#34;toocold&#34; /&gt;&lt;/p&gt;

&lt;p&gt;大概我今天讲的也会是这样的。&lt;/p&gt;

&lt;p&gt;所谓“古来圣贤皆寂寞，惟有饮者留其名”。&lt;br /&gt;
虽然我觉得今天讲的是我的肺腑之言，&lt;br /&gt;
但大家也就选自己信的部分听就行了。&lt;/p&gt;

&lt;h2 id=&#34;理论&#34;&gt;理论&lt;/h2&gt;

&lt;p&gt;好了，背景介绍完了。&lt;br /&gt;
我们来讲“如何带节奏”的理论。&lt;br /&gt;
光是理论很干涩啊，&lt;br /&gt;
我们来想一个例子：&lt;br /&gt;
你在玩一个网络游戏（比如山口山），&lt;br /&gt;
你加入了一个很强大的组织（比如全服第一的阴阳寮），&lt;br /&gt;
你想在里面的主力阵容里有一席之地，&lt;br /&gt;
甚至最后可以带团，&lt;br /&gt;
那你应该怎么做呢？&lt;/p&gt;

&lt;p&gt;大概的大纲是下面的四步：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打入内部&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;建立人设&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;注意技巧&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不忘初心&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;打入内部&#34;&gt;打入内部&lt;/h2&gt;

&lt;p&gt;首先世界上每个组织都有自己一套的行为方式，&lt;br /&gt;
比如开源项目有自己的代码风格，&lt;br /&gt;
每个公司有自己的文化，&lt;br /&gt;
一个公会也可能有自己的副本时间表。&lt;br /&gt;
所以第一步就是：要多观察。&lt;br /&gt;
这里有一句话，叫：&lt;/p&gt;

&lt;h3 id=&#34;新潜三&#34;&gt;新潜三&lt;/h3&gt;

&lt;p&gt;也就是“萌新要首先潜水三个月”的意思。&lt;/p&gt;

&lt;p&gt;潜水三个月并不是说你这几个月不说话，&lt;br /&gt;
而是你在适当参与互动的前提下，&lt;br /&gt;
你可以有比较多的时间注意下像&lt;br /&gt;
“组织有什么黑话？”&lt;br /&gt;
“组织里哪个人是可以开玩笑的？”&lt;br /&gt;
“哪种说话方式可以让大家最舒服？”&lt;br /&gt;
“大家是以冲排名为目标，还是以休闲为目标？”&lt;/p&gt;

&lt;p&gt;讲到这里还能引出一个问题，叫：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如何跟青少年沟通？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我从之前到现在一直觉得这很扯：&lt;br /&gt;
只要多跟他们聊天，&lt;br /&gt;
跟他们玩一样的游戏，&lt;br /&gt;
跟他们上一样的网站，&lt;br /&gt;
自然就知道“现在的年轻人”在想什么。&lt;br /&gt;
很多人既不想跟小孩子玩到一起，&lt;br /&gt;
又想跟小孩子有共同语言，&lt;br /&gt;
这肯定是不科学的。&lt;br /&gt;
比如后面我们要讲到的局座、葛平等人，&lt;br /&gt;
就是这点做的非常棒的。&lt;/p&gt;

&lt;h3 id=&#34;不拉踩&#34;&gt;不拉踩&lt;/h3&gt;

&lt;p&gt;这个就是字面意思，&lt;br /&gt;
任何时候我们做人，&lt;br /&gt;
不能“拉一踩一”。&lt;/p&gt;

&lt;p&gt;比如玩游戏，&lt;br /&gt;
一个团里可能会有固定队伍，&lt;br /&gt;
我们一定不能说因为我们想顶替掉现在的T，&lt;br /&gt;
就只跟奶搞好关系，说“那个T怎么怎么样”。&lt;br /&gt;
这样为了短期回报，&lt;br /&gt;
而丢掉长期发展的操作是很伤的。&lt;br /&gt;
我们要带的是长远的节奏，不在一朝一夕。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;早期A/B站的故事&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这点俊儒也是A岛丧尸所以可能知道的清楚一些，&lt;br /&gt;
你们大部分人应该只知道B站很好。&lt;br /&gt;
不过其实当初B站创立的时候有一波不太和谐的操作，&lt;br /&gt;
具体的情况我也不能断定，&lt;br /&gt;
不过在我眼里就是有“拉自己踩隔壁”的嫌疑。&lt;br /&gt;
（不过运营、资本、大小姐什么的就是后话了）&lt;/p&gt;

&lt;h3 id=&#34;不ky&#34;&gt;不KY&lt;/h3&gt;

&lt;p&gt;KY 这个词，源自日语的“空気を読めない”，&lt;br /&gt;
翻译过来就是“不会读空气”。&lt;br /&gt;
比如举个例子，&lt;br /&gt;
我们公司玩 dota2 的人挺多的，&lt;br /&gt;
假如大家正在兴冲冲地讨论新出的英雄，&lt;br /&gt;
然后我说一句：“只有我觉得 dota1 比 dota2 好玩么？”&lt;br /&gt;
这就是 KY。&lt;br /&gt;
就算我内心真是这么想的，&lt;br /&gt;
但我也得在合适的空气（气氛）中说出来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;杠精&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前阵子有这么一个词，&lt;br /&gt;
指的是那些“喜欢抬杠到成了精”的人。&lt;br /&gt;
比如我今天发了一条朋友圈，&lt;br /&gt;
说“哇我用 python flask 写了个小服务器好开心”，&lt;br /&gt;
然后评论就说：“为什么不用 java? java 效率更高”。&lt;br /&gt;
或者微博上的 @新垣结衣新闻社 又发了 gakki 的九宫美图，&lt;br /&gt;
粉丝们都在舔屏幕的时候，&lt;br /&gt;
有人在下面评论：“就我觉得新垣结衣不是很漂亮吗？”&lt;/p&gt;

&lt;p&gt;这样的事情不仅会破坏气氛，&lt;br /&gt;
还会减你自己的群地位。&lt;br /&gt;
尽量忍住别做这样的事情。&lt;/p&gt;

&lt;h3 id=&#34;不冲突&#34;&gt;不冲突&lt;/h3&gt;

&lt;p&gt;字面意思，别跟别人怼起来就行了。&lt;/p&gt;

&lt;p&gt;不过讲道理这条其实有点难，&lt;br /&gt;
我见过不少组织因为核心成员怼起来就散了的。&lt;/p&gt;

&lt;h3 id=&#34;game&#34;&gt;Game&lt;/h3&gt;

&lt;p&gt;分享到这里，&lt;br /&gt;
组织了一波现场小游戏：&lt;br /&gt;
&lt;code&gt;每个人都讲一句 KY 的话，其他人来点评够不够 KY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为在场的都是平常互黑的研发同事，&lt;br /&gt;
所以场面异常火爆。&lt;br /&gt;
（场面火爆++）&lt;/p&gt;

&lt;h2 id=&#34;建立人设&#34;&gt;建立人设&lt;/h2&gt;

&lt;p&gt;下面的一些话写的有点中二，多见谅啊。&lt;/p&gt;

&lt;p&gt;我说的人设这个词，&lt;br /&gt;
对应到英文可以是 &lt;code&gt;stereotype&lt;/code&gt;&lt;br /&gt;
也就是“刻板印象”。&lt;br /&gt;
可能这个词词义本身是带贬义的，&lt;br /&gt;
不过我们要知道这是事实就存在的一种设定。&lt;/p&gt;

&lt;p&gt;比如我刚来公司的时候，&lt;br /&gt;
跟大家没有共同经历，&lt;br /&gt;
所以你们认识我肯定就是从我的一些人设开始的：&lt;br /&gt;
交大毕业的、柳老板的室友、广东人。&lt;br /&gt;
所以我黑一下复旦，黑一下柳老板，黑一下福建人都是非常“符合人设”的举动。&lt;/p&gt;

&lt;p&gt;这里首先要说到的第一个人性的弱点就是：&lt;/p&gt;

&lt;h3 id=&#34;凡人皆愿掌控世界&#34;&gt;凡人皆愿掌控世界&lt;/h3&gt;

&lt;p&gt;比如前阵子我搬家，&lt;br /&gt;
我发现人类有一点是很好玩的（用轻蔑的语气说的，众笑）。&lt;br /&gt;
就是很多人没有活在真实的世界里，&lt;br /&gt;
我觉得他们仅仅活在自己的三观里。&lt;br /&gt;
比如我搬家的时候会接触不少的人，&lt;br /&gt;
每个人都会问一个问题，&lt;br /&gt;
叫：“你这房子借的多少钱？”&lt;br /&gt;
（提问：为什么是“借”？答：上海人好像是这么说的）&lt;br /&gt;
我每次都会说：“一般价格啦。”&lt;br /&gt;
注意这里我并没有直接回答他们的问题，&lt;br /&gt;
然后有些人就会说：“哦，三四千吧。”&lt;br /&gt;
也有些人会说：“五六千要的。”&lt;br /&gt;
这里他们的问题其实并不是想要一个真实的回答，&lt;br /&gt;
他们只是想用各种各样的方式加强自己的信心：&lt;br /&gt;
“嗯，如我所想。”&lt;/p&gt;

&lt;p&gt;凡人总是想掌握世界运行的规律，&lt;br /&gt;
愚蠢的人类啊喵。（众笑）&lt;/p&gt;

&lt;p&gt;不过这里虽然我们说凡人怎么怎么样，&lt;br /&gt;
但其实我们也是凡人。&lt;br /&gt;
假如不自知的话，&lt;br /&gt;
我们也容易陷入到这样的弱点里，&lt;br /&gt;
你去了解的不是事情的事实，&lt;br /&gt;
而是一直在加强心中的那个设定。&lt;br /&gt;
（比如有些面试官只凭第一印象去决定面试结果）&lt;/p&gt;

&lt;p&gt;所以这里有个很重要的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;空杯心态&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如张总（正在认真听的张总一惊），&lt;br /&gt;
经过 GitHub 统计他是全国 Python 第一的程序员（众笑），&lt;br /&gt;
他不仅代码厉害，别人夸他的时候他还膜回去，&lt;br /&gt;
这就是典型的空杯心态。（众笑，张总：不敢当不敢当）&lt;/p&gt;

&lt;p&gt;这种空杯心态不难达成，但是反过来就不一定了。&lt;br /&gt;
比如我苏子岳，讲真大学时候没学过《计算机网络》，&lt;br /&gt;
来我司面试的时候真的是连 Get/Post 的区别都分不清，&lt;br /&gt;
假如当时拿这个来面我，我肯定会挂。&lt;br /&gt;
所以假如当时别人说我“哎呀，你网络基础不行”的时候，&lt;br /&gt;
我不控制自己的话就很容易生气：&lt;br /&gt;
因为我的确网络基础不行啊！&lt;/p&gt;

&lt;p&gt;所以不仅要在满了的时候保持空杯心态，&lt;br /&gt;
你杯子是空的时候更要意识到这个事实，&lt;br /&gt;
保持空杯心态。&lt;/p&gt;

&lt;h3 id=&#34;吾等只知千人千面&#34;&gt;吾等只知千人千面&lt;/h3&gt;

&lt;p&gt;上一节讲的是凡人，&lt;br /&gt;
这一节讲的是我们。&lt;br /&gt;
恕我直言，&lt;br /&gt;
在座的各位都是……&lt;br /&gt;
精英！（众笑）&lt;/p&gt;

&lt;p&gt;听到这种好话，&lt;br /&gt;
我们肯定很开心，&lt;br /&gt;
不过稍一思索我们就会知道：&lt;br /&gt;
我们没有什么不同，我们就是凡人。&lt;/p&gt;

&lt;p&gt;这就是一个人设里面很 trick 的东西：&lt;br /&gt;
语言里经常会说“我们怎么怎么样”，&lt;br /&gt;
但其实我是我，你是你，两个人是截然不同的人。&lt;/p&gt;

&lt;p&gt;作为一个集体，&lt;br /&gt;
可能是普通的，&lt;br /&gt;
但只要细颗粒地去看，&lt;br /&gt;
每个人都是截然不同的人设，&lt;br /&gt;
每个人的形象都是不一样的。&lt;/p&gt;

&lt;h3 id=&#34;环顾周围已经如此&#34;&gt;环顾周围已经如此&lt;/h3&gt;

&lt;p&gt;上一节讲得有点虚了，&lt;br /&gt;
我们来看一下周围，&lt;br /&gt;
或者说大家都认识的人里有哪些是有“典型人设”的人吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;高晓松&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一方面，我在公众场合发言，&lt;br /&gt;
讲道理我应该注意观点理中客。&lt;br /&gt;
不过另一方面，我讲话只代表我个人的想法。&lt;/p&gt;

&lt;p&gt;我觉得高晓松某些程度上跟罗振宇是很像的，&lt;br /&gt;
两个人都是因为一定的特质受部分人群的喜欢，&lt;br /&gt;
但其实我们要知道他们被喜欢的是人设。&lt;br /&gt;
比如知乎上会有“高晓松讲的东西不对啦，&lt;br /&gt;
罗振宇的60s语音是提前录好的啦”之类的讨论，&lt;br /&gt;
大部分时候这种事情都不会影响他们的公众人设。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;葛平&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（此处给不懂葛平老师的人放了一下原版，&lt;br /&gt;
经典作《循环》，&lt;br /&gt;
还有葛平老师自己唱的循环）&lt;/p&gt;

&lt;p&gt;跟局座一样，&lt;br /&gt;
葛平也是在年过半百的时候突然被安上了“奇怪的”人设。&lt;br /&gt;
但是他们都非常开心地接受了自己的人设，&lt;br /&gt;
并且有的时候还会大方地拿自己的人设开玩笑。&lt;br /&gt;
很多年轻人一开始只是想恶搞一下他们，&lt;br /&gt;
结果最后却真的被他们的人格魅力所吸粉了。&lt;/p&gt;

&lt;h3 id=&#34;自然反复迟早身陷&#34;&gt;自然反复迟早身陷&lt;/h3&gt;

&lt;p&gt;讲这么一长串，&lt;br /&gt;
我想表达的内容就是“人设”这个现象是自然存在的。&lt;br /&gt;
只要利用好人设这一点，&lt;br /&gt;
就可以迷惑大部分的凡人。&lt;/p&gt;

&lt;p&gt;那怎么建立这点人设呢？&lt;br /&gt;
比如会有个老梗说雷锋把好事都写到日记里。&lt;br /&gt;
从我的角度来看，&lt;br /&gt;
假如一个人假如能360度地维持人设一辈子，&lt;br /&gt;
那他就是这样的人。&lt;/p&gt;

&lt;p&gt;对于大部分普通人，&lt;br /&gt;
他的人设是什么样，&lt;br /&gt;
基本上就是取决于他这个人本来就是什么样。&lt;/p&gt;

&lt;p&gt;当你凝视深渊的时候，&lt;br /&gt;
深渊也在凝视着你。&lt;br /&gt;
你无法抵抗。&lt;/p&gt;

&lt;h3 id=&#34;game-1&#34;&gt;Game&lt;/h3&gt;

&lt;p&gt;讲完了人设这么一节，&lt;br /&gt;
在场的各位又玩了一次游戏，&lt;br /&gt;
叫“每个人讲三个自己的人设。”&lt;/p&gt;

&lt;p&gt;这个环节也是非常火爆，&lt;br /&gt;
通常是一个人没讲自己的人设，&lt;br /&gt;
大家都争先恐后地帮他回答了。&lt;/p&gt;

&lt;p&gt;不过中间发生了一件蛮好玩的事情，&lt;br /&gt;
拉总讲到自己一个人设是“内向”（众笑）&lt;br /&gt;
后来拉总跟我聊天的时候，&lt;br /&gt;
聊到动情处，&lt;br /&gt;
拉总说他自己其实对陌生人是不会很热情的，&lt;br /&gt;
很多人觉得他很外向，&lt;br /&gt;
但其实他觉得自己在这环节里讲的“内向”才是他的性格。&lt;br /&gt;
我不禁陷入了思考。&lt;/p&gt;

&lt;p&gt;这样的游戏环节蛮好的，&lt;br /&gt;
不仅能侧面佐证一下分享内容，&lt;br /&gt;
还能引起了真真切切的思考，&lt;br /&gt;
十分科学。&lt;/p&gt;

&lt;h2 id=&#34;注意技巧&#34;&gt;注意技巧&lt;/h2&gt;

&lt;p&gt;下一章主题叫“注意技巧”。&lt;br /&gt;
现在我们打入内部，有了自己的人设，&lt;br /&gt;
面临的就是各种各样具体的事情了。&lt;br /&gt;
我们接下来来看一些具体的“术”，&lt;br /&gt;
这一部分实操性比较强。&lt;/p&gt;

&lt;p&gt;比如一个小栗子就是我在讲的时候啊，&lt;br /&gt;
汤总听得都很认真，&lt;br /&gt;
他一边听还一边默默地点头表示认可。（众笑）&lt;br /&gt;
有个说法是在会议室里，&lt;br /&gt;
一个人默默点头是可以增加群体的认同感的，&lt;br /&gt;
俗称就可以叫“托”。&lt;br /&gt;
汤总：我不是，我没有，别瞎说啊！（众笑）&lt;/p&gt;

&lt;h3 id=&#34;逻辑&#34;&gt;逻辑&lt;/h3&gt;

&lt;p&gt;说回正题。&lt;br /&gt;
从我的角度来看，&lt;br /&gt;
跟别人沟通中讲逻辑是很重要的。&lt;br /&gt;
我这个人并不要求别人讲逻辑，&lt;br /&gt;
但我一定要讲逻辑，&lt;br /&gt;
逻辑清晰的话比较容易把事情说清楚，&lt;br /&gt;
各种意义上都会减少误会。&lt;br /&gt;
比如说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;知之为知之&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这点其实是很平常的道理，&lt;br /&gt;
但大家可以观察到很多人是做不到的。&lt;br /&gt;
这点跟上面的空杯心态有一定重合，&lt;br /&gt;
就不讲了。&lt;br /&gt;
跟大家讲一个实用的小技巧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FFC (Fact, Feeling, Compare)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人性的弱点之一是：&lt;br /&gt;
人被表扬就会开心。&lt;br /&gt;
所以我们想影响一个人，&lt;br /&gt;
很好的一个切入点就是去表扬他。&lt;br /&gt;
这个 FFC 原则，&lt;br /&gt;
就是我们表扬别人时可以具体用到的原则。&lt;/p&gt;

&lt;p&gt;比如说今天女朋友给我做了一餐饭，&lt;br /&gt;
我可以这么去说：&lt;br /&gt;
“今天的罗宋汤颜色好鲜艳，闻起来很香！&lt;br /&gt;
（这是 Fact, 事实）&lt;br /&gt;
光是看我都看饿了，我觉得你做饭超厉害的！&lt;br /&gt;
（这是 Feeling, 感受）&lt;br /&gt;
以前我都不会主动吃番茄的，只有你做的我才喜欢吃！&lt;br /&gt;
（这是 Compare, 对比）”&lt;br /&gt;
这么讲完以后，&lt;br /&gt;
女朋友会很开心，&lt;br /&gt;
然后明天我也能喝到她给我做的汤了（众笑）&lt;/p&gt;

&lt;p&gt;这个原则很好记，&lt;br /&gt;
等下的游戏环节我们就会玩“用 FFC 表扬一个队友”，&lt;br /&gt;
大家可以想想。&lt;br /&gt;
一般来说，&lt;br /&gt;
关于表扬别人还有一个说法，&lt;br /&gt;
叫：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;表扬要公开表扬，&lt;br /&gt;
批评最好私下批评。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很简单，&lt;br /&gt;
我今天跟张总一个人说“你是全中国 Python 第一的程序员”（众笑）&lt;br /&gt;
张总就是单份的开心。&lt;br /&gt;
但我今天在大家面前说“张总是全中国 Python 第一的程序员”&lt;br /&gt;
在场有 N 个人，&lt;br /&gt;
张总就会获得 N 份快感（众笑）&lt;br /&gt;
超捧场的张总：我好有快感啊（众狂笑）&lt;/p&gt;

&lt;h3 id=&#34;逆向&#34;&gt;逆向&lt;/h3&gt;

&lt;p&gt;刚才我们讲的是正面的东西。&lt;br /&gt;
有的时候一样东西反过来看又是别样的风景。&lt;br /&gt;
比如我很喜欢的一个作家叫“蔡智恒”，&lt;br /&gt;
他网名叫“痞子蔡”，&lt;br /&gt;
就是写《第一次的亲密接触》的那个人。&lt;br /&gt;
他一本书里讲到过这么一个故事：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;右边的石头&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就说一个旅人在爬山，&lt;br /&gt;
一路上很累，但风景也很好。&lt;br /&gt;
走啊走啊他来到了一个岔路口，&lt;br /&gt;
路的左边是一条一眼望得到底的平坦的路，&lt;br /&gt;
路的右边是一块很难爬上去的石头。&lt;br /&gt;
他这时候想了，&lt;br /&gt;
我是走左边的、风景平常的山路，&lt;br /&gt;
还是试着去爬爬右边的石头呢？&lt;br /&gt;
最后他选择了走平坦的路。&lt;br /&gt;
但他一路上都忍不住想：&lt;br /&gt;
“假如我当初爬过了右边的石头，&lt;br /&gt;
又会是什么样的风景呢？”&lt;/p&gt;

&lt;p&gt;这个套路其实就叫“心结”&lt;br /&gt;
很多影视剧/动漫里面都会用，&lt;br /&gt;
比如男主小时候有一件blabla的什么事情，&lt;br /&gt;
影响了他的一辈子。&lt;/p&gt;

&lt;p&gt;这点对于推进波澜曲折的剧情是很棒啦。&lt;br /&gt;
但我觉得作为活着的一个人，&lt;br /&gt;
根本不要去在意什么右边的石头，&lt;br /&gt;
既然选择了左边的路，&lt;br /&gt;
就一条路走到黑。&lt;/p&gt;

&lt;p&gt;（讲到这里，突然觉得不知道怎么讲下去了）&lt;br /&gt;
呃，我们的分享主题好像是“如何带节奏”对吧，&lt;br /&gt;
咋就被我讲到了个人三观了捏？（众笑）&lt;br /&gt;
不管了，我 PPT 都写好了，继续讲。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;半满杯子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个故事你们大概听过。&lt;br /&gt;
就是一个装了一半水的杯子，&lt;br /&gt;
乐观主义者看了觉得还有一半水呢，&lt;br /&gt;
悲观主义者看了觉得只剩一半水了，&lt;br /&gt;
工程师看了觉得这杯子容积是额定大小的两倍。&lt;/p&gt;

&lt;p&gt;这个经典故事说明的道理也很简单：&lt;br /&gt;
看问题的角度会改变问题。&lt;br /&gt;
我们不会说“当乐观主义者是对的”或者“不能当悲观主义者”，&lt;br /&gt;
假如我们想能站在更高的位置去看事情、做事情，&lt;br /&gt;
我们就得能在不同的角度去观察一件事情。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;站在人群中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个用西方的一套说，&lt;br /&gt;
可能叫“众生平等”。&lt;br /&gt;
不过从我的角度来说，&lt;br /&gt;
就是我们平常思考问题，&lt;br /&gt;
一定一定不能把人分贵贱，&lt;br /&gt;
把人分三六九等。&lt;br /&gt;
因为这会阻碍我们换位思考，&lt;br /&gt;
让我们“逆向”的思考只会在我们“平级”之间流转。&lt;/p&gt;

&lt;p&gt;比如靖哥哥，我觉得他牛逼，&lt;br /&gt;
他讲的我信，我只想跟他交流问题。&lt;br /&gt;
但强哥是产品转来的，&lt;br /&gt;
我觉得他是个菜逼，他说啥我都不信。（众笑）&lt;br /&gt;
例子可能有点夸张了，&lt;br /&gt;
但这样你们一听就会觉得不妥，&lt;br /&gt;
对吧。&lt;/p&gt;

&lt;p&gt;苏轼有一句话，&lt;br /&gt;
叫“吾上可陪玉皇大帝，下可以陪卑田院乞儿（，眼前见天下无一个不好人）”&lt;br /&gt;
这句话我就很喜欢。&lt;/p&gt;

&lt;h2 id=&#34;空杯&#34;&gt;空杯&lt;/h2&gt;

&lt;p&gt;又讲到空杯了，&lt;br /&gt;
这里可以讲一个故事&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;苏格拉底&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个故事比较经典，&lt;br /&gt;
大意是说有人问神谕：&lt;br /&gt;
“全雅典最聪明的人是谁啊？”&lt;br /&gt;
神谕说是苏格拉底。&lt;br /&gt;
苏格拉底听到了这句话以后大吃一惊，&lt;br /&gt;
他说：“不对啊，我觉得我非常无知。”&lt;br /&gt;
最后他发现，&lt;br /&gt;
正是他清楚自己的无知，&lt;br /&gt;
这一点比很多人都要厉害。&lt;/p&gt;

&lt;p&gt;对应自己的弱点，&lt;br /&gt;
还有一种我们经常会遇到的情况是人生的逆境。&lt;br /&gt;
这里有个词，叫“逆商”。&lt;br /&gt;
所谓智商、情商、逆商，&lt;br /&gt;
智商是怎么处理逻辑问题，&lt;br /&gt;
情商是怎么处理人际问题，&lt;br /&gt;
逆商大概就是怎么面对逆境了。&lt;/p&gt;

&lt;p&gt;我们人类没办法在瞬间改变环境，&lt;br /&gt;
所以很多时候面临逆境，&lt;br /&gt;
本质上就是处理我们跟自己的关系。&lt;br /&gt;
湖南人有一句话说得好，&lt;br /&gt;
叫“霸得蛮，耐得烦”，&lt;br /&gt;
大概就是“坚韧不拔”的意思吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;满谦&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;空杯还有一点，&lt;br /&gt;
就是满谦……&lt;br /&gt;
（写文章跟分享的时候差了几周，&lt;br /&gt;
所以本来好像这里才是将上面的例子的…&lt;br /&gt;
不过这并不重要了，过。）&lt;/p&gt;

&lt;h2 id=&#34;不忘初心&#34;&gt;不忘初心&lt;/h2&gt;

&lt;p&gt;收一下，&lt;br /&gt;
我们讲了这么多关于“如何带节奏”的东西，&lt;br /&gt;
假如你回去试着去用的话，&lt;br /&gt;
你会发现一点：&lt;br /&gt;
“最开始你能带节奏的人，都是你身边的人。”&lt;/p&gt;

&lt;p&gt;举个例子，比如何总2016年写过一篇博客，&lt;br /&gt;
里面有一句话，叫“2017年要监督女朋友培养正确价值观”，&lt;br /&gt;
这就说明他是很能带他女朋友节奏的。&lt;/p&gt;

&lt;p&gt;除了伴侣之间，父母子女之间也很容易带节奏。&lt;br /&gt;
再举个例子，我经常会跟女朋友一起看各种访谈之类的，&lt;br /&gt;
有的时候里面的人就会说：&lt;br /&gt;
“我现在怎么怎么样，&lt;br /&gt;
是因为小时候我父母怎么怎么样，&lt;br /&gt;
给我造成了永久的伤害。”&lt;/p&gt;

&lt;p&gt;所以假如你有带节奏的能力，&lt;br /&gt;
你一定要记住两句话：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;别忘了你要带什么节奏&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;别忘了你自己是什么样的人&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如回到最开始，&lt;br /&gt;
我们在玩网络游戏，&lt;br /&gt;
我们加入了一个很强大的组织，&lt;br /&gt;
我们的目的是什么？&lt;br /&gt;
没错，我们的目的是想在团里排进主力阵容，&lt;br /&gt;
甚至是当团长。&lt;/p&gt;

&lt;p&gt;这就是我们最开始的“初心”。&lt;/p&gt;

&lt;h1 id=&#34;实践&#34;&gt;实践&lt;/h1&gt;

&lt;p&gt;道理讲了很多，&lt;br /&gt;
剩下的都是实际去试了。&lt;/p&gt;

&lt;p&gt;The Zen of Python 里有一句话，&lt;br /&gt;
最后送给大家：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Now is better than never.
&amp;gt;
&amp;gt; --- The Zen of Python, by Tim Peters&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（完）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文 slides 地址为 liriansu.com/slides/influence&lt;/p&gt;

&lt;p&gt;所有内容为各种杂谈经作者二次消化完成&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>破案·Sentry迷云</title>
      <link>https://liriansu.com/posts/2018-03-22-solve-a-sentry-case/</link>
      <pubDate>Thu, 22 Mar 2018 20:14:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-03-22-solve-a-sentry-case/</guid>
      <description>&lt;p&gt;作为程序员，&lt;br /&gt;
日常开发中经常会出现一些“不科学”的事情，&lt;br /&gt;
这种时候也是“破案”的好时机：&lt;br /&gt;
让我们来用科学，解释不科学。&lt;/p&gt;

&lt;h2 id=&#34;起&#34;&gt;起&lt;/h2&gt;

&lt;p&gt;又是平凡的一天，&lt;br /&gt;
坐成一排的程序员们正在噼里啪啦地写代码。&lt;br /&gt;
不知不觉间 deadline 逼近了，&lt;br /&gt;
想到这点，&lt;br /&gt;
大家不禁紧张地噼里啪啦地写代码。&lt;/p&gt;

&lt;p&gt;突然，&lt;a href=&#34;https://github.com/MIA503&#34;&gt;旭总&lt;/a&gt;眉头一皱，发现事情并不简单：&lt;br /&gt;
“我总感觉这几天 Sentry 的响应速度变慢了。”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sentry, 英文单词直译是哨兵（漫威宇宙里最强者之一）。&lt;br /&gt;
也是一个非常好用的异常监控/收集/管理软件，&lt;br /&gt;
官网可以参见 sentry.io&lt;/p&gt;

&lt;p&gt;我司用 Sentry 做了各端的错误收集，&lt;br /&gt;
大家养成了一出错先看 Sentry 堆栈分锅的习惯。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是紫月就例行公事地看了一眼 Sentry Stats,&lt;br /&gt;
紫月觉得事情很简单：&lt;br /&gt;
“拉总你看看你的推送啊！”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://lxkaka.wang/&#34;&gt;拉总&lt;/a&gt;，绰号来源于 ID: lxkaka.&lt;br /&gt;
因为跟我们支付供应商拉卡拉 (lakala) 巨像而得名。&lt;/p&gt;

&lt;p&gt;拉总在我司做后端，&lt;br /&gt;
负责过会员数据、平台监控、推送系统的实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/cases/sentry_stats.jpg&#34; alt=&#34;stats&#34; /&gt;&lt;/p&gt;

&lt;p&gt;跑过来看着紫月屏幕里 Sentry Stats 的数据，&lt;br /&gt;
拉总感到一脸懵逼：&lt;br /&gt;
“不应该啊，推送系统怎么能报这么多错呢？”&lt;/p&gt;

&lt;h2 id=&#34;承&#34;&gt;承&lt;/h2&gt;

&lt;p&gt;回到座位的拉总研究了一会儿，&lt;br /&gt;
惊呼道：&lt;br /&gt;
“我们是不是换过测试环境的 MongoDB 地址啊？”&lt;/p&gt;

&lt;p&gt;旭总一脸鄙视：&lt;br /&gt;
“没换，要换也是两个月以前换的。”&lt;/p&gt;

&lt;p&gt;紫月笑着调戏拉总：&lt;br /&gt;
“不会你的代码跪了两个月才发现吧？”&lt;/p&gt;

&lt;p&gt;拉总赶快说：&lt;br /&gt;
“不可能不可能，我再看看。”&lt;/p&gt;

&lt;p&gt;过了十分钟，&lt;br /&gt;
拉总二脸懵逼地站起来了，&lt;br /&gt;
十分迷惑地 Pub 了一句：&lt;br /&gt;
“这不科学啊，测试环境是好的啊。”&lt;/p&gt;

&lt;p&gt;于是大家凑在一起，&lt;br /&gt;
整理出了目前几个已知事实：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sentry 不停地在接受测试环境的推送系统 (zaihui-push) 的报错。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;报错内容是 MongoDB 访问地址不对。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;两个月以前我们换过测试环境的 MongoDB 。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;但是代码级别上，测试环境用的 MongoDB 配置是正确的。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是说：&lt;br /&gt;
我们以为我们代码是正确的，&lt;br /&gt;
但是监控观察到代码一直在报错！&lt;/p&gt;

&lt;p&gt;这很 (bu) 神 (ke) 奇 (xue) 。&lt;/p&gt;

&lt;p&gt;于是我们决定破案一下。&lt;/p&gt;

&lt;p&gt;首先，拉总检查了一下测试环境的正确性。&lt;br /&gt;
拉总把推送系统的 docker 都关了，&lt;br /&gt;
但 Sentry 还是一直收到报错，&lt;br /&gt;
这说明&lt;strong&gt;报错源不是测试环境&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hulucc&#34;&gt;俊儒&lt;/a&gt;指出 Sentry 说不定可以看到源 IP，&lt;br /&gt;
于是紫月尝试观测了一下，&lt;br /&gt;
IP 是没观测到，但是观测到了 Server Name。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/cases/sentry_tags.jpg&#34; alt=&#34;tags&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ea064a694da5&lt;/code&gt; 这个12位的16进制数字是典型的 Docker Container ID ！&lt;/p&gt;

&lt;p&gt;所以大家马上想到了暴力的破解方法：&lt;br /&gt;
把内网的所有 Docker Container ID 都找出来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我司的测试/生产环境都在内网环境中，&lt;br /&gt;
只能通过入口机器 (gateway) ssh 到机器上。&lt;br /&gt;
为了方便运维，&lt;br /&gt;
内网机器都在 ssh config 里配上了名称。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是紫月在入口机上执行了一段 bash 脚本，&lt;br /&gt;
把所有内网上的 Docker Container ID 都找了出来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat ~/.ssh/config | grep -G &amp;#39;^Host&amp;#39; | cut -d&amp;#39; &amp;#39; -f2 | xargs -I{} ssh {} &amp;#34;docker ps&amp;#34; &amp;gt;&amp;gt; dockers_container.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令跑完以后，&lt;br /&gt;
我们打开输出文件，&lt;br /&gt;
激动地发现：&lt;br /&gt;
&lt;strong&gt;报错源不在内网里&lt;/strong&gt;！&lt;/p&gt;

&lt;h2 id=&#34;转&#34;&gt;转&lt;/h2&gt;

&lt;p&gt;一下子事情僵住了，&lt;br /&gt;
大家的头绪离散到了好几个方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;能不能模拟 MongoDB 的地址，然后抓包请求？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;能不能在 Sentry 信息中翻到 IP 地址？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;能不能通过 Docker Container ID 找到对应的机器？&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经过思考以后，&lt;br /&gt;
大家总结出破案的关键在于整个网络调用：&lt;br /&gt;
我们只要捋一遍服务器的网络关系、调用路径，&lt;br /&gt;
就可以找到破案点！&lt;/p&gt;

&lt;p&gt;问题一下子就定位到了内部系统的 Load Balancer 上。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我司隔离了生产环境和内部系统（比如 GitLab/Sentry 等）&lt;br /&gt;
类似于生产环境的入口机器 (gateway)&lt;br /&gt;
我们内部系统的流量入口也是我们用 nginx 自己搭的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是我们登上了内部系统的 nginx,&lt;br /&gt;
找到了 nginx access log,&lt;br /&gt;
整个文件大概有10万行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
42141 59.78.3.25 - - [22/Mar/2018:22:09:07 +0800] &amp;#34;POST /api/450/store/ HTTP/1.1&amp;#34; 200 41 &amp;#34;-&amp;#34; &amp;#34;raven-python/6.3.0&amp;#34; &amp;#34;-&amp;#34;
42142 59.78.3.20 - - [22/Mar/2018:22:09:07 +0800] &amp;#34;POST /api/355/store/?sentry_version=7&amp;amp;sentry_client=raven-js%2F3.22.3&amp;amp; HTTP/1.1&amp;#34; 200 41 &amp;#34;Mozilla/5.0 (Linux; Android 8.0; DUK-AL20 Build/HUAWEIDUK-AL20; wv) Mobile Safari/537.36 MicroMessenger/6.6.5.1280&amp;#34; &amp;#34;-&amp;#34;
42143 59.78.3.24 - - [22/Mar/2018:09:33:08 +0800] &amp;#34;POST /api/452/store/ HTTP/1.1&amp;#34; 400 62 &amp;#34;-&amp;#34; &amp;#34;SharpRaven/2.2.0.0&amp;#34; &amp;#34;-&amp;#34;
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题又来了：&lt;br /&gt;
要怎么在这数万行形态各异的 log 中，&lt;br /&gt;
找到哪一条是推送系统的报错，&lt;br /&gt;
从而找到报错源的 IP 呢？&lt;/p&gt;

&lt;p&gt;可以通过 Sentry Endpoint,&lt;br /&gt;
也可以通过 Raven 的版本。&lt;br /&gt;
比如上述 log 中的三条信息，&lt;br /&gt;
分别是 Python/JavaScript/C# 向 Sentry 发送的错误信息。&lt;/p&gt;

&lt;p&gt;推送系统用的包是 [raven==6.3.0][ravern],&lt;br /&gt;
于是我们就从中晒出来了真正的 IP：&lt;br /&gt;
59.78.3.25 ！&lt;br /&gt;
（本条 IP 已打码）&lt;/p&gt;

&lt;p&gt;大家兴奋地都站了起来。&lt;br /&gt;
因为不是自己推送系统环境没配对之类的锅，&lt;br /&gt;
拉总也如释重负/火上浇油地喊道：&lt;br /&gt;
“破案了破案了！快看看这个IP是谁的！”&lt;/p&gt;

&lt;h2 id=&#34;合&#34;&gt;合&lt;/h2&gt;

&lt;p&gt;上网定位了一下，&lt;br /&gt;
发现这个 IP 是上海市的，&lt;br /&gt;
俊儒怀疑道：&lt;br /&gt;
“这怕不是就是我司办公室的流量出口？”&lt;/p&gt;

&lt;p&gt;于是我们查了一下我们现在的出口 IP：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; curl -s httpbin.org/ip
{
  &amp;#34;origin&amp;#34;: &amp;#34;59.78.3.25&amp;#34;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;顿时空气有点寂静，&lt;br /&gt;
因为目前的事实是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;拉总确认过他开发的推送系统没有报错。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大家追溯下来，报错源就在我们办公室。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;报错源藏在某个人电脑的 docker 里面。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么问题来了：&lt;br /&gt;
究竟哪个人会 clone 推送系统的代码，&lt;br /&gt;
并且在自己的电脑上用 docker 跑起来呢？&lt;br /&gt;
那就只可能是开发者&lt;strong&gt;拉总本人&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;大家围到了紧张的拉总的身后，&lt;br /&gt;
看着他敲下了 &lt;code&gt;docker ps&lt;/code&gt; 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; docker ps
CONTAINER ID        IMAGE           ...
ea064a694da5        zaihui-push     ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;破案了！&lt;/p&gt;

&lt;p&gt;拉总想了想，猜测说：&lt;br /&gt;
他大概是几天前本机调试了一下推送，&lt;br /&gt;
忘了关了。&lt;/p&gt;

&lt;p&gt;那么真的如他所说是几天前吗？&lt;br /&gt;
大家打开了 Sentry：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/cases/sentry_frequency.jpg&#34; alt=&#34;frequency&#34; /&gt;&lt;/p&gt;

&lt;p&gt;数据无情地还原了真相：&lt;br /&gt;
两个月以前就开始报错了，&lt;br /&gt;
也就是按旭总的记忆，&lt;br /&gt;
从我们换了测试环境的 MongoDB 开始。&lt;/p&gt;

&lt;p&gt;看着最后原来是拉总自己电脑搞的乌龙，&lt;br /&gt;
大家也是爆笑了一圈，&lt;br /&gt;
旭总顺带还调侃拉总：&lt;br /&gt;
“你的 Mac 电脑也是牛逼啊，开着几个 docker 都不卡的。”&lt;/p&gt;

&lt;p&gt;后来看着 Sentry 的错误频率图，&lt;br /&gt;
大家又疯狂地笑了一圈拉总：&lt;br /&gt;
“拉总，这个 Sentry 报错早十晚八，做五休二，&lt;br /&gt;
可真能反映你的上班时间~”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/cases/sentry_hours.jpg&#34; alt=&#34;hours&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/cases/sentry_weeks.jpg&#34; alt=&#34;weeks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;事情的最后，&lt;br /&gt;
紫月从柳总桌子上翻出了门把手的“拉”和“推”两个字，&lt;br /&gt;
放在了拉总的桌子上：&lt;br /&gt;
“拉总，好吧，经此一役，&lt;br /&gt;
你也是我们的推总了。”&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>链家小哥问我：听说搞IT的培训三个月就可以月入上万，是真的吗？</title>
      <link>https://liriansu.com/posts/2018-03-12-is-it-possible-to-be-rich-easily-by-programming/</link>
      <pubDate>Mon, 12 Mar 2018 23:22:10 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-03-12-is-it-possible-to-be-rich-easily-by-programming/</guid>
      <description>&lt;p&gt;我想了想，&lt;br /&gt;
说：&lt;br /&gt;
是的。&lt;/p&gt;

&lt;p&gt;（一）&lt;/p&gt;

&lt;p&gt;前几天跟女朋友去租房子，&lt;br /&gt;
因为我们一对情侣租的是两居室，&lt;br /&gt;
链家小哥自然就问一居室的考不考虑。&lt;/p&gt;

&lt;p&gt;本着知道业务需求，&lt;br /&gt;
才能实现的更好的原则，&lt;br /&gt;
我就跟他说了下我是程序员，&lt;br /&gt;
有的时候晚上想工作到比较晚，&lt;br /&gt;
作息上会跟女朋友错开，&lt;br /&gt;
所以会住两居室的原因。&lt;/p&gt;

&lt;p&gt;小哥听说我是程序员以后很好奇，&lt;br /&gt;
问：“你们程序员是干什么的啊？”&lt;/p&gt;

&lt;p&gt;我想了想，跟他说：&lt;br /&gt;
“比如你们上传房间照片用的网站，&lt;br /&gt;
就是你们程序员开发的。&lt;br /&gt;
比如你手机上的App时不时要更新，&lt;br /&gt;
这些也是程序员做的。&lt;br /&gt;
比如微信、王者荣耀、或者说你手机系统，&lt;br /&gt;
都是程序员做的。”&lt;/p&gt;

&lt;p&gt;小哥更好奇了：&lt;br /&gt;
“那你们这算是搞IT的咯。&lt;br /&gt;
我听我朋友说，&lt;br /&gt;
你们搞IT的，&lt;br /&gt;
培训三个月，&lt;br /&gt;
就可以找到月收入一万的工作，&lt;br /&gt;
是真的吗？”&lt;/p&gt;

&lt;p&gt;（二）&lt;/p&gt;

&lt;p&gt;小哥看我一脸懵逼的样子，&lt;br /&gt;
他就跟我说：&lt;br /&gt;
“年后我接待的客户全部都是搞IT的。&lt;br /&gt;
前阵子有个湖南那边的应届生来上海，&lt;br /&gt;
两个人租了九千块钱的房子。&lt;br /&gt;
刚过完年的时候，&lt;br /&gt;
也是有一对情侣，&lt;br /&gt;
男的比女的大不少，&lt;br /&gt;
也是搞IT的，&lt;br /&gt;
两个人也是租了七、八千。&lt;br /&gt;
前阵子还有一个客户，&lt;br /&gt;
一个人租了五千，&lt;br /&gt;
刚租了一个月，&lt;br /&gt;
（押金都不要了）&lt;br /&gt;
就去了杭州阿里巴巴那边上班…”&lt;/p&gt;

&lt;p&gt;我：“呃。。。”&lt;br /&gt;
=_=&lt;/p&gt;

&lt;p&gt;我想了想，&lt;br /&gt;
看小哥这么好奇的样子，&lt;br /&gt;
也出于我跟小哥交换行业知识，&lt;br /&gt;
小哥说不定也会跟我说怎么租房子便宜的私心，&lt;br /&gt;
我认真地解释道：&lt;br /&gt;
“你说的，培训三个月，&lt;br /&gt;
月入上万是肯定有几率存在的情况。&lt;/p&gt;

&lt;p&gt;我们这行可能会被叫做“搞IT的”，&lt;br /&gt;
这其实是一个很大的职业范围，&lt;br /&gt;
这里会有各种各样的情况。&lt;/p&gt;

&lt;p&gt;比如可能是有些有钱的企业在搞信息化，&lt;br /&gt;
这样的企业缺乏的不是技术上多么专业的人才，&lt;br /&gt;
而是各方面都很优秀的人。&lt;br /&gt;
有可能你本来跟人沟通啊、合作意识啊、业务能力啊都很不错，&lt;br /&gt;
然后你去认真参加了一个培训，&lt;br /&gt;
你获得了“搞IT”这项技能，&lt;br /&gt;
就像参加了英语培训、参加了挖掘机培训一个道理。”&lt;/p&gt;

&lt;p&gt;小哥想了想，&lt;br /&gt;
他说是这样的。&lt;/p&gt;

&lt;p&gt;（三）&lt;/p&gt;

&lt;p&gt;小哥说链家正在改革，&lt;br /&gt;
所有人都是无底薪，&lt;br /&gt;
单纯靠提成维持生活。&lt;/p&gt;

&lt;p&gt;“你知道吗，&lt;br /&gt;
我16年刚来上海的时候，&lt;br /&gt;
只要穿个西装打个领带，&lt;br /&gt;
站在街上就会有人问我买房…”&lt;br /&gt;
小哥怀念当年的情景，说道：&lt;br /&gt;
“我们很多同事，&lt;br /&gt;
高中没毕业，&lt;br /&gt;
08年、10年就做这行了。&lt;br /&gt;
早就在老家买房买车，&lt;br /&gt;
现在也在店里干活。”&lt;/p&gt;

&lt;p&gt;对口相声讲究一人逗一人捧，&lt;br /&gt;
于是我感慨道：“这么厉害的吗。”&lt;/p&gt;

&lt;p&gt;小哥也感慨道：&lt;br /&gt;
“是啊。&lt;br /&gt;
不过我们现在每天晚上都睡不着觉，&lt;br /&gt;
每天一起来就只有出账，&lt;br /&gt;
没有入账，&lt;br /&gt;
你懂这种感觉吗？&lt;br /&gt;
我就想了解下互联网行业怎么样，&lt;br /&gt;
有机会的话回老家做。&lt;br /&gt;
现在什么最火？&lt;br /&gt;
就是互联网。&lt;br /&gt;
现在这个时代就是互联网加的时代。”&lt;/p&gt;

&lt;p&gt;我被小哥振聋发聩、洞悉行业、实事求是的发言折服了，&lt;br /&gt;
不知道说啥能接上话题。&lt;/p&gt;

&lt;p&gt;（四）&lt;/p&gt;

&lt;p&gt;不知道说啥的时候就切回主题。&lt;br /&gt;
主题是啥？&lt;br /&gt;
主题是培训。&lt;br /&gt;
好，那我们继续跟小哥说培训的话题。&lt;/p&gt;

&lt;p&gt;知道了小哥其实有点认真考虑培训的话题，&lt;br /&gt;
我想了想，&lt;br /&gt;
给他又讲了下我知道的内容：&lt;/p&gt;

&lt;p&gt;“唔，我把我知道的都跟你说说吧，&lt;br /&gt;
不过因为我自己不是做培训的，&lt;br /&gt;
所以我说的可能都不对。&lt;/p&gt;

&lt;p&gt;首先，认真参加IT培训肯定是能找到工作的。&lt;br /&gt;
就像你说的，现在是‘互联网+’的时代，&lt;br /&gt;
这个社会对IT人才的缺口很大，&lt;br /&gt;
比如刚才看到的电子锁，&lt;br /&gt;
比如这两年出现的共享单车，&lt;br /&gt;
比如人人都在用的移动支付，&lt;br /&gt;
这里都是自动化，都需要工程师。&lt;/p&gt;

&lt;p&gt;其次，找到什么样的工作不一定。&lt;br /&gt;
因为‘搞IT的’做的事情其实很广。&lt;br /&gt;
这个我具体阐述不来，&lt;br /&gt;
但你要知道很多时候‘搞IT’面对的是机器，&lt;br /&gt;
是传统意义上很枯燥的工作。&lt;br /&gt;
不适应的话，很多人都会干的很痛苦。&lt;/p&gt;

&lt;p&gt;最后，培训本身来说，效果是因人而异的。&lt;br /&gt;
有些人可能培训了几个月，&lt;br /&gt;
他就学到了很多，&lt;br /&gt;
打开了一扇门。&lt;br /&gt;
但有些人可能培训了几个月，&lt;br /&gt;
他唯一学到的，&lt;br /&gt;
就是自己不适合‘搞IT’。&lt;/p&gt;

&lt;p&gt;所以说，因为不了解你的具体情况，&lt;br /&gt;
这件事情我没办法给你具体的帮助。”&lt;/p&gt;

&lt;p&gt;小哥听完以后，&lt;br /&gt;
陷入了信息量带来的卡顿中。&lt;br /&gt;
我又想了想，&lt;br /&gt;
给了个实操上的建议：&lt;/p&gt;

&lt;p&gt;“讲道理你想了解这方面的东西的话，&lt;br /&gt;
我建议是这样的。&lt;br /&gt;
你问问看你老家那边，&lt;br /&gt;
或者有没有认识的亲近的IT朋友，&lt;br /&gt;
他们肯定更了解你、更了解你老家的具体情况，&lt;br /&gt;
他们给的建议，&lt;br /&gt;
肯定更能执行下来。&lt;br /&gt;
”&lt;/p&gt;

&lt;p&gt;（五）&lt;/p&gt;

&lt;p&gt;跟链家小哥聊了一路以后，&lt;br /&gt;
我回家也不禁一屁股陷进了“行业选择”这个话题里。&lt;/p&gt;

&lt;p&gt;我想我自己选择行业的那一时刻，&lt;br /&gt;
发生在我爸给我填志愿的那一刻。&lt;/p&gt;

&lt;p&gt;当时高三保送生考试去考清华，&lt;br /&gt;
考前要填三个志愿专业。&lt;br /&gt;
填志愿的时候特开心，&lt;br /&gt;
就像已经考上了一样。&lt;br /&gt;
当时很喜欢看讲建筑的《筑梦天下》和讲汽车的《Top Gear》，&lt;br /&gt;
清华的一二三志愿填的就是建筑学、土木工程、汽车工程。&lt;/p&gt;

&lt;p&gt;后来考华约，我懒得又填一遍交大的志愿，&lt;br /&gt;
就让我爸帮我代劳。&lt;br /&gt;
我爸看了看表格，跟我说：“交大可以填五个志愿诶。”&lt;br /&gt;
应该是正在玩游戏的我说：“你看着填就行了。”&lt;br /&gt;
于是我爸对应的就给我填了建筑、土木、汽车工程、计算机科学、软件工程。&lt;br /&gt;
我看了看五个志愿，跟我爸说：&lt;br /&gt;
“我感觉中学已经写了六年程序了，&lt;br /&gt;
我以后大概不会想写程序的。”&lt;br /&gt;
就把第四志愿的计算机科学换成了英语系。&lt;/p&gt;

&lt;p&gt;结果后来交大分专业的老师，&lt;br /&gt;
可能看我是学OI的，&lt;br /&gt;
就直接给我分到了第五志愿：软件工程了。&lt;br /&gt;
到今天我一直很感谢这位老师没有纵容我的小任性。&lt;/p&gt;

&lt;p&gt;有的时候我会跟队友感慨：&lt;br /&gt;
其实科班生的几年学习，&lt;br /&gt;
最大的作用是让你知道自己喜不喜欢这个行业。&lt;br /&gt;
幸运的同学就会明确这一点，&lt;br /&gt;
并且在自己大学的行业上一直做下去；&lt;br /&gt;
也有的同学学完四年，&lt;br /&gt;
就知道自己并不喜欢这个专业/行业，&lt;br /&gt;
就会立刻转行。&lt;/p&gt;

&lt;p&gt;就像链家小哥问的那样：&lt;/p&gt;

&lt;p&gt;“听说搞IT的培训三个月就月入上万，&lt;br /&gt;
是真的吗？”&lt;/p&gt;

&lt;p&gt;假如再问我一次，我会跟他说：&lt;/p&gt;

&lt;p&gt;“可以是真的。”&lt;/p&gt;

&lt;p&gt;假如再要我多说一句的话，我会说：&lt;/p&gt;

&lt;p&gt;“只要你坚持在你喜欢的行业工作下去，&lt;br /&gt;
你可能会遇到困难、遭受挫折，&lt;br /&gt;
但你终有一天会因为自己的勤奋、勇敢而获得更好的生活。”&lt;/p&gt;

&lt;p&gt;希望小哥能找到他喜欢的事业，&lt;br /&gt;
并且为之奉献一生。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的好友柳宁宁</title>
      <link>https://liriansu.com/posts/2018-03-03-my-friend-ldsink/</link>
      <pubDate>Sat, 03 Mar 2018 20:39:48 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-03-03-my-friend-ldsink/</guid>
      <description>&lt;p&gt;柳宁宁真名其实不叫柳宁宁，&lt;br /&gt;
我帮他解释真名都是某个朝代的某个职位。&lt;br /&gt;
但柳宁宁的快递名都叫“柳宁宁”，&lt;br /&gt;
以致于我的快递名叫“柳宁宁的同桌”。&lt;/p&gt;

&lt;p&gt;柳宁宁和我是大学室友，&lt;br /&gt;
后来是工作伙伴。&lt;br /&gt;
因为在我司互膜文化盛行，&lt;br /&gt;
基本上互称不是X总X神就是X老板，&lt;br /&gt;
所以后来我称呼柳宁宁都是叫柳总。&lt;br /&gt;
硬生生地把大学几年的称呼都扭过来了，&lt;br /&gt;
现在我叫柳总真名反而不太适应。&lt;/p&gt;

&lt;p&gt;柳总真名不叫柳宁宁。&lt;br /&gt;
不过他很喜欢柳这个姓，&lt;br /&gt;
于是有时需要录测试数据，&lt;br /&gt;
他不是录“蜜汁服务员柳宁宁”，&lt;br /&gt;
就是录“柳纯”。&lt;/p&gt;

&lt;p&gt;柳总对隐私安全很重视。&lt;br /&gt;
柳总有一段时间把他所有不玩的账号都注销掉了，&lt;br /&gt;
但是有些网站没有提供注销功能（比如新浪微博），&lt;br /&gt;
他就很烦。&lt;br /&gt;
之前我在知乎上写文章经常会提到柳总的真名，&lt;br /&gt;
他的队友发现以后就吐槽了一波柳总，&lt;br /&gt;
于是柳总就拜托我把文章里的真名换成了化名。&lt;br /&gt;
我有些换成了柳宁宁，&lt;br /&gt;
有些换成了柳纯，&lt;br /&gt;
有些换成了ldsink。&lt;br /&gt;
后来柳总盯着搜索出来的五六篇文章，&lt;br /&gt;
感慨道：“这么多文章，简直像是女朋友…”&lt;/p&gt;

&lt;p&gt;柳总的ID是ldsink。&lt;br /&gt;
GitHub/ldsink或者是ldsink.com都是柳总。&lt;br /&gt;
柳总说这个名字是 LinuxDeepin Sink 的缩写，&lt;br /&gt;
以及 Deepin 是一款很棒的 Linux 发行版，&lt;br /&gt;
Sink对应他的名字。&lt;br /&gt;
果然柳总是 Deepin 的真爱。&lt;/p&gt;

&lt;p&gt;柳总现在基本只用Deepin。&lt;br /&gt;
（除了打dota2的时候）&lt;br /&gt;
我司程序员标配Mac电脑，&lt;br /&gt;
但只有8GB的默认内存和IOS的默认系统有时就不那么方便。&lt;br /&gt;
在柳总建议下和预算允许的范围内，&lt;br /&gt;
我换了一个神舟电脑+俩16G内存条，&lt;br /&gt;
他换了一个戴尔本子+俩8G内存条。&lt;br /&gt;
后来我的神舟天天蓝屏，&lt;br /&gt;
柳总嘿嘿一笑：“我猜是内存的原因，不如我们换一下”。&lt;br /&gt;
换了以后用着俩8G内存条神舟电脑的我果然不蓝屏了。&lt;br /&gt;
围观了事件全过程的张总惊呼：&lt;br /&gt;
“这就是柳总的内存转移之术！”&lt;/p&gt;

&lt;p&gt;柳总是一个ACG御宅。&lt;br /&gt;
虽然广义上的说法可以介绍说柳总是动漫宅，&lt;br /&gt;
但其实我觉得他算是ACG Otaku，&lt;br /&gt;
也就是“在动画、漫画、游戏界都很沉迷的御宅族”的说法。&lt;br /&gt;
去年（17年）柳总发起了一波《刀剑神域：序列之争》观影活动，&lt;br /&gt;
同时表露了他作为松岗爱衣催婚协会会员的激动心情。&lt;br /&gt;
大学时期有一阵他手机铃声是石头门的OP《Hacking to the Gate》，&lt;br /&gt;
短信通知铃声是香菜的嘟嘟噜，&lt;br /&gt;
于是我总是瞅着他忘了开静音的上课时间戳他微信消息。&lt;/p&gt;

&lt;p&gt;柳总是一个萝莉控。&lt;br /&gt;
他大概很吃萝莉音，&lt;br /&gt;
大学夜聊的时候，&lt;br /&gt;
讲到“你最看重女生身上什么特质”这个话题时，&lt;br /&gt;
柳总曾顺带讲过声音是很重要的特质：&lt;br /&gt;
“好的脸蛋总会衰老，&lt;br /&gt;
好的性格也许会变，&lt;br /&gt;
但是好的声音永远都是这么好听呀~&lt;br /&gt;
你看那些声优都是怪物~”&lt;/p&gt;

&lt;p&gt;柳总是OI保送的交大。&lt;br /&gt;
柳总是雅礼中学毕业的，&lt;br /&gt;
我以前也到长郡中学读过一阵书，&lt;br /&gt;
有的时候就会聊到以前保送以后的放浪生活。&lt;br /&gt;
柳总说他们那个时候会集体去网吧，&lt;br /&gt;
打野的打野，打中路的打中路，好不快活。&lt;/p&gt;

&lt;p&gt;柳总打dota，本名是先知。&lt;br /&gt;
读大学认识了室友以后第一件事就是互相报兴趣爱好，&lt;br /&gt;
柳总、郁翔和我都打dota，&lt;br /&gt;
小赖也有一阵被我们带的打起了dota。&lt;br /&gt;
柳总的本名是先知，&lt;br /&gt;
擅长的技巧是高台打野，&lt;br /&gt;
然后飞到中路gank影魔，&lt;br /&gt;
或者是出了大根以后电影魔，&lt;br /&gt;
或者是出了资源以后沉默影魔。&lt;br /&gt;
在11平台打天梯那阵，&lt;br /&gt;
在我们的分工之下，&lt;br /&gt;
柳总还用起了聊天流，&lt;br /&gt;
一边高台打野，&lt;br /&gt;
一边跟敌方影魔聊人生。&lt;/p&gt;

&lt;p&gt;柳总有不少关系很铁的朋友。&lt;br /&gt;
以前大学的时候分分钟就可以靠柳总拉起五人黑，&lt;br /&gt;
（不保证黑店质量）。&lt;br /&gt;
有一次我们宿舍三人再加一个柳总好友四排，&lt;br /&gt;
一把游戏输了以后，&lt;br /&gt;
我感慨道“柳总你这朋友是有点菜啊”，&lt;br /&gt;
然后一看游戏的得分面板：&lt;br /&gt;
该玩家（柳总朋友）蓝猫英雄评分1分（正常分数是1000~3000分），&lt;br /&gt;
本场比赛-0分。&lt;br /&gt;
郁翔：-_-&lt;br /&gt;
我：=_=&lt;br /&gt;
柳总：+_+&lt;br /&gt;
后来我们也常常拉他一起开黑，&lt;br /&gt;
然后在“赢一场就睡”的flag下玩了一晚上。&lt;/p&gt;

&lt;p&gt;柳总十分愿意分享他的知识。&lt;br /&gt;
大学夜聊的时候，&lt;br /&gt;
讲到“要怎么避孕”这个话题时，&lt;br /&gt;
因为郁翔和小赖都缺乏相关安全知识，&lt;br /&gt;
于是柳总兴致勃勃地给大家讲解了一波“安全期与避孕药”，&lt;br /&gt;
后来我们还拆了一个六盒装的杜蕾斯，&lt;br /&gt;
用了两个装些水玩了一下，&lt;br /&gt;
最后四个每人分了一个放抽屉里。&lt;br /&gt;
想着第二天阿姨清垃圾，&lt;br /&gt;
看到男生宿舍里突然出现的用过的杜蕾斯…&lt;br /&gt;
大家纷纷没心没肺地笑了起来…&lt;br /&gt;
毕业的时候宿舍四人清理抽屉，&lt;br /&gt;
都发现几年的一个过期杜蕾斯…&lt;/p&gt;

&lt;p&gt;柳总还很有销售的天赋。&lt;br /&gt;
现在办公室里很多队友拿的是小米手机，&lt;br /&gt;
用的是小米插头，&lt;br /&gt;
测体温的是iHealth体温计，&lt;br /&gt;
都是拜柳总安利所赐。&lt;br /&gt;
柳总安利一样东西的手法异常纯熟：&lt;br /&gt;
介绍产品：“这个XX就可以买，功能有XX，是XX出的，解决了XX问题…”&lt;br /&gt;
打压竞品：“那个XX特别贵，没有XX功能，你看XX用的效果根本不好…”&lt;br /&gt;
瞬间到货：“我昨天刚买了这个XX，你要不要，你要的话我这个就给你…”&lt;br /&gt;
货款两清：“你扫我的付款码就好了，你看，再惠茶餐厅，多方便（笑眯眯）…”&lt;/p&gt;

&lt;p&gt;柳总是金牛座的，对钱很有概念。&lt;br /&gt;
虽然柳总应该不太信星座。&lt;br /&gt;
柳总大学的时候就开始炒股了，&lt;br /&gt;
选课的时候还跟水哥发起过一波《证券投资学》的选修。&lt;br /&gt;
柳总对信用卡也颇有研究，&lt;br /&gt;
去年成功拉了好几个刷卡送星巴克的小伙伴入坑。&lt;br /&gt;
以至于后来我司做支付的时候，&lt;br /&gt;
大家都觉得这功能应该归属于柳总，&lt;br /&gt;
后来“代金券能不能叠加”这个月经锅也就自然而然地被柳总接下了。&lt;/p&gt;

&lt;p&gt;靖哥哥只服柳总。&lt;br /&gt;
（语文老师说要有侧面描写，&lt;br /&gt;
想了想，就拿靖哥哥当靶子吧。）&lt;br /&gt;
靖哥哥是我司前端大佬，&lt;br /&gt;
不仅负责写一些JS文件（棒读），&lt;br /&gt;
还要负责前端整套服务器的搭建。&lt;br /&gt;
因为本身是大佬，&lt;br /&gt;
所以靖哥哥一直很屌，&lt;br /&gt;
除了跟柳总交流的时候。&lt;br /&gt;
每次靖哥哥都是鬼鬼祟祟地从走道走过来，&lt;br /&gt;
然后问柳总：“大佬，小弟问个问题，blabla…”&lt;br /&gt;
（不过每次在支付相关的问题上，&lt;br /&gt;
他们两个互怼的都很凶就是了）&lt;/p&gt;

&lt;p&gt;柳总难以忍受落后的技术。&lt;br /&gt;
在之前的&lt;a href=&#34;https://liriansu.com/py2-to-py3&#34;&gt;《我们是怎么升级到Python3的》&lt;/a&gt;一文中就讲过，&lt;br /&gt;
柳总充当了升级Python3整件事情的推动者，&lt;br /&gt;
把分锅、背锅以及一些大家不想做的锅相关的事情都做了。&lt;br /&gt;
发现了Git的Commit可以签名以后，&lt;br /&gt;
柳总又很开心地把他自己的Commit都签名了一波，&lt;br /&gt;
看着GitHub/GitLab上绿绿的认证标签，&lt;br /&gt;
柳总很是开心。&lt;/p&gt;

&lt;p&gt;柳总其实是一个很内敛的人。&lt;br /&gt;
我想他大概会喜欢“木秀于林，风必摧之；堆出于岸，流必湍之；行高于人，众必非之。”这句话。&lt;br /&gt;
柳总虽然也很喜欢吃瓜（看戏），&lt;br /&gt;
但他一般不会直接表露他对事情的看法，&lt;br /&gt;
除非他忍不住了。&lt;br /&gt;
所以有的时候要逗柳总讲话，&lt;br /&gt;
就可以贱兮兮地发表一些有争议的观点，&lt;br /&gt;
比如“我觉得kafka是个解耦神器，什么场景都可以用”…&lt;/p&gt;

&lt;p&gt;柳总也是懒人。&lt;br /&gt;
比如租房子，&lt;br /&gt;
柳总选自如是因为简单方便。&lt;br /&gt;
比如工具箱，&lt;br /&gt;
柳总把所有他常做的运维操作都&lt;a href=&#34;https://github.com/ldsink/toolbox&#34;&gt;记成了脚本&lt;/a&gt;。&lt;br /&gt;
比如答疑解惑，&lt;br /&gt;
假如别人有什么操作想问柳总的话，&lt;br /&gt;
柳总肯定第一反应是丢一个文档/脚本让他自己跑。&lt;br /&gt;
不过有些事情柳总也是很勤奋，&lt;br /&gt;
他的博客ldsink.com从14年开始一直保持着大概一月一更的频率。&lt;/p&gt;

&lt;p&gt;柳总很白。&lt;br /&gt;
字面意义上的。&lt;br /&gt;
柳总以前也胖过一段时间，&lt;br /&gt;
有一次去面试候选人，&lt;br /&gt;
几轮面完以后谢老板出来笑着跟柳总说：&lt;br /&gt;
“刚才那个候选人说：‘前面那个白白胖胖的面试官很厉害啊！’”&lt;br /&gt;
受了很大刺激的柳总后面的两个月晚饭只吃沙拉…&lt;/p&gt;

&lt;p&gt;柳总想笑的时候是忍不住的。&lt;br /&gt;
前阵子柳总又玩起了阴阳师，&lt;br /&gt;
然后一天晚饭的时候，&lt;br /&gt;
我眼睁睁地看他抽到了SSR·彼岸花。&lt;br /&gt;
然后柳总一副啊呀我真开心，&lt;br /&gt;
啊呀我要低调，&lt;br /&gt;
啊呀我不能在别人面前晒卡，&lt;br /&gt;
啊呀但我真的很开心&lt;br /&gt;
的复杂的开心表情。&lt;br /&gt;
这样的表情在大家围观紫光阁地沟油事件的时候也同样地发生过…&lt;/p&gt;

&lt;p&gt;柳总和我虽然在同一家公司共事，&lt;br /&gt;
但其实任何时候我们两人聊天基本上不讲工作相关的事情。&lt;br /&gt;
反而聊的是“啥时候去交大办校友卡”，&lt;br /&gt;
“你搬家找房子怎么找”，&lt;br /&gt;
“XX银行卡真的福利很好你办一张呗，不用的话也可以给我”，&lt;br /&gt;
“你旧号不玩了的话，求给我登一下，好带我刷御魂”之类的琐事…&lt;/p&gt;

&lt;p&gt;大概是一种“你的后背交给我了”的安心感吧。&lt;/p&gt;

&lt;p&gt;这就是我的好友，柳宁宁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git的理念</title>
      <link>https://liriansu.com/posts/2018-02-10-philosophy-of-git/</link>
      <pubDate>Sat, 10 Feb 2018 16:01:31 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-02-10-philosophy-of-git/</guid>
      <description>&lt;p&gt;本文尝试介绍一下Git的过人之处。&lt;br /&gt;
目标读者是想了解Git，&lt;br /&gt;
或者对软件设计有兴趣的人。&lt;/p&gt;

&lt;p&gt;Git作为一个极其灵活的工具，&lt;br /&gt;
从修改单机游戏数据文件的版本管理，&lt;br /&gt;
到多人协作一起堆屎的协作开发，&lt;br /&gt;
使用起来都是十分趁手。&lt;/p&gt;

&lt;p&gt;那么Git灵活的奥秘在哪呢？&lt;br /&gt;
大概是因为Git设计正交、实现扎实吧。&lt;/p&gt;

&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;

&lt;p&gt;Git里面的术语/命令很多，&lt;br /&gt;
但是它们可以归并成几个大类，&lt;br /&gt;
每个大类的概念都是正交的，&lt;br /&gt;
也就是说交叉概念很少，&lt;br /&gt;
不会有模糊的概念定义。&lt;br /&gt;
基于这样的设计，&lt;br /&gt;
Git与之对应地实现了一套扎实的命令系统。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git里的概念有些难以准确翻译，&lt;br /&gt;
本文涉及概念词的地方尽量用术语表达 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如经常用到的概念会有这些：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Line Diff&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Commit&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Branch&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Repository&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Remote&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;line-diff&#34;&gt;Line Diff&lt;/h2&gt;

&lt;p&gt;Git实现版本控制的方法是根据Line Diff，&lt;br /&gt;
推算出每个Commit具体改了哪些东西，&lt;br /&gt;
然后用多个Commit（实则是多份Line Diff）构建出所有历史。&lt;/p&gt;

&lt;p&gt;这个基于Line Diff的先天设计决定了Git的一些特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以存储所有历史。&lt;br /&gt;
我们常听到“Git是一个分布式的版本控制系统”，&lt;br /&gt;
这个指的就是Git不需要中心化的服务器，&lt;br /&gt;
你就可以做完所有操作。&lt;br /&gt;
因为本地存着所有的Line Diff，&lt;br /&gt;
所以“查看昨天被改过的文件名列表”这个操作完全可以离线完成。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对二进制文件不友善。&lt;br /&gt;
二进制文件是没法强行比Line Diff的。&lt;br /&gt;
所以假如用Git管理二进制文件，&lt;br /&gt;
Git只会显示一个&lt;code&gt;Binary File Differ&lt;/code&gt;。&lt;br /&gt;
再把上面一条“存储所有历史”给叠加上，&lt;br /&gt;
就会出现今天提交了一个200M的文件，&lt;br /&gt;
明天后天我都修改覆盖了这个文件，&lt;br /&gt;
最后整个目录就有600M大了…&lt;br /&gt;
（也就是说一般不用Git来管理二进制大文件）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;能检测文件重命名。&lt;br /&gt;
假如在一个Commit中，&lt;br /&gt;
从Line Diff的视角看，&lt;br /&gt;
删除的文件和增加的文件相似度很高，&lt;br /&gt;
Git就会判定这是一个重命名的操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;commit&#34;&gt;Commit&lt;/h2&gt;

&lt;p&gt;Line Diff组成了Commit，&lt;br /&gt;
Commit是大部分Git操作的最小单位。&lt;br /&gt;
这个词既是动词，也是名词。&lt;/p&gt;

&lt;p&gt;一个Commit包含了多种信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SHA hash：是根据line diff + 精确到秒的时间戳生成的一串唯一标识符&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Author：写Line Diff的人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Committer：一个隐藏的属性，代表Commit的人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Date：包括AuthorDate和CommitDate&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Message：Commit文本描述，Git会取Message第一行作为Subject，所以一般会遵循&lt;a href=&#34;https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&#34;&gt;一定规范&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Line Diffs：改动了哪些内容&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里还可以说的概念包括RootCommit、MergeCommit，&lt;br /&gt;
不过它们特殊之处不影响实际使用，&lt;br /&gt;
所以跳过它们，继续往下说。&lt;/p&gt;

&lt;h2 id=&#34;branch&#34;&gt;Branch&lt;/h2&gt;

&lt;p&gt;多个Commit会组成一个Branch，&lt;br /&gt;
最初的Branch默认叫master（主干分支）。&lt;/p&gt;

&lt;p&gt;Branch和Commit在很多命令里都是可以作为等价的操作对象的。&lt;br /&gt;
举个例子：&lt;/p&gt;

&lt;p&gt;小成写了一天代码，&lt;br /&gt;
他在wechat这个分支上commit了很多次，&lt;br /&gt;
快下班了，小成想回顾一下今天的改动。&lt;br /&gt;
假设他的log长这样子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; git log --oneline --graph
* f01c8d1 (HEAD -&amp;gt; wechat) refactor: improve project layout
* 2f9c867 feat: add rest api to create card
* 5d5242b feat: custom wechat card background
* 873e6ca fix: wechat card slow query
* 0dd06a9 fix: 500 when user unsubscribe
* fb91f98 (origin/master, master) feat: implement wechat card
* 176b4f0 feat: implement membership level
* 2727226 migration: add Settings.enable_level
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么以下命令是完全等价的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看从master到wechat的diff
&amp;gt; git diff master..wechat

# 查看从master到当前的diff（HEAD代表当前位置，也就是wechat分支）
&amp;gt; git diff master..HEAD

# 查看从master到当前的diff（HEAD是默认值，可省略）
&amp;gt; git diff master

# 查看master的commit到当前的diff
&amp;gt; git diff fb91f98

# 查看五个Commit以前倒当前的diff（master分支在五个Commit以前）
&amp;gt; git diff HEAD~5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以也可以说“Branch是特殊的Commit”。&lt;br /&gt;
理解了这一点以后，&lt;br /&gt;
再去看大部分的Git命令，&lt;br /&gt;
发现它们都是&lt;code&gt;git &amp;lt;operation&amp;gt; &amp;lt;range&amp;gt; -- &amp;lt;files&amp;gt;...&lt;/code&gt;这样的形式。&lt;/p&gt;

&lt;p&gt;比如查看今天发布哪些内容就是&lt;code&gt;git diff master..release&lt;/code&gt;，&lt;br /&gt;
把某个文件回滚到200个Commit以前就是&lt;code&gt;git checkout HEAD~200 -- some/path/some/file.txt&lt;/code&gt;，&lt;br /&gt;
查看单个文件的改动历史就是&lt;code&gt;git log -- some/path/some/file.txt&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;

&lt;p&gt;Repository包含了所有的操作历史。&lt;br /&gt;
&lt;code&gt;git init&lt;/code&gt;命令可以初始化一个Repository。&lt;/p&gt;

&lt;p&gt;一个Git Repository结构可能是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- .git/
  - hooks/
  - objects/
  - refs/
  - HEAD
  - config
- ForgiveDB/
- README.md
- requirements.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的&lt;code&gt;.git&lt;/code&gt;目录就存储着上面讲的Line Diff、Commit、Branch的所有历史，&lt;br /&gt;
就像上面二进制大文件的那个例子，&lt;br /&gt;
这里可能存了几百M的文件历史。&lt;/p&gt;

&lt;h2 id=&#34;remote&#34;&gt;Remote&lt;/h2&gt;

&lt;p&gt;Remote就是放在别的地方的Repository。&lt;br /&gt;
同一个Repository可以添加多个Remote。&lt;/p&gt;

&lt;p&gt;除了&lt;code&gt;push/pull/fetch&lt;/code&gt;这些基本操作以外，&lt;br /&gt;
关于Remote还有一个很骚的设定：&lt;br /&gt;
Git支持本地Remote。&lt;/p&gt;

&lt;p&gt;比如样例的命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 假设在服务器上的 /home/lirian/chinese-calendar 路径下有一个 Repository
&amp;gt; cd /home/lirian

# 把它 clone 到某一个地方
&amp;gt; git clone chinese-calendar /opt/git/repo/chinese-calendar --bare

# 同个服务器上的另一个用户就可以 clone 这个 Repository
&amp;gt; cd /home/ldsink &amp;amp;&amp;amp; git clone file:///opt/git/repo/chinese-calendar &amp;amp;&amp;amp; git remote -v
origin       file:///opt/git/repo/chinese-calendar (fetch)
origin       file:///opt/git/repo/chinese-calendar (push)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样的设计之下，&lt;br /&gt;
Remote/Repository是完全分离的，&lt;br /&gt;
不会因为断网就修改不了历史。&lt;br /&gt;
我们甚至可以把Remote当成一种特殊的Branch，&lt;br /&gt;
比如&lt;code&gt;fork - pull request&lt;/code&gt;就是这种模式的一种应用。&lt;/p&gt;

&lt;h2 id=&#34;尾言&#34;&gt;尾言&lt;/h2&gt;

&lt;p&gt;文中讲到的不少例子有一些浅尝辄止，&lt;br /&gt;
读者有兴趣的话可以尝试思考实现一下这几个拓展问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关于Line Diff：改动的两个文件相似度多高，Git才会识别为重命名呢？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关于Commit：如何修改Commit的Author？GitHub上能看出来Committer么？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关于Branch：如何删除远程分支？&lt;code&gt;git stash&lt;/code&gt;产生的Commit可以像Branch一样操作么？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关于Repository：删除分支以后，Git目录会变小吗？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关于Remote：文中用到的&lt;code&gt;--bare&lt;/code&gt;参数是什么意思？&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git的设计理念中还有很强大的一部分是它关于历史（History）的管理，&lt;br /&gt;
那又是一个值得细说的话题。&lt;/p&gt;

&lt;p&gt;总的来说，笔者眼中Git是一个科学且强大的工具。&lt;br /&gt;
Git优秀的原因在于它：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;正交的设计：术语定义清晰，重叠概念少，表现张力强大。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;扎实的实现：二级术语丰富，命令参数完善，贴合实际应用场景。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>这就是我2018年的OKR</title>
      <link>https://liriansu.com/posts/2018-01-25-my-2018-okr/</link>
      <pubDate>Thu, 25 Jan 2018 23:27:28 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-01-25-my-2018-okr/</guid>
      <description>&lt;p&gt;前阵子听了一位老师关于OKR很详尽的讲解，&lt;br /&gt;
受益匪浅。&lt;/p&gt;

&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;

&lt;p&gt;当时老师开题的时候，&lt;br /&gt;
举了“打地鼠”和“灭火”当例子。&lt;br /&gt;
以下是经过回忆加工的原话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假如让你想一想，&lt;br /&gt;
去年一整年你做的三件最主要的事情是什么，&lt;br /&gt;
你能数的起来吗？&lt;/p&gt;

&lt;p&gt;很多人是数不起来的。&lt;/p&gt;

&lt;p&gt;因为很多时候没有目标，没有计划，&lt;br /&gt;
我们做事情就容易像打地鼠一样：&lt;br /&gt;
一会儿冒出来这个事情，很紧急，就先做这个；&lt;br /&gt;
又一会儿冒出来那个事情，很有前途，又做那个。&lt;/p&gt;

&lt;p&gt;或者换个比喻，&lt;br /&gt;
假如我们要穿过一片到处都着火的地方，&lt;br /&gt;
才能到达目的地。&lt;br /&gt;
那其实只要规划好了，&lt;br /&gt;
我们只要扑灭我们路途上的火就行了。&lt;br /&gt;
其他烧着的火呢？&lt;br /&gt;
烧就让它烧吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（当时这段话产品经理小鱼表示感触很深，学到了）&lt;/p&gt;

&lt;p&gt;通过这个小故事，&lt;br /&gt;
其实就想说明定目标本身是很有意义的。&lt;/p&gt;

&lt;p&gt;那具体目标怎么定呢？&lt;br /&gt;
当然就是OKR了。&lt;/p&gt;

&lt;h2 id=&#34;okr&#34;&gt;OKR&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/okr&#34;&gt;其实上次跟小米娅聊天的时候&lt;/a&gt;，&lt;br /&gt;
就学到了OKR相关的知识。&lt;/p&gt;

&lt;p&gt;这次听老师又讲了一遍，&lt;br /&gt;
对两部分印象很深刻。&lt;/p&gt;

&lt;p&gt;一部分是OKR本身的特性：&lt;/p&gt;

&lt;p&gt;OKR 全称是 &lt;code&gt;Objectives and Key Results&lt;/code&gt; （目标和关键结果）&lt;br /&gt;
可以对标 KPI (Key Performance Indicator - 关键绩效指标)&lt;/p&gt;

&lt;p&gt;KPI会直接跟绩效考核挂钩，&lt;br /&gt;
而OKR一定不直接跟绩效考核挂钩。&lt;/p&gt;

&lt;p&gt;当时讲到这里，&lt;br /&gt;
我听到了一句受震撼很大的话：&lt;br /&gt;
&lt;strong&gt;工作的奖赏就是工作本身&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这种就属于我明白，&lt;br /&gt;
但是以前没能用语文直白表达出来，&lt;br /&gt;
结果被别人抢先说出来的道理。&lt;/p&gt;

&lt;p&gt;很科学。&lt;/p&gt;

&lt;p&gt;印象很深刻的第二部分是OKR的特性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;目标 (O) 要是一定时间内，定性的，鼓舞人心的，可以达成的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关键结果 (KR) 要是定量的，陈述事实的，有挑战性的。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;呃，这个要举例子就举的多了，&lt;br /&gt;
懒得写就不写了…&lt;br /&gt;
自己看看就行。&lt;/p&gt;

&lt;h2 id=&#34;我的2018年度okr&#34;&gt;我的2018年度OKR&lt;/h2&gt;

&lt;p&gt;经历了好几天的思考，&lt;br /&gt;
我定下的OKR如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O1. 技术影响力大幅度提升&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;学习/理解/使用/掌握6个技术工具&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;成为1k+ star项目的主contributor&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;技术文章输出20篇&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自己有233 star以上的代码项目&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;O2. 事业上做出极大贡献&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;团队的OKR完成率在80%以上&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;review 10万行代码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当300场面试官&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;成为整个团队top 1%的人&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;O3. 保持幸福度爆满的状态&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;与亲人总语音时间超过1000分钟&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;跟女朋友争吵次数小于3次&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;帮助陌生人达50人次&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;新增500首红心歌曲&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;嗯！大概就是这样。&lt;/p&gt;

&lt;p&gt;从今天开始，计时开始啦~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的女友小米娅</title>
      <link>https://liriansu.com/posts/2018-01-13-my-little-mia/</link>
      <pubDate>Sat, 13 Jan 2018 08:06:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-01-13-my-little-mia/</guid>
      <description>&lt;p&gt;小米娅本名叫吴莹莹，&lt;br /&gt;
不过她很喜欢Mia这个英文名和对应的中文名米娅。&lt;br /&gt;
不过注册微信公众号的时候，&lt;br /&gt;
“小米娅”已经被注册了，&lt;br /&gt;
于是最后纠结了好一会儿，&lt;br /&gt;
她选择了“一只米娅”这个听起来很精灵的名字。&lt;/p&gt;

&lt;p&gt;认识小米娅的契机是因为我们一个公司，&lt;br /&gt;
她当HR，&lt;br /&gt;
所有人都认识HR。&lt;/p&gt;

&lt;p&gt;印象中的小米娅就是身着深色系衣服，&lt;br /&gt;
气质高冷，&lt;br /&gt;
讲话信息量很高，&lt;br /&gt;
有种魔道中人的感觉。&lt;/p&gt;

&lt;p&gt;公司要选年会主持人，&lt;br /&gt;
惯例是抓两个在职员工和两个实习生。&lt;br /&gt;
还是实习生的小米娅和我便被抓了壮丁。&lt;/p&gt;

&lt;p&gt;由于要一起对串词，&lt;br /&gt;
得想办法活跃气氛，&lt;br /&gt;
我就有合适的理由讲一大坨电波系的冷笑话。&lt;br /&gt;
小米娅听了以后问：&lt;br /&gt;
这笑点在哪？&lt;br /&gt;
……&lt;/p&gt;

&lt;p&gt;后来我发现小米娅和我是下班顺路的。&lt;br /&gt;
我回交大要两小时地铁，&lt;br /&gt;
她回华理也要一小时地铁。&lt;br /&gt;
于是那之后每天下班，&lt;br /&gt;
HR办公室门口就站了一个我&amp;hellip;&lt;/p&gt;

&lt;p&gt;有的时候小米娅会提很重的包下班，&lt;br /&gt;
（很直男的）我觉得女人都是弱鸡，&lt;br /&gt;
就想抢着帮她提。&lt;br /&gt;
小米娅都很礼貌地拒绝了我，&lt;br /&gt;
并顺便教了我一个道理：&lt;br /&gt;
女生的包，很多时候是整体搭配的装饰，&lt;br /&gt;
不可以因为大男子主义作祟而抢包哦。&lt;/p&gt;

&lt;p&gt;小米娅的idol是林志炫，&lt;br /&gt;
而且小米娅会真的去追星，&lt;br /&gt;
不过小米娅心中，&lt;br /&gt;
林志炫作为老一辈艺术家，&lt;br /&gt;
她追星的心态更多是敬仰之情。&lt;br /&gt;
作为新垣结衣老公之一的我自愧不如。&lt;/p&gt;

&lt;p&gt;小米娅人生唯一一次提前交卷，&lt;br /&gt;
就是为了去赶火车，&lt;br /&gt;
为了去听林志炫的演唱会。&lt;br /&gt;
演唱会结束以后小米娅和几个粉丝杀到了林志炫的酒店，&lt;br /&gt;
在大家一起拍合照的环节，&lt;br /&gt;
身材纤细的小米娅硬是挤到了第一排，&lt;br /&gt;
挽住了林志炫的手臂，&lt;br /&gt;
留下了一张小米娅跟她idol最亲密的照片。&lt;/p&gt;

&lt;p&gt;小米娅自豪地把照片给我看，&lt;br /&gt;
我看着上面她一头红发惊呆了：&lt;br /&gt;
“你那时候怎么这么杀马特？”&lt;br /&gt;
“哦，大学的时候想染头发就去染了。”&lt;/p&gt;

&lt;p&gt;小米娅做事有的时候很随性，&lt;br /&gt;
我很喜欢。&lt;br /&gt;
上周我们在家吃饭，&lt;br /&gt;
讲到洗碗真特么麻烦，&lt;br /&gt;
突然灵感一闪：&lt;br /&gt;
“饭堂用的铁盘子洗起来很方便！”&lt;br /&gt;
“那个沃尔玛有卖！”&lt;br /&gt;
于是我们决定就用饭堂铁盘子吃饭了。&lt;br /&gt;
可能以后朋友圈晒厨艺的时候，&lt;br /&gt;
会有点怪。&lt;/p&gt;

&lt;p&gt;说回杀马特。&lt;br /&gt;
小米娅染了红发以后去初中接她妹妹放学，&lt;br /&gt;
她妹妹的同学都惊呆了。&lt;br /&gt;
她妹妹倒是很淡定：&lt;br /&gt;
“我姐真帅！”&lt;br /&gt;
不过后来小米娅要实习面试了，&lt;br /&gt;
为了稳妥，头发还是染了回来。&lt;/p&gt;

&lt;p&gt;我经常会求小米娅：&lt;br /&gt;
“你啥时候染个头发呗…我光看照片就觉得老帅了…”&lt;br /&gt;
小米娅：&lt;br /&gt;
“不染，滚”&lt;/p&gt;

&lt;p&gt;小米娅大学是学德语的。&lt;br /&gt;
她跟我讲大学去德国交流，&lt;br /&gt;
然后周末去了周边玩耍，&lt;br /&gt;
科隆大教堂真壮丽云云。&lt;br /&gt;
我说：科隆大教堂！我以后也想爬！&lt;br /&gt;
小米娅：？？？&lt;/p&gt;

&lt;p&gt;小米娅知道我很喜欢玩游戏，&lt;br /&gt;
我跟她讲了很多刺客信条/Dota/文明/游戏厂商的故事。&lt;br /&gt;
作为交流，&lt;br /&gt;
小米娅也跟我讲了很多生活大爆炸/哈利波特/神探夏洛克/柯南的故事。&lt;/p&gt;

&lt;p&gt;不过虽然小米娅看柯南，&lt;br /&gt;
但她不是二次元（此处有争议，我想不到一个既合适又中庸的词）&lt;br /&gt;
本来想拿South Park/Rick and Morty/Fate这些动画安利她，&lt;br /&gt;
但小米娅不吃安利。&lt;br /&gt;
最终小米娅从头到尾看完的一部动画就是《好想告诉你》。&lt;/p&gt;

&lt;p&gt;小米娅是人生第一次恋爱，&lt;br /&gt;
大概她从《好想告诉你》里找到了跟《冰果》一样的蔷薇色的世界吧。&lt;/p&gt;

&lt;p&gt;不过这里比较烦的是她有时会缠着我，&lt;br /&gt;
要我讲以前的恋爱故事。&lt;br /&gt;
我又不能不讲，&lt;br /&gt;
于是我每次只能用教科书上的讲故事方式，&lt;br /&gt;
从背景，到发展，讲到矛盾点，最后再总结经验教训。&lt;/p&gt;

&lt;p&gt;15年以后小米娅和我都转正工作了，&lt;br /&gt;
她成了HR，要看很多简历。&lt;br /&gt;
于是每次我跟她讲了很多什么叫科班出身，&lt;br /&gt;
什么是软件工程，&lt;br /&gt;
Java和JavaScript是什么关系，&lt;br /&gt;
数据库是什么概念。&lt;/p&gt;

&lt;p&gt;后来我去面试的时候，&lt;br /&gt;
一个面试官问我问题：&lt;br /&gt;
“假设我不太懂技术，&lt;br /&gt;
你能不能用通俗的语言解释一下，&lt;br /&gt;
什么是软件工程？”&lt;/p&gt;

&lt;p&gt;我讲完以后面试官又很好奇的问我：&lt;br /&gt;
“我觉得你讲得非常好啊，&lt;br /&gt;
你平常会思考这些问题吗？”&lt;br /&gt;
我便跟面试官吹捧了一下我的女朋友。&lt;/p&gt;

&lt;p&gt;工作里小米娅经常要帮外国人招人。&lt;br /&gt;
有一次一个老外要招Linux初级运维，&lt;br /&gt;
这个老外跟小米娅说他最近很忙，&lt;br /&gt;
没时间面试，要小米娅帮他做电话面试。&lt;br /&gt;
于是那阵子我被小米娅问了一万个问题…&lt;br /&gt;
后来成功招到人了，&lt;br /&gt;
老外非常开心地发了一封感谢信给中国区所有HR。&lt;br /&gt;
（虽然这么说，但是我们是小厂，一共四个）&lt;/p&gt;

&lt;p&gt;作为HR，&lt;br /&gt;
小米娅还会接触到很多敏感信息，&lt;br /&gt;
主要是薪酬。&lt;br /&gt;
不过小米娅非常有职业操守，&lt;br /&gt;
她从来不会跟我透露任何敏感信息，&lt;br /&gt;
即使后来小米娅和我都到了不同的公司。&lt;/p&gt;

&lt;p&gt;当然，我也很有职业操守。&lt;br /&gt;
我也不会把公司代码给小米娅看的。&lt;/p&gt;

&lt;p&gt;小米娅现在的公司是家外企，&lt;br /&gt;
特别狼性文化。&lt;br /&gt;
就是那种你干得好，你牛逼，&lt;br /&gt;
你干不好，你走人的公司。&lt;/p&gt;

&lt;p&gt;小米娅和我都不太喜欢这种非常有侵略性的文化。&lt;br /&gt;
不过小米娅刚入职没半年，&lt;br /&gt;
好像就要当主管了……&lt;/p&gt;

&lt;p&gt;平常小米娅和我都很忙，&lt;br /&gt;
小米娅7点起床，8点出门，&lt;br /&gt;
我9点起床，9点出门。&lt;br /&gt;
晚上小米娅8点到家，还要做饭，&lt;br /&gt;
我10点回家，要洗她不想洗的碗…&lt;br /&gt;
（不过最近小米娅特别勤奋，&lt;br /&gt;
都自己洗碗了）&lt;/p&gt;

&lt;p&gt;平常住在一起，&lt;br /&gt;
小米娅不喜欢洗碗，&lt;br /&gt;
我不喜欢洗/晾/收衣服，&lt;br /&gt;
分工明确。&lt;br /&gt;
不过我们都喜欢干活的时候外放歌曲，&lt;br /&gt;
于是家里有时响起林志炫的歌声，&lt;br /&gt;
有时响起《电音之王》……&lt;/p&gt;

&lt;p&gt;小米娅和我租的是两室一厅，&lt;br /&gt;
虽然是情侣，&lt;br /&gt;
但平常都是各睡各的。&lt;br /&gt;
她心安理得地大字型霸床，&lt;br /&gt;
我也心安理得地听歌写程序到夜深。&lt;/p&gt;

&lt;p&gt;小米娅收到的第一个礼物是一个特别可爱的，&lt;br /&gt;
摸起来像柴犬，看起来也像柴犬的粉色小熊玩偶。&lt;br /&gt;
小米娅和我都十分喜欢这个玩偶，&lt;br /&gt;
于是我们决定给它取个名字，&lt;br /&gt;
一番讨论以后，&lt;br /&gt;
这只小粉熊就叫“吴建国”了。&lt;/p&gt;

&lt;p&gt;小米娅的理想之一是环游世界，&lt;br /&gt;
她在旅行之前会做极其详尽的攻略。&lt;br /&gt;
就像 @苍南派 说的一样：&lt;br /&gt;
两个人旅游，通常是一个人负责订来回车票酒店民宿景点门票计划好目的地路线行程衔接整体开销查看好天气情况帖子攻略网友好差评想好怎么看怎么玩怎么吃，另一个负责当弱智。&lt;/p&gt;

&lt;p&gt;我就是那个开心的弱智…&lt;/p&gt;

&lt;p&gt;这么说来，&lt;br /&gt;
小米娅好像快醒了。&lt;br /&gt;
这次小米娅的故事就先讲到这里吧，&lt;br /&gt;
下次见~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我是怎么实现《用弹幕玩GBA游戏》的</title>
      <link>https://liriansu.com/posts/2018-01-06-play-gba-with-danmaku/</link>
      <pubDate>Sat, 06 Jan 2018 18:58:33 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2018-01-06-play-gba-with-danmaku/</guid>
      <description>&lt;p&gt;大概是大二的时候，&lt;br /&gt;
我在TwitchTV上看到了一个极其精彩的Idea。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.twitch.tv/&#34;&gt;TwitchTV&lt;/a&gt;是外国的一个主要做游戏直播网站，&lt;br /&gt;
观众可以打开网页观看游戏直播，&lt;br /&gt;
每个人都能随时发弹幕表达自己的想法。&lt;br /&gt;
&lt;a href=&#34;https://zh.moegirl.org/zh-hans/%E5%BC%B9%E5%B9%95&#34;&gt;&lt;em&gt;弹幕是啥？&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;依赖于发弹幕万人同屏的这个设定，&lt;br /&gt;
TwitchTV做了一个很好玩的功能，&lt;br /&gt;
就是“几千人玩操纵同一个角色，玩同一个游戏。”&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Twitch_Plays_Pok%C3%A9mon&#34;&gt;&lt;em&gt;详情可以参见Twitch Plays Pokemon这个维基词条&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当时看到这个消息，&lt;br /&gt;
我也去玩了一下，&lt;br /&gt;
感受是：特别好玩！！！&lt;/p&gt;

&lt;p&gt;几千个人同屏玩游戏的话，&lt;br /&gt;
最大的感受就是&lt;strong&gt;混乱&lt;/strong&gt;，&lt;br /&gt;
这也是最棒的体验。&lt;br /&gt;
大部分玩家是冲着通关的目标去玩的，&lt;br /&gt;
所以总体看来，角色的行为是有目标性的。&lt;br /&gt;
但是也会有一部分玩家以捣乱为乐，&lt;br /&gt;
在一些精细操作的时候（比如收服Pokemon的时候）&lt;br /&gt;
就会额外混乱。&lt;/p&gt;

&lt;p&gt;最终整个游戏（或者说社会实验）在混乱中前行，&lt;br /&gt;
经过了16个日夜，&lt;br /&gt;
最终打过了四大天王，&lt;br /&gt;
完成了通关壮举。&lt;/p&gt;

&lt;p&gt;OK，前面都是背景介绍，&lt;br /&gt;
那么看到这么好玩的一个东西，&lt;br /&gt;
我的心痒了很久：&lt;br /&gt;
我也想实现一个类似的功能！&lt;/p&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;

&lt;p&gt;就像把大象塞冰箱里需要拆解步骤，&lt;br /&gt;
为了实现“用弹幕玩同屏GBA游戏”这一点，&lt;br /&gt;
我们主要要做的事情有如下几点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;申请一个直播间&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;获取直播间的弹幕&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现从弹幕到键位的映射&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用程序操纵GBA模拟器&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然，我们这个拆分非常的粗略，&lt;br /&gt;
而且会有很多具体的问题，&lt;br /&gt;
我们一个一个地来看。&lt;/p&gt;

&lt;h3 id=&#34;申请一个直播间&#34;&gt;申请一个直播间&lt;/h3&gt;

&lt;p&gt;我要没记错的话（_懒得去查资料验证了_）&lt;br /&gt;
TwitchTV的同屏玩游戏功能应该是官方实现的，&lt;br /&gt;
不是某一个主播或者是我这样的第三方程序员实现的。&lt;br /&gt;
平台自己实现的话会有非常多的自主权，&lt;br /&gt;
而且可以给到游戏本身的推广，&lt;br /&gt;
一波活动推出去不论是效果还是效果都会更好。&lt;/p&gt;

&lt;p&gt;但是毕竟人微言轻，&lt;br /&gt;
我们普通人类还是要从头开始，&lt;br /&gt;
从申请直播间开始。&lt;/p&gt;

&lt;p&gt;申请直播间的话主要是涉及到直播平台的选择，&lt;br /&gt;
因为我一直都是A/B站用户，&lt;br /&gt;
所以直播平台基本上就是斗鱼&lt;a href=&#34;https://www.zhihu.com/question/27088840&#34;&gt;（A站生放送）&lt;/a&gt;和B站直播之间选一个。&lt;/p&gt;

&lt;p&gt;最终我两年前注册了一个斗鱼直播间&lt;br /&gt;
（打个广告，从来不播的直播间：&lt;a href=&#34;https://www.douyu.com/lisp&#34;&gt;douyu.com/lisp&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;第一步算是做完了。&lt;/p&gt;

&lt;h3 id=&#34;获取直播间的弹幕&#34;&gt;获取直播间的弹幕&lt;/h3&gt;

&lt;p&gt;这个是个非常interesting的问题。&lt;br /&gt;
首先他受前置问题的影响，&lt;br /&gt;
带来的现实问题是&lt;strong&gt;每个直播平台获取弹幕的难度是不一样的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;斗鱼和B站直播相比，&lt;br /&gt;
看斗鱼的人肯定是更多的，&lt;br /&gt;
但是受氛围和观众群体的影响，&lt;br /&gt;
&lt;a href=&#34;https://github.com/feisuzhu/vim-bilibili-live&#34;&gt;会为B站写插件的程序员&lt;/a&gt;更多_CITATION NEEDED_。&lt;/p&gt;

&lt;p&gt;但毕竟我们在上一个步骤选择了斗鱼，&lt;br /&gt;
还是得从一而终。&lt;br /&gt;
于是两年前我就在知乎关注了&lt;a href=&#34;https://www.zhihu.com/question/29027665&#34;&gt;《如何获取斗鱼直播间的弹幕信息？》&lt;/a&gt;这个问题，&lt;br /&gt;
顺便学习了一波socket相关知识（对，这句话反映了我的真实水平&amp;hellip;）&lt;/p&gt;

&lt;p&gt;当时没有一套好用的库，&lt;br /&gt;
我又懒得自己钻研，&lt;br /&gt;
所以就卡在这里了。&lt;/p&gt;

&lt;p&gt;后来我&lt;a href=&#34;https://liriansu.com/how-i-use-github&#34;&gt;在GitHub闲逛的时候&lt;/a&gt;，&lt;br /&gt;
发现itchat的作者写了一个包，&lt;br /&gt;
支持获取各大直播平台的弹幕，&lt;br /&gt;
感觉就是我要的轮子！&lt;br /&gt;
&lt;a href=&#34;https://github.com/littlecodersh/danmu&#34;&gt;于是我点了一个star先马克着&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;今天是2018年1月，&lt;br /&gt;
这个库最近的更新是2017年5月，&lt;br /&gt;
有大半年没更新代码了。&lt;br /&gt;
正式采用之前我试了一下，&lt;br /&gt;
斗鱼的弹幕是没问题的，&lt;br /&gt;
不过B站的弹幕因为是直接&lt;a href=&#34;https://github.com/littlecodersh/danmu/blob/master/danmu/Bilibili.py&#34;&gt;解析网页原文拿ROOMID&lt;/a&gt;的，&lt;br /&gt;
已经失效了。&lt;br /&gt;
又因为这个库（或者说littlecoder这个人）不是很Pythonic，&lt;br /&gt;
于是我心中又暗立一个flag，&lt;br /&gt;
fork了这个项目，&lt;br /&gt;
想着啥时候摸鱼摸够了就去改进一波。&lt;/p&gt;

&lt;p&gt;于是最终我采用了danmu这个库，&lt;br /&gt;
几行代码就成功地获取了斗鱼弹幕，&lt;br /&gt;
大概代码（伪）如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import danmu

client = danmu.DanMuClient(&amp;#39;https://www.douyu.com/lisp&amp;#39;)

@client.danmu
def receive(message):
    print(&amp;#39;[{}] {}&amp;#39;.format(message[&amp;#39;NickName&amp;#39;], message[&amp;#39;Content&amp;#39;]))

client.start()&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实现从弹幕到键位的映射&#34;&gt;实现从弹幕到键位的映射&lt;/h3&gt;

&lt;p&gt;这个没什么可以说的，&lt;br /&gt;
就是业务逻辑/苦力活。&lt;br /&gt;
简单。跳过。&lt;/p&gt;

&lt;h3 id=&#34;用程序操纵gba模拟器&#34;&gt;用程序操纵GBA模拟器&lt;/h3&gt;

&lt;p&gt;好，这里首先有个坑。&lt;br /&gt;
我们回忆一下，&lt;br /&gt;
最开始我们的目标其实是“实现用弹幕玩GBA游戏”，&lt;br /&gt;
现在的这个小步骤被回归成了“用程序操纵GBA&lt;strong&gt;模拟器&lt;/strong&gt;”。&lt;br /&gt;
这模拟器的需求是哪冒出来的？&lt;/p&gt;

&lt;p&gt;嗨呀，这个是有苦衷的。&lt;/p&gt;

&lt;p&gt;首先，我对GBA的回忆除了实体机，&lt;br /&gt;
有一半都是&lt;a href=&#34;https://en.wikipedia.org/wiki/VisualBoyAdvance&#34;&gt;&lt;code&gt;VisualBoyAdvance.exe&lt;/code&gt;&lt;/a&gt;这个模拟器给的。&lt;br /&gt;
还有就是理论上我们也可以实现Web版的，&lt;br /&gt;
或者自己撸一个GBA模拟器，&lt;br /&gt;
但那样又相当于额外的工作量了。&lt;br /&gt;
所以基于“把我不会的目标拆成我能做到的小步骤”&lt;br /&gt;
和“鲁迅说过，不要重复造轮子”这两个设定，&lt;br /&gt;
我就把“用程序玩GBA游戏”拆分成了“用程序操纵GBA模拟器”+“用GBA模拟器玩GBA游戏”（现成的）这两个任务了。&lt;/p&gt;

&lt;p&gt;OK，我们来现实地看第一点：&lt;br /&gt;
“怎么用程序操纵GBA模拟器”。&lt;/p&gt;

&lt;p&gt;在我的脑海中，&lt;br /&gt;
假如用Python来实现，&lt;br /&gt;
基本上这个就是Python调用windows库 + windows库给程序传递信号 + 程序接收信号达成效果，&lt;br /&gt;
这样一套combo下来就行了。&lt;/p&gt;

&lt;p&gt;虽然我平常开发环境是windows，&lt;br /&gt;
但其实我对windows的接口是一窍不通（暴露水平 x2）&lt;br /&gt;
不过不懂可以问啊！&lt;br /&gt;
于是前几天我问了一下身边的windows大拿hulucc，&lt;br /&gt;
他表示&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys(v=vs.110).aspx&#34;&gt;windows有个叫sendkey的API&lt;/a&gt;可以做这个，&lt;br /&gt;
不过只能操纵active window。&lt;br /&gt;
后来他又查了一下，&lt;br /&gt;
跟我说Python里有个&lt;code&gt;pywin32&lt;/code&gt;的库可以调用windows接口，&lt;br /&gt;
又发了一篇文章 &lt;a href=&#34;https://code.tutsplus.com/tutorials/how-to-build-a-python-bot-that-can-play-web-games--active-11117&#34;&gt;How to Build a Python Bot That Can Play Web Games&lt;/a&gt;&lt;br /&gt;
给我参考。&lt;/p&gt;

&lt;p&gt;学习了这么一大段以后，&lt;br /&gt;
我十分感动，&lt;br /&gt;
然后自己找了个另外的库&lt;a href=&#34;https://github.com/boppreh/keyboard&#34;&gt;keyboard&lt;/a&gt;（雾）&lt;/p&gt;

&lt;p&gt;事实是后来我回来研究了一下，&lt;br /&gt;
用windows接口肯定能达到我的目的，&lt;br /&gt;
但是问题是&lt;a href=&#34;https://stackoverflow.com/questions/4863056/how-to-install-pywin32-module-in-windows-7&#34;&gt;pywin32或者是类似的pypiwin32这俩包没有合适的pip release要手动安装&lt;/a&gt;，&lt;br /&gt;
这让我很不舒服。&lt;br /&gt;
刚好google的同时，&lt;br /&gt;
我搜到了另外一个python库&lt;a href=&#34;https://github.com/boppreh/keyboard&#34;&gt;&lt;code&gt;keyboard&lt;/code&gt;&lt;/a&gt;，&lt;br /&gt;
它的主页长得还蛮好看的，&lt;br /&gt;
也能达到我的需求，&lt;br /&gt;
不错，就这个了。&lt;/p&gt;

&lt;p&gt;于是实现了接收弹幕+发送按键的代码（伪）就大概长这样子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import danmu
import keyboard
import constants

client = danmu.DanMuClient(&amp;#39;https://www.douyu.com/lisp&amp;#39;)

@client.danmu
def receive(message):
    print(&amp;#39;[{}] {}&amp;#39;.format(message[&amp;#39;NickName&amp;#39;], message[&amp;#39;Content&amp;#39;]))
    content = message[&amp;#39;Content&amp;#39;]  # 主要是新增了这行和下面的if
    if content in constants.valid_keystrokes:
        keyboard.send(content)

client.start()&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;一个小坑&#34;&gt;一个小坑&lt;/h3&gt;

&lt;p&gt;这里还遇到了一个小坑，&lt;br /&gt;
简单来说就是VisualBoyAdvance这款GBA模拟器（以下简称VBA）&lt;br /&gt;
它应该是通过监控键盘事件来转化键位的。&lt;br /&gt;
（此句描述不够专业）&lt;/p&gt;

&lt;p&gt;转化成代码语言就是&lt;code&gt;keyboard.send(content)&lt;/code&gt;这行代码对VBA不起作用。&lt;br /&gt;
经过思考加尝试以后，&lt;br /&gt;
最终使用了&lt;code&gt;keyboard.press(content)&lt;/code&gt; + &lt;code&gt;time.sleep(0.02)&lt;/code&gt; + &lt;code&gt;keyboard.release(content)&lt;/code&gt;三个combo达成了效果。&lt;/p&gt;

&lt;p&gt;最终不禁要感慨一下：&lt;br /&gt;
上面这段描述里的&lt;strong&gt;经过思考加尝试&lt;/strong&gt;，&lt;br /&gt;
就是写程序这件事情最痛苦也是最美好的所在了。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;上面讲的比较零碎，&lt;br /&gt;
总结下来：&lt;/p&gt;

&lt;p&gt;为了做到 “用弹幕玩GBA游戏” 这个事情，&lt;br /&gt;
被拆分细化完成的任务有这些：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注册直播间，选了斗鱼。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;获取直播间弹幕，平常关注一波信息，最终用了danmu这个库。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现业务逻辑。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用程序操纵GBA模拟器来玩GBA游戏，使用了keyboard库发送键位信息。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终的成品在我的GitHub上：&lt;a href=&#34;https://github.com/LKI/danmaboy&#34;&gt;LKI/danmaboy&lt;/a&gt;这个项目，&lt;br /&gt;
有效代码就100行，就在&lt;a href=&#34;https://github.com/LKI/danmaboy/blob/master/danmaboy/__init__.py&#34;&gt;danmaboy/__init__.py&lt;/a&gt;一个文件内。&lt;/p&gt;

&lt;p&gt;一下午就写完了，&lt;br /&gt;
不过中途摸鱼思考的时间用了几年（惭愧）&lt;/p&gt;

&lt;p&gt;下午写代码的时候我还做了一个尝试，&lt;br /&gt;
就是开着直播写代码，&lt;br /&gt;
不过因为没人看（现实的原因），&lt;br /&gt;
所以总体感受跟小黄鸭编程差不多，&lt;br /&gt;
写一会儿，就紧张地想一下思路，&lt;br /&gt;
效果意外的不错。&lt;/p&gt;

&lt;p&gt;最终成品出来以后，&lt;br /&gt;
试着在直播间里跑了一下，&lt;br /&gt;
&lt;del&gt;创业失败&lt;/del&gt;遇到了一个基石上的失误：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;因为是游戏，所以普通的弹幕延迟在这个项目上会放大到极度影响游戏体验&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本上就是发一条弹幕，&lt;br /&gt;
15秒以后才会有对应的游戏变动，&lt;br /&gt;
别说TwitchTV那样的效果了，&lt;br /&gt;
就是基本的自己玩玩都玩不动…&lt;/p&gt;

&lt;p&gt;叹气。&lt;/p&gt;

&lt;p&gt;不过好歹是我心里很多idea之一了，&lt;br /&gt;
这篇文章也算是给这个项目画个句号吧。&lt;/p&gt;

&lt;p&gt;我的心中还有很多未竟的事业，&lt;br /&gt;
有兴趣的话，&lt;br /&gt;
欢迎和我交流噢~&lt;/p&gt;

&lt;p&gt;下次见。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/screen.png&#34; alt=&#34;screen&#34; /&gt;&lt;br /&gt;
&lt;em&gt;直播时的画面截图&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一种简单的鉴权方式：JWT</title>
      <link>https://liriansu.com/posts/2017-12-09-jwt/</link>
      <pubDate>Sat, 09 Dec 2017 20:07:17 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-12-09-jwt/</guid>
      <description>&lt;p&gt;这是一篇关于 &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT(JSON Web Token)&lt;/a&gt; 的简短介绍。&lt;/p&gt;

&lt;h2 id=&#34;什么是jwt&#34;&gt;什么是JWT&lt;/h2&gt;

&lt;p&gt;JWT, 全称是JSON Web Token，&lt;br /&gt;
是一种易于使用、无状态的鉴权(&lt;a href=&#34;https://en.wikipedia.org/wiki/Authorization&#34;&gt;Authorization&lt;/a&gt;)方式。&lt;br /&gt;
简单的来说，就是&lt;br /&gt;
&lt;strong&gt;Server端把JSON数据经过加密做成token，以授权给Client端&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;多说无益，上代码，举个栗子。&lt;/p&gt;

&lt;p&gt;当Client端登录完成以后，&lt;br /&gt;
Server端要返回一个7天有效的token，&lt;br /&gt;
那么对应的Python的样例代码会是这样的：&lt;br /&gt;
（&lt;a href=&#34;https://github.com/jpadilla/pyjwt&#34;&gt;使用了PyJWT包：&lt;code&gt;pip install pyjwt&lt;/code&gt;&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; jwt

exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 失效时间&lt;/span&gt;
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;liriansu&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 用户表示&lt;/span&gt;
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hunter2&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 密钥&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;: exp, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: user}  &lt;span style=&#34;color:#75715e&#34;&gt;# JSON 数据&lt;/span&gt;
token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jwt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(payload, key)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(token)
&lt;span style=&#34;color:#75715e&#34;&gt;# token可能会长这样子&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.EoKoMCjq_zGqUg5HDfqw4EN7EiG6gMjkUZle0uGJDGU&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://liriansu.com/hunter2-meme&#34;&gt;关于hunter2也有个梗：弱密码hunter2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后Client端每次在authorization header或者是query string里带上token。&lt;br /&gt;
Server端收到请求的时候，&lt;br /&gt;
用&lt;code&gt;payload = jwt.decode(token, key)&lt;/code&gt;验证权限就行了。&lt;br /&gt;
验证通过以后，payload中就是整个JSON数据。&lt;br /&gt;
理论上你可以往token payload里塞任何_非敏感_数据。&lt;/p&gt;

&lt;p&gt;所以综合来说，&lt;br /&gt;
假如使用JWT作为鉴权方式，&lt;br /&gt;
有以下几个特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Client端不用管任何加密/解密，只用存token，在请求里面带上就行了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Server端可以实现不依赖外部存储鉴权，所有的数据都丢在token里。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;也就是说鉴权这一步不需要File/MySQL/Redis之类的数据库，也能知道用户身份。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;因为token带失效时间，所以需要在失效前/后再刷新token。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好了，以上就是关于JWT的所有描述了。&lt;br /&gt;
本次的简单介绍就到此结束。（雾）&lt;br /&gt;
（不过&lt;a href=&#34;https://liriansu.com/hawk-authentication&#34;&gt;上次关于Hawk的介绍&lt;/a&gt;大概就是这样的）&lt;/p&gt;

&lt;h2 id=&#34;关于jwt的更多说明&#34;&gt;关于JWT的更多说明&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;讲了这么多，实质上就是用个JSON数据当token，&lt;br /&gt;
这破token真的安全吗？能伪造吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;emmmmmm, 好问题（表示这个问题很尖锐，难以正面回答，准备迂回）&lt;br /&gt;
JWT使用很广泛，久经考验，大家都在用（表现了我也不懂，应该不会有问题吧？的一种从众心理）&lt;/p&gt;

&lt;p&gt;认真地发表一下个人意见：&lt;br /&gt;
首先token/key泄漏了，&lt;br /&gt;
后果基本是跟其它鉴权方式一样严重。&lt;br /&gt;
其次JWT可以选择合适的加密方式，&lt;br /&gt;
加上合适的key是基本伪造不了的。&lt;br /&gt;
还有就是在JWT之外，&lt;br /&gt;
一定要用HTTPS！&lt;br /&gt;
不用JWT相当于没有门禁，&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/52790301/answer/173452126&#34;&gt;不用HTTPS基本是不穿内裤了&lt;/a&gt;。。。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我想了解更详细的JWT生成/验证过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体说明请参照来源 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC7519 - JSON Web Token (JWT)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单的来说，JWT是由以下三部分组成的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;第一部分指定了加密算法(alg)和token类型(typ)。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;第二部分就是我们定义的payload。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;第三部分是由加密算法产生的签名。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;获取了三部分数据以后，&lt;br /&gt;
分别用base64加密，&lt;br /&gt;
把最末的等号去掉，&lt;br /&gt;
再用小数点连在一起，&lt;br /&gt;
就是一个token了。&lt;br /&gt;
验证的话，基本就是把这个过程反过来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我去，那token里的信息就是明文的啊？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的。&lt;br /&gt;
所以token里不要带任何敏感信息。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;文档上把payload里带的信息叫&lt;code&gt;Claim&lt;/code&gt;&lt;/a&gt;，&lt;br /&gt;
有这么几个可选的&lt;code&gt;Claim&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iss&lt;/strong&gt;: Issuer, 签发方。&lt;br /&gt;
比如这个token是微信签发的，&lt;br /&gt;
那么可以是&lt;code&gt;{&#39;iss&#39;: &#39;wechat&#39;}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;aud&lt;/strong&gt;: Audience, 接收方。&lt;br /&gt;
比如王者荣耀想用微信登录，&lt;br /&gt;
那么可以是&lt;code&gt;{&#39;aud&#39;: &#39;king-of-glory&#39;}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;exp&lt;/strong&gt;: Expiration Time, 失效时间。&lt;br /&gt;
使用的是整形Unix时间戳，&lt;br /&gt;
关于时间戳可以看看&lt;a href=&#34;https://zhuanlan.zhihu.com/p/31829454&#34;&gt;《互联网上的日期和时间》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC7519&lt;/a&gt;里面还有一点很好玩，&lt;br /&gt;
就是上面每一个&lt;code&gt;Claim&lt;/code&gt;最后都加了一句&lt;code&gt;Use of this claim is OPTIONAL&lt;/code&gt;&lt;br /&gt;
（&lt;a href=&#34;https://tools.ietf.org/html/rfc2119&#34;&gt;RFC2119还定义过啥叫OPTIONAL&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;也就是说我们可以往payload里丢任何东西。&lt;br /&gt;
只要符合这种加密/解密/鉴权的方式，&lt;br /&gt;
我们都可以说“我们用了JWT”。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那token会不会很大？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有可能会。&lt;/p&gt;

&lt;p&gt;所以payload里的东西能少则少，&lt;br /&gt;
看文档里，连&lt;code&gt;issuer -&amp;gt; iss&lt;/code&gt;, &lt;code&gt;audience -&amp;gt; aud&lt;/code&gt;这种地方都给省了好几个字符。&lt;/p&gt;

&lt;p&gt;还有就是传输JWT的时候，&lt;br /&gt;
相较于放query string里，&lt;br /&gt;
更推荐放在Request Headers里面。&lt;/p&gt;

&lt;h2 id=&#34;与其他鉴权方式的对比&#34;&gt;与其他鉴权方式的对比&lt;/h2&gt;

&lt;p&gt;详尽的比较超越了本文的范畴，&lt;br /&gt;
&lt;em&gt;（写这句话好爽，可以少查一万个资料）&lt;/em&gt;&lt;br /&gt;
下面就用个简单的表格来对比一下_我了解的_几种鉴权方式吧：&lt;br /&gt;
&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;JWT&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;OAuth&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc6265&#34;&gt;Session&lt;/a&gt;, &lt;a href=&#34;https://liriansu.com/hawk-authentication&#34;&gt;Hawk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;| | JWT | OAuth | Session | Hawk |&lt;br /&gt;
|-|&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;|&lt;br /&gt;
| 易用性 | 容易，就一个token | 麻烦，要用Refresh Token刷Access Token | 容易，用Cookie就行 | 麻烦，每个请求都要单独计算header |&lt;br /&gt;
| 泛用性 | 各种场合都适用 | 带三方授权的场合特别适用 | 还行吧&amp;hellip; | 能用header的都适用 |&lt;br /&gt;
| 安全性 | 跟别的方案差不多，key泄漏了就完蛋了 | Auth Server安全就行，&lt;del&gt;我才不管Client&lt;/del&gt;其它的跟别的方案差不多 | 还行吧&amp;hellip; | &lt;a href=&#34;https://liriansu.com/hawk-authentication&#34;&gt;我！能！防！中间人攻击！&lt;/a&gt; |&lt;br /&gt;
| 接受度 | 有一定安全度，client端很喜欢，用的还是很多的 | 繁琐和安全的折中方案，很多大厂都用 | 真的广&amp;hellip; | 目前只听说了我司在用Hawk |&lt;/p&gt;

&lt;h2 id=&#34;其它感受&#34;&gt;其它感受&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JWT全称叫JSON Web Token,&lt;br /&gt;
小心别写了类似&lt;code&gt;jwt_token&lt;/code&gt;这样的变量名了（语义重复）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC7519还定义了JWT读起来是类似于jot的发音&lt;/a&gt;。&lt;br /&gt;
然而实际中交流都会说JWT（怕听不懂）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JWT说是说用同一个key就行了，&lt;br /&gt;
不过我们在项目实际中还是根据不一样的user用了不一样的key。&lt;br /&gt;
（同时也用了数据库）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如payload里带了失效时间，&lt;br /&gt;
理论上JWT签发后是不会失效的，&lt;br /&gt;
也就是Server端管理不了这些token。&lt;br /&gt;
（所以可以加个数据库来管）&lt;br /&gt;
（好像变复杂了）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用JWT想做“记住登录状态”这个功能的话，&lt;br /&gt;
可以设定token失效期比如是7天，&lt;br /&gt;
然后用户每天登录的时候刷一次token。&lt;br /&gt;
这样除非用户一周内都没登录，&lt;br /&gt;
才会请求重新登录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我对互联网安全的认知是真的有限，&lt;br /&gt;
经常看文档，&lt;br /&gt;
一句话学到三四个新的词。&lt;br /&gt;
还是要多学习一个啊。&lt;br /&gt;
所谓&lt;code&gt;苟日新，日日新，又日新&lt;/code&gt;是也。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>视差</title>
      <link>https://liriansu.com/posts/2017-12-04-your-own-sight/</link>
      <pubDate>Mon, 04 Dec 2017 22:29:14 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-12-04-your-own-sight/</guid>
      <description>&lt;p&gt;蚍蜉和大树是很好的朋友，&lt;br /&gt;
蚍蜉常常站在大树头上跟大树聊天。&lt;/p&gt;

&lt;p&gt;两只生物从诗词歌赋谈到人生理想，&lt;br /&gt;
无话不谈，谈了又谈，&lt;br /&gt;
所有的观点都无比契合。&lt;/p&gt;

&lt;p&gt;这一天他们看着遥远的天空，&lt;br /&gt;
蚍蜉不禁感慨道：“天真的蓝啊。”&lt;/p&gt;

&lt;p&gt;出生在悬崖边上的大树一动不动，仿佛出了神：&lt;br /&gt;
“是啊，这天空的蓝，比海面的蓝更宁静。”&lt;/p&gt;

&lt;p&gt;看着视野远方的海天分界线，蚍蜉也不禁感慨道：&lt;br /&gt;
“对啊，海洋的蓝深邃，天空的蓝给我一种忧伤的感觉。”&lt;/p&gt;

&lt;p&gt;大树摇了摇身上的叶子：&lt;br /&gt;
“我倒觉得春天的时候，叶子的颜色才更忧伤。&lt;br /&gt;
天空的蓝给我一种生机盎然的感觉，我很向往。”&lt;/p&gt;

&lt;p&gt;蚍蜉觉得很奇怪：&lt;br /&gt;
“不对呀，春天的绿叶才是生机盎然吧。”&lt;/p&gt;

&lt;p&gt;大树笑了：&lt;br /&gt;
“你可不能把生物规律加到颜色感觉上，&lt;br /&gt;
绿色本来就是忧郁的，&lt;br /&gt;
尤其是春天叶子新芽的那一抹淡绿。”&lt;/p&gt;

&lt;p&gt;蚍蜉没有说话，想了想，提了个问题：&lt;br /&gt;
“那大树，你能不能描述一下你眼中的绿色是什么？”&lt;/p&gt;

&lt;p&gt;“绿色啊，就是春天万物生长时候的颜色啊。&lt;br /&gt;
比如绿叶衬红花，老树发绿芽，&lt;br /&gt;
这阵子在我们这跑来跑去的那个年轻人，&lt;br /&gt;
帽子也是绿的。”&lt;/p&gt;

&lt;p&gt;“唔，我不是问绿色在现实生活中的投影。&lt;br /&gt;
我想知道你是怎么看绿色这种颜色本身的，&lt;br /&gt;
更重要的：你对这个颜色的&lt;strong&gt;感觉&lt;/strong&gt;。”&lt;/p&gt;

&lt;p&gt;大树侧着脑袋想了想，说：&lt;br /&gt;
“其实吧，我看到绿色，&lt;br /&gt;
会有种很平静，很忧伤的感觉。&lt;br /&gt;
就有一种我整棵树都会沉浸在绿色里，&lt;br /&gt;
随着我越沉越深，我整个颜色也越来越淡。&lt;br /&gt;
深色的绿色就会有一种特别深邃的感觉，&lt;br /&gt;
就像这个颜色本身就是自然赋予的，&lt;br /&gt;
深不见底，吞没灵魂。”&lt;/p&gt;

&lt;p&gt;随着大树讲下去，&lt;br /&gt;
蚍蜉的眼神变得越来越锋利了：&lt;br /&gt;
“大树，我觉得，&lt;strong&gt;我们看到的颜色不一样&lt;/strong&gt;。”&lt;/p&gt;

&lt;p&gt;还沉浸在颜色感觉中的大树一愣：&lt;br /&gt;
“怎么不一样了？”&lt;/p&gt;

&lt;p&gt;“我跟你讲一下我眼中的绿色吧，”&lt;br /&gt;
蚍蜉想了想，描述道：&lt;br /&gt;
“绿色给我一种生机勃发的感觉，&lt;br /&gt;
我指的是光看到这个颜色，&lt;br /&gt;
就觉得它里面蕴含着生命的能量，&lt;br /&gt;
看到它会感觉特别平静。&lt;br /&gt;
这种平静跟蓝色不一样，&lt;br /&gt;
蓝色是让你没有想法，&lt;br /&gt;
绿色会让你觉得生命本身就是这么美好，&lt;br /&gt;
会被温柔地环绕。”&lt;/p&gt;

&lt;p&gt;大树仿佛意识到了什么，&lt;br /&gt;
缓慢地说道：&lt;br /&gt;
“我觉得，你描述的是蓝色。”&lt;/p&gt;

&lt;p&gt;蚍蜉点了点头：&lt;br /&gt;
“对，刚才我也觉得你描述的是我眼中的蓝色。”&lt;/p&gt;

&lt;p&gt;大树沉思了一下：&lt;br /&gt;
“有趣，这么看来，我们眼中的蓝绿色其实根本是反的。”&lt;/p&gt;

&lt;p&gt;“是的。但是我看到这个颜色，我叫它绿色，&lt;br /&gt;
你看到这个颜色，你也叫它绿色。&lt;br /&gt;
完全一致。”&lt;/p&gt;

&lt;p&gt;“对。我小时候知道这是绿色，是家人教我的，&lt;br /&gt;
想必你也是这么认识颜色的。&lt;br /&gt;
假如我们不交流对颜色本身的看法，&lt;br /&gt;
我们就永远不会发现我们眼中的蓝、绿色其实是非常不一样的。”&lt;/p&gt;

&lt;p&gt;“这就是&lt;strong&gt;视差&lt;/strong&gt;。&lt;br /&gt;
不止蓝、绿色，说不定我们眼中的世界都是非常不一样的。”&lt;/p&gt;

&lt;p&gt;小云、庄子、惠子三个人讨论完了这个故事，&lt;br /&gt;
击掌而笑。&lt;/p&gt;

&lt;p&gt;庄子感慨道：&lt;br /&gt;
“妙啊，我得把这个故事写下来。”&lt;/p&gt;

&lt;p&gt;惠子想了想，评论道：&lt;br /&gt;
“这样写的话，太直白了。&lt;br /&gt;
怕是读者只会看字面的意思。”&lt;/p&gt;

&lt;p&gt;小云笑着拍了一下惠子：&lt;br /&gt;
“放心，庄子这个人可是狡猾得很，&lt;br /&gt;
他肯定会彻底换一个故事皮的。”&lt;/p&gt;

&lt;p&gt;庄子也笑了：&lt;br /&gt;
“既然小云你这么说我狡猾，&lt;br /&gt;
那我可就要把故事里的你换成一条鱼了。”&lt;/p&gt;

&lt;p&gt;惠子担心地问：&lt;br /&gt;
“这样会不会被读者曲解了故事的意思啊？”&lt;/p&gt;

&lt;p&gt;“没关系。&lt;br /&gt;
这也是&lt;strong&gt;视差&lt;/strong&gt;。”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python项目自动化部署之一：举个栗子</title>
      <link>https://liriansu.com/posts/2017-11-23-python-deployment-automation-one-sample/</link>
      <pubDate>Thu, 23 Nov 2017 16:49:57 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-11-23-python-deployment-automation-one-sample/</guid>
      <description>&lt;p&gt;本文主要讲述一下我司&lt;br /&gt;
（&lt;a href=&#34;https://www.zhihu.com/question/19596230/answer/152193862&#34;&gt;一个成长中的创业公司&lt;/a&gt;）&lt;br /&gt;
目前的代码发布流程用到了哪些工具。&lt;/p&gt;

&lt;h2 id=&#34;发布工具-jenkins-jenkins&#34;&gt;发布工具：&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;我们用的发布工具是&lt;a href=&#34;https://stackshare.io/jenkins&#34;&gt;很多公司都在用&lt;/a&gt;的&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;。&lt;br /&gt;
举个&lt;del&gt;栗子&lt;/del&gt;图，&lt;br /&gt;
在Jenkins Server上可以一键发布后端服务器代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/zaihui_jenkins.jpg&#34; alt=&#34;jenkins-demo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;按下 Build按钮 以后，&lt;br /&gt;
发生的事情如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 Jenkins服务器 上触发预先配置的 Bash脚本&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;git命令获取到最新的代码版本，切换合适的分支&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;执行代码风格检测和单元测试&lt;/del&gt;自从使用了付费版GitLab后，本功能已切换至GitLab CI了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;安全检查通过以后，使用fab命令部署代码&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;发布命令-fabric-fabric&#34;&gt;发布命令：&lt;a href=&#34;https://github.com/fabric/fabric&#34;&gt;Fabric&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这里的fab命令用的就是&lt;a href=&#34;https://github.com/fabric/fabric&#34;&gt;Python的Fabric库&lt;/a&gt;，&lt;br /&gt;
这个库类似&lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;ansible&lt;/a&gt;，&lt;br /&gt;
主要包含两套功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;本地命令集成&lt;/strong&gt;。&lt;br /&gt;
这点大概跟 Java 的 &lt;a href=&#34;https://ant.apache.org/&#34;&gt;&lt;code&gt;ant&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;&lt;code&gt;gradle&lt;/code&gt;&lt;/a&gt;,&lt;br /&gt;
或者是 JS 的 &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;&lt;code&gt;npm run&lt;/code&gt;&lt;/a&gt; 有类似功能。&lt;br /&gt;
都是可以把数个操作集成到一条简单的工作流命令里。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;远程ssh工具&lt;/strong&gt;。&lt;br /&gt;
&lt;a href=&#34;https://github.com/fabric/fabric&#34;&gt;Fabric&lt;/a&gt;里基于&lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;ssh&lt;/a&gt;，&lt;br /&gt;
实现了一套方便的远程命令接口，&lt;br /&gt;
比如这么一段代码就可以把配置上传到远程服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from fabric.api import *  # NOQA

# 不用试了，这里的两个都是假的domain，对应放上ssh的host/user即可
env.hosts = [&amp;#39;www.kezaihui.com&amp;#39;, &amp;#39;zaihuiwebserver-814613977.cn-north-1.elb.amazonaws.com.cn&amp;#39;]
env.user = &amp;#39;saber&amp;#39;

def update_supervisor_config():
put(&amp;#39;./supervisor/*.conf&amp;#39;, &amp;#39;/etc/supervisor/conf.d/&amp;#39;, use_sudo=True)
run(&amp;#39;supervisorctl update&amp;#39;, use_sudo=True)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但&lt;a href=&#34;https://github.com/fabric/fabric&#34;&gt;Fabric&lt;/a&gt;有个比较蛋疼的地方就是它只支持&lt;a href=&#34;https://docs.python-guide.org/en/latest/starting/which-python/&#34;&gt;Python2&lt;/a&gt;，&lt;br /&gt;
假如要用&lt;a href=&#34;https://docs.python-guide.org/en/latest/starting/which-python/&#34;&gt;Python3&lt;/a&gt;的话，&lt;br /&gt;
可以使用&lt;a href=&#34;https://github.com/fabric/fabric&#34;&gt;Fabric&lt;/a&gt;的一个fork分支&lt;a href=&#34;https://github.com/mathiasertl/fabric/&#34;&gt;Fabric3&lt;/a&gt;，&lt;br /&gt;
&lt;a href=&#34;https://github.com/mathiasertl/fabric/&#34;&gt;Fabric3&lt;/a&gt;与&lt;a href=&#34;https://github.com/fabric/fabric&#34;&gt;Fabric&lt;/a&gt;大部分功能等价。&lt;/p&gt;

&lt;p&gt;只想用里面本地命令集成这部分功能的话，&lt;br /&gt;
还有一个库叫&lt;a href=&#34;https://www.pyinvoke.org/&#34;&gt;Invoke&lt;/a&gt;也提供了类似的功能。&lt;br /&gt;
这个库主要是名字特别帅，&lt;br /&gt;
&lt;a href=&#34;https://dota2.gamepedia.com/Invoker&#34;&gt;dota2里面的卡尔就叫Invoker（祈求者）&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;进程管理-supervisor-supervisor&#34;&gt;进程管理：&lt;a href=&#34;https://supervisord.org/&#34;&gt;Supervisor&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;在正式环境中，&lt;br /&gt;
为了保证服务器进程的鲁棒性，&lt;br /&gt;
我们使用了 &lt;a href=&#34;https://supervisord.org/&#34;&gt;supervisor&lt;/a&gt; 来监控进程状态。&lt;/p&gt;

&lt;p&gt;一个简单的 nginx supervisor 的配置会长这样子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[program:nginx]
command=/usr/sbin/nginx
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/nginx.log
stderr_logfile=/var/log/supervisor/nginx_error.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把配置文件放到 &lt;code&gt;/etc/supervisor/conf.d/nginx.conf&lt;/code&gt; 以后，&lt;br /&gt;
就可以使用一系列命令把服务起起来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ supervisorctl update  # supervisorctl 是 supervisor 的命令行工具，更新一波配置
nginx    STARTING    pid 1000, uptime 0:00:00

$ supervisorctl status  # 查看进程状态
nginx    RUNNING     pid 1000, uptime 0:12:34

$ kill -9 1000  # 模拟各种波动，干掉 nginx 进程

$ supervisorctl status  # 再次查看进程状态，可以发现 supervisor 自动重启了
nginx    STARTING    pid 1020, uptime 0:00:00&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;负责发版的工程师，&lt;br /&gt;
可能只在页面上点下了 &lt;code&gt;Build&lt;/code&gt; 的一个按钮，&lt;br /&gt;
实际上的流程是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jenkins 触发了配置好的 Bash脚本。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;里面 Bash 脚本跑了 fab 命令。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;fab 命令执行了代码上传的工作，本质上是通过 ssh 执行命令。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;最终用 supervisor 开启/重启了进程服务。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;发版完成。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上大概就是我司目前自动化部署的简陋介绍。&lt;br /&gt;
升级之路漫漫，&lt;br /&gt;
还是有很多东西要学习/实践/掌握的呀。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://liriansu.com/python-deployment-automation-one-sample&#34;&gt;原文链接&lt;/a&gt;，&lt;a href=&#34;https://liriansu.com/about/&#34;&gt;作者 @苏子岳&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文版权属于再惠研发团队，欢迎转载，转载请保留出处。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>怎么使用搜索引擎</title>
      <link>https://liriansu.com/posts/2017-11-19-how-to-google/</link>
      <pubDate>Sun, 19 Nov 2017 21:52:07 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-11-19-how-to-google/</guid>
      <description>&lt;p&gt;我就是这么用的。&lt;/p&gt;

&lt;p&gt;平常学习/工作过程中，&lt;br /&gt;
我经常提问和被提问，&lt;br /&gt;
有时会很惊讶地发现：&lt;br /&gt;
似乎我十分擅长回答别人的问题。&lt;/p&gt;

&lt;p&gt;于是我自豪地内省了一下，&lt;br /&gt;
发现了“表面上擅长回答问题”的原因：&lt;br /&gt;
我很擅长利用搜索引擎。&lt;/p&gt;

&lt;p&gt;于是我又灰溜溜地自省了一下，&lt;br /&gt;
发现了“擅长利用搜索引擎”的原因：&lt;br /&gt;
我掌握了一些小技巧。&lt;/p&gt;

&lt;p&gt;我决定把这些小技巧给记下来。&lt;br /&gt;
熟练学习、理解、运用、掌握以后，&lt;br /&gt;
相信你也能成为一个优质的谷歌UI的。&lt;/p&gt;

&lt;h2 id=&#34;不用百度-尽量用谷歌&#34;&gt;不用百度，尽量用谷歌&lt;/h2&gt;

&lt;p&gt;在大陆的人类中，&lt;br /&gt;
使用最广的搜索引擎应该就是百度了。&lt;/p&gt;

&lt;p&gt;但我不喜欢用百度，&lt;br /&gt;
一些主观的原因主要如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;口碑不好，可被替代。&lt;br /&gt;
因为种种原因（假药/推广/泄露用户信息），&lt;br /&gt;
百度的搜索口碑不好；&lt;br /&gt;
而且友商搜狗(sogou.com)也能顶替搜索功能。&lt;br /&gt;
那我更愿意选择口碑好的产品。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内容更新不及时。&lt;br /&gt;
举个栗子，GitHub Issue里的最新内容，&lt;br /&gt;
百度就很少收录[CITATION NEEDED]。&lt;br /&gt;
而很多代码里的一些冷门报错，&lt;br /&gt;
收录的就更少了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人来说，我推荐能访问谷歌搜索的友人，&lt;br /&gt;
都可以使用谷歌搜索。&lt;br /&gt;
虽然谷歌的中国本土化做的不一定好，&lt;br /&gt;
但是像“怎么判断煤气泄漏”&lt;br /&gt;
“大哥喝冰阔落是什么梗”&lt;br /&gt;
“一点点哪个味道比较好喝”都是可以搜到合适的答案的。&lt;/p&gt;

&lt;p&gt;访问不到谷歌的大陆人类，&lt;br /&gt;
也可以使用必应、搜狗等代替。&lt;br /&gt;
我个人平常会用搜狗。&lt;/p&gt;

&lt;p&gt;假如程序员朋友，&lt;br /&gt;
想了解“不用百度搜索”的更多信息，&lt;br /&gt;
可以读一下&lt;a href=&#34;https://coolshell.cn/articles/9308.html&#34;&gt;酷壳的倡议：《“作环保的程序员，从不用百度开始”》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;找到x问题&#34;&gt;找到X问题&lt;/h2&gt;

&lt;p&gt;我之前一直以为XYZ问题是个广泛使用的说法了，&lt;br /&gt;
没想到居然好像是我先提这个说法的。&lt;/p&gt;

&lt;p&gt;XYZ问题的描述是&lt;a href=&#34;https://liriansu.com/x-y-z-question&#34;&gt;“有的时候我们想解决的是X问题， 但是我们却纠结于Y问题， 最后却陷入了Z问题的陷阱里。”&lt;/a&gt;&lt;br /&gt;
归纳一下就是：&lt;strong&gt;找到问题的根源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如&lt;a href=&#34;https://liriansu.com/x-y-z-question&#34;&gt;文章里提到的打字机效果&lt;/a&gt;，&lt;br /&gt;
就是搜索X问题一个很好的例子。&lt;/p&gt;

&lt;p&gt;再比如平常写代码会遇到的第三方库报错的问题，&lt;br /&gt;
程序报的错一般都比较原始：&lt;br /&gt;
比如&lt;code&gt;channel 0: open failed: administratively prohibited&lt;/code&gt;这种。&lt;br /&gt;
有的时候看到报错，&lt;br /&gt;
我们会不自觉地先思考几步，&lt;br /&gt;
觉得可能是SSH channel遇到了权限问题，&lt;br /&gt;
然后我们就搜索了&lt;code&gt;linux ssh channel permission&lt;/code&gt;，&lt;br /&gt;
结果答案就海了去了。&lt;br /&gt;
这里最好的做法是直接用裸的报错信息去搜，&lt;br /&gt;
因为原始报错信息就是描述根源问题的最准确描述。&lt;/p&gt;

&lt;h2 id=&#34;用正交的搜索词&#34;&gt;用正交的搜索词&lt;/h2&gt;

&lt;p&gt;其实上一节我们搜&lt;code&gt;linux ssh channel permission&lt;/code&gt;的时候，&lt;br /&gt;
我们已经用了正交搜索词的技巧了。&lt;br /&gt;
这里借用数学术语正交，&lt;br /&gt;
说的是几个搜索词之间尽量&lt;strong&gt;相互独特，互不关联&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;比如假如没有文化的我，&lt;br /&gt;
忘了朱自清先生的名篇叫什么名字，&lt;br /&gt;
可以搜“父亲 橘子 不要动”，&lt;br /&gt;
就能搜到《背影》一文。&lt;br /&gt;
&lt;del&gt;（其实会搜到梗/段子/表情包）&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;比如我知道DC漫画跑得快的是闪电侠，&lt;br /&gt;
忘了漫威那边跑得快的是谁，&lt;br /&gt;
那显然我们搜“跑得快 一日千里 到过很多地方”这样相近的词语是搜不出快银的，&lt;br /&gt;
我们要用“漫威 跑得快 对标闪电侠”当关键词来搜索，&lt;br /&gt;
就可以得出合适的结果了。&lt;/p&gt;

&lt;h2 id=&#34;理解结果&#34;&gt;理解结果&lt;/h2&gt;

&lt;p&gt;搜索引擎大部分时候不会给出确切的答案，&lt;br /&gt;
给出的会是一个网页。&lt;br /&gt;
假如搜的是报错的话，&lt;br /&gt;
很多时候会给出一个问答论坛页面，&lt;br /&gt;
或者是讨论过程。&lt;/p&gt;

&lt;p&gt;这就要求我们能从一整个页面中抽出对我们有用的关键信息，&lt;br /&gt;
而且有的时候还要分辨谬误信息，&lt;br /&gt;
这里就是经验发挥作用的地方了。&lt;br /&gt;
你只要去尝试下载一个中文盗版软件，&lt;br /&gt;
就可以掌握“抽出有用信息”的技巧。&lt;/p&gt;

&lt;p&gt;假如是写程序的搜索的话，&lt;br /&gt;
你得了解Stack Overflow/GitHub Issue的一些基本方法：&lt;br /&gt;
比如Stack Overflow上高赞很多都是好几年前的答案，&lt;br /&gt;
要注意语言/库的版本；&lt;br /&gt;
以及GitHub Issue emoji最多的答案一般都有用等经验论。&lt;/p&gt;

&lt;p&gt;还有很多时候可能你是一个搜索引擎UI，&lt;br /&gt;
你要负责把结果二次解释给其他人。&lt;br /&gt;
那首先确保你解决的是&lt;a href=&#34;https://liriansu.com/x-y-z-question&#34;&gt;&lt;strong&gt;X问题&lt;/strong&gt;&lt;/a&gt;的基础上，&lt;br /&gt;
最有用的就是&lt;strong&gt;换位思考&lt;/strong&gt;，&lt;br /&gt;
确定对方的立场/理解力/需求，&lt;br /&gt;
再用对方能接受的语言讲述给他。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;不用百度，尽量用谷歌。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;找到X问题。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用正交的搜索词。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;理解结果。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只要做到这几条，&lt;br /&gt;
你就是一个合格的搜索引擎UI了。&lt;/p&gt;

&lt;p&gt;再佐以温和的态度，&lt;br /&gt;
良好的伪装，&lt;br /&gt;
以及不会被看透的高深。&lt;/p&gt;

&lt;p&gt;恭喜你，你就成为了他人眼中的大佬了！&lt;br /&gt;
（撒花）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序员之逻辑</title>
      <link>https://liriansu.com/posts/2017-10-31-programmers-logic/</link>
      <pubDate>Tue, 31 Oct 2017 22:05:35 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-10-31-programmers-logic/</guid>
      <description>&lt;p&gt;我有时会突然意识过来，&lt;br /&gt;
写程序这件事情给我带来了深远的影响。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;利益相关：&lt;br /&gt;
以下皆为本人自身想法，&lt;br /&gt;
与广大的可爱的程序员们不一定有关。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;苏·格拉底曾经说过：&lt;br /&gt;
“一个人要先不断地剖析自己，&lt;br /&gt;
再不断地剖析自己，&lt;br /&gt;
最后不断地剖析自己，&lt;br /&gt;
他才是个伟大的人。”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;苏·格拉底：&lt;br /&gt;
我不是，&lt;br /&gt;
我没有，&lt;br /&gt;
别瞎说啊。&lt;em&gt;（否认三连）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;苏格拉底：&lt;br /&gt;
别乱在外国人名中间打点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在此，我就记录一下平常生活中的小事，&lt;br /&gt;
这样说不定可以窥斑见豹。&lt;/p&gt;

&lt;h2 id=&#34;0&#34;&gt;0&lt;/h2&gt;

&lt;p&gt;跟计算机打交道久了，&lt;br /&gt;
非常清楚程序都是按照流程来的。&lt;br /&gt;
所有所谓的 Bug 都是某个地方的计算机逻辑，&lt;br /&gt;
没有跟人类逻辑匹配上所导致的。&lt;br /&gt;
所以现在修 Bug 的时候，&lt;br /&gt;
虽然也会像以前一样高呼着“这不科学”，&lt;br /&gt;
但其实我心里知道，&lt;br /&gt;
这很科学，&lt;br /&gt;
而且外国古人不是说嘛：&lt;br /&gt;
&lt;code&gt;Where there&#39;s a bug, there&#39;s a fix.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;人类也是一样的。&lt;/p&gt;

&lt;p&gt;我们做的所有决定，&lt;br /&gt;
所有结果，&lt;br /&gt;
都是由一个决策树生成的，&lt;br /&gt;
这棵树或深或浅。&lt;/p&gt;

&lt;p&gt;我今天心情好，&lt;br /&gt;
突然坐到奶茶店里喝了一杯奶茶。&lt;br /&gt;
在旁边分手的小情侣，&lt;br /&gt;
用苹果电脑办公的小哥，&lt;br /&gt;
几个叽叽喳喳的大妈，&lt;br /&gt;
都像是钱钟书说的一样。&lt;br /&gt;
不过都是电台换台，&lt;br /&gt;
东一句西一句听得零碎，&lt;br /&gt;
但他们都是有自己完整的故事的。&lt;/p&gt;

&lt;p&gt;所以看事情，&lt;br /&gt;
知道了来龙去脉以后，&lt;br /&gt;
我总忍不住感慨一句：&lt;br /&gt;
&lt;strong&gt;这很科学&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;1&#34;&gt;1&lt;/h2&gt;

&lt;p&gt;乌托邦世界里，&lt;br /&gt;
大家都很科学。&lt;br /&gt;
然而实际生活中，&lt;br /&gt;
总会有取舍。&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;Vim vs Emacs&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;PC vs 主机&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;青轴 vs 红轴&lt;/code&gt;&lt;br /&gt;
等等话题，&lt;br /&gt;
现世中的我们总要做出选择。&lt;br /&gt;
而事实告诉我，&lt;br /&gt;
因为某一时刻，&lt;br /&gt;
我们的用户习惯、&lt;br /&gt;
用户量、&lt;br /&gt;
团队氛围、&lt;br /&gt;
外部环境总是固定的，&lt;br /&gt;
所以虽然没有最优解，&lt;br /&gt;
但我们&lt;strong&gt;一定可以选择更优解&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;比如&lt;a href=&#34;https://www.zhihu.com/question/56236190&#34;&gt;阿里编码规范里写到的&lt;code&gt;超过三个表禁止 join&lt;/code&gt;&lt;/a&gt;，&lt;br /&gt;
我非常理解这里的道理，&lt;br /&gt;
但是我自己做项目的时候恕做不到。&lt;br /&gt;
或者说按网上一部分的说法，&lt;br /&gt;
*好的男朋友要清楚包括口红色号在内的很多信息*，&lt;br /&gt;
那我更愿意尊重独立个体，&lt;br /&gt;
毕竟想了解*dota新版本具体改动内容*的人也是少数…&lt;/p&gt;

&lt;p&gt;拿&lt;a href=&#34;https://en.wikipedia.org/wiki/Editor_war&#34;&gt;最开始的 &lt;code&gt;Vim vs Emacs&lt;/code&gt; 这个经典话题&lt;/a&gt;来举例子，&lt;br /&gt;
在两边都用过以后，&lt;br /&gt;
的确知道为什么说*一个是编辑器之神，一个是神用的编辑器*了。&lt;br /&gt;
但具体到每个人的每个编辑环境，&lt;br /&gt;
总会选择一种搭配方式，&lt;br /&gt;
让他陷入最舒服的境地中。&lt;/p&gt;

&lt;h2 id=&#34;01&#34;&gt;01&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;万物科学&lt;/code&gt; 和 &lt;code&gt;最优解&lt;/code&gt; 这两点叠加起来，&lt;br /&gt;
有一个结论就是永远要保持开放性的心态。&lt;br /&gt;
假如我们秉持着&lt;br /&gt;
&lt;em&gt;世界上，15岁之前出现的都是已有的平凡事物，15到30岁出现的都是改变世界的发明，30岁以后出现的都是什么垃圾玩意啊。&lt;/em&gt;&lt;br /&gt;
这样的心态，&lt;br /&gt;
那我们就会早早地陷入 &lt;a href=&#34;https://en.wikipedia.org/wiki/Local_optimum&#34;&gt;local optima&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;举个栗子。&lt;br /&gt;
业务代码写多了，&lt;br /&gt;
&lt;del&gt;人&lt;/del&gt;我就容易陷入套路代码的惰性里。&lt;br /&gt;
前阵子和产品经理讨论一个需求的实现，&lt;br /&gt;
说到一个点，&lt;br /&gt;
我很自然地说：“这实现不了。”&lt;br /&gt;
但产品经理又好奇地/疑惑地/质疑地多问了一句：&lt;br /&gt;
“为什么呢？”&lt;br /&gt;
那一刻我心中一愣，&lt;br /&gt;
对啊，为什么呢？&lt;br /&gt;
于是后续展开了更深刻的讨论。&lt;/p&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
我&lt;strong&gt;十分敬重学习能力&lt;/strong&gt;，&lt;br /&gt;
我也十分喜欢/敬仰那些学习能力很强的人。&lt;/p&gt;

&lt;p&gt;在面试时跟候选人聊天的时候，&lt;br /&gt;
我很喜欢问一个问题，是：&lt;br /&gt;
&lt;em&gt;能不能讲一下，你做过的项目里，你最喜欢的一个？&lt;/em&gt;&lt;br /&gt;
有些同学会突然激动起来，&lt;br /&gt;
抓着你讲一个完整的故事。&lt;br /&gt;
比如最开始是某某原因，&lt;br /&gt;
然后本来是想怎么样的，&lt;br /&gt;
后来又因为什么样的原因，&lt;br /&gt;
学到了什么什么。&lt;br /&gt;
在这样的交流里，&lt;br /&gt;
不仅我能学到不少东西，&lt;br /&gt;
我也能看到他身上的成就和成长。&lt;/p&gt;

&lt;h2 id=&#34;11&#34;&gt;11&lt;/h2&gt;

&lt;p&gt;所以我很愿意&lt;strong&gt;当一个好奇宝宝&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;就好像萌新三连说的那样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;啥百度啊？&lt;br /&gt;
百度啥啊？&lt;br /&gt;
咋百度啊？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后再附带 combo 技：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大佬你到底会不会啊？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/meme/moe_combo.png&#34; alt=&#34;combo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有的时候很多问题，&lt;br /&gt;
虽然我心里已经有一个大概率确定的答案，&lt;br /&gt;
但我也一样会问出来：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/girls-stockings&#34;&gt;“丝袜，裤袜，打底裤有什么区别？”&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/what-is-cash-cow&#34;&gt;“现金牛是什么梗？”&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/pronunciations&#34;&gt;“Vim, Tmux, Zsh怎么读？”&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://liriansu.com/why-i-hate-smoking&#34;&gt;“为什么烟不算毒品？”&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所谓*活到老，学到老*嘛（关谷语气）&lt;/p&gt;

&lt;h2 id=&#34;100&#34;&gt;100&lt;/h2&gt;

&lt;p&gt;对了，还有一点。&lt;br /&gt;
我称其为&lt;strong&gt;对高信息量有好感&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这点平常可能不会太在意，&lt;br /&gt;
但是简历/面试里面会很明显：&lt;br /&gt;
同样是讲三句话，&lt;br /&gt;
有些人就讲了很多有用信息，&lt;br /&gt;
有些人就像啥都没讲一样。&lt;/p&gt;

&lt;p&gt;在《狼人杀》里面这点也会很明显，&lt;br /&gt;
很多高玩会频繁用“发金水”“警徽流”“丢水包”等新手听不太懂的词，&lt;br /&gt;
这会增加他的发言信息量，&lt;br /&gt;
让发言听起来更靠谱。&lt;br /&gt;
而很多说：“啊，今天死的是XXX，所以大概女巫XXX，希望XXX”的人，&lt;br /&gt;
都被“这货发言信息量真少”给放逐了。&lt;/p&gt;

&lt;p&gt;这也是很多亚文化(&lt;a href=&#34;https://en.wikipedia.org/wiki/Meme&#34;&gt;meme&lt;/a&gt;)&lt;br /&gt;
好玩的地方。&lt;br /&gt;
同样的话语组成部分，&lt;br /&gt;
用独特的方式表达出来，&lt;br /&gt;
就会传达出微妙差异而信息量丰富的感觉。&lt;/p&gt;

&lt;p&gt;假如我写代码的时候，&lt;br /&gt;
能写出表达精简，&lt;br /&gt;
边界完备，&lt;br /&gt;
“信息量很高”的代码。&lt;br /&gt;
那不需要队友在Code Review时喊666，&lt;br /&gt;
我自己已经一蹦三尺高，&lt;br /&gt;
开心地像见了新垣结衣一样了。&lt;/p&gt;

&lt;h2 id=&#34;1-1&#34;&gt;-1&lt;/h2&gt;

&lt;p&gt;其实边写还能边想到很多，&lt;br /&gt;
不过&lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem&#34;&gt;&lt;del&gt;这本书边上的空白太小了写不下&lt;/del&gt;&lt;/a&gt;&lt;br /&gt;
我想去玩游戏了…&lt;/p&gt;

&lt;p&gt;所以简单综述一下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;信奉万物皆科学&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;相信一定存在最优解&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;喜欢学习能力强的人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;好奇心旺盛&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对高信息量有好感&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这大概就是，&lt;br /&gt;
我作为程序员的逻辑的一小部分吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>消逝的此刻</title>
      <link>https://liriansu.com/posts/2017-10-26-carpe-diem/</link>
      <pubDate>Thu, 26 Oct 2017 17:48:42 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-10-26-carpe-diem/</guid>
      <description>&lt;p&gt;前几天 Reddit 上有个赞的很多的&lt;br /&gt;
Shower Thought:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the most bittersweet feelings has to be&lt;br /&gt;
when you realise how much you&amp;rsquo;re going to miss a moment,&lt;/p&gt;

&lt;p&gt;while you&amp;rsquo;re still living it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我很喜欢这个说法。&lt;/p&gt;

&lt;p&gt;跟女朋友聊到高中的时候，&lt;br /&gt;
她跟我讲过她有这么一种感觉：&lt;br /&gt;
“高三的时候因为学习压力重，&lt;br /&gt;
大家都很辛苦。&lt;br /&gt;
我虽然也很辛苦，&lt;br /&gt;
但我一点也没有不开心。&lt;br /&gt;
因为当时的我很清晰地知道：&lt;br /&gt;
这就是我的过一天少一天的高中生活了。”&lt;/p&gt;

&lt;p&gt;真是一个很美妙，&lt;br /&gt;
又很轻小说的描述。&lt;br /&gt;
时间真奇妙。&lt;/p&gt;

&lt;p&gt;五岁的某一天晚上，&lt;br /&gt;
我突然清楚了一件事情：&lt;br /&gt;
人类，是会死的。&lt;/p&gt;

&lt;p&gt;在那之前，&lt;br /&gt;
我只是知识性地接受了这个事实，&lt;br /&gt;
但那天晚上，&lt;br /&gt;
仿佛有个打印机把这个事实印进了我心里。&lt;br /&gt;
巨大的恐惧包围了我。&lt;/p&gt;

&lt;p&gt;随着时间的流逝，&lt;br /&gt;
那个夜晚在生命中也渐行渐远。&lt;br /&gt;
但随着我思考的越多，&lt;br /&gt;
死亡带来的孤独感就越重。&lt;/p&gt;

&lt;p&gt;有几个坚固的事实矗立在我眼前：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我们微不足道&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我很喜欢 Fate系列 动画作品的一个原因就是：&lt;br /&gt;
它把各个年代的英雄带来到了同一个时空里，&lt;br /&gt;
并且把他们的观念冲突展示出来。&lt;/p&gt;

&lt;p&gt;有一次韦伯心情低落的时候，&lt;br /&gt;
亚历山大大帝指着世界地图笑着跟他说：&lt;br /&gt;
“你看，我当时征服的世界，&lt;br /&gt;
不过在地图上是这么一小块。&lt;br /&gt;
那在地图上，你有多大？我又有多大？&lt;br /&gt;
我们不过是世界的沧海一粟而已。”&lt;/p&gt;

&lt;p&gt;时间总会前进。&lt;br /&gt;
即使我能改变人类，&lt;br /&gt;
那我也只能改变几十年的人类。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我们总会死&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那假如我能功在当代，利在千秋呢？&lt;br /&gt;
功在当代，利在千秋又与我何干。&lt;/p&gt;

&lt;p&gt;《狮子王》里，&lt;br /&gt;
穆法沙带着小辛巴到草原上玩。&lt;br /&gt;
那天晚上夜空闪亮，&lt;br /&gt;
穆法沙就跟辛巴讲了一个故事：&lt;br /&gt;
“我们狮子族有一个传说，&lt;br /&gt;
就是我们每一个逝去的祖先，&lt;br /&gt;
都会化成天空中的一个星星。&lt;br /&gt;
每当你抬头看夜空，&lt;br /&gt;
发现星星在闪烁的时候，&lt;br /&gt;
那都是我们的祖先在看着你。”&lt;/p&gt;

&lt;p&gt;在其它的传说、宗教、神话里，&lt;br /&gt;
总有类似的说法。&lt;/p&gt;

&lt;p&gt;没办法改变命运，&lt;br /&gt;
我们只能改变自己的思想了。&lt;br /&gt;
真是愚蠢的人类啊喵。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我们只能自己思考&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;小学时候看了很多《儿童文学》。&lt;br /&gt;
里面有一篇短篇小说我额外喜欢，&lt;br /&gt;
故事大纲是一个程序员创造了一个网游世界，&lt;br /&gt;
他爱上了里面虚拟的NPC，&lt;br /&gt;
结果最后他发现他也是被创造出来的NPC。&lt;/p&gt;

&lt;p&gt;这个故事跟《楚门的世界》、《沙耶之歌》异曲同工，&lt;br /&gt;
就像以前BBS上流传的一句话：&lt;br /&gt;
“在网上，没人知道你是一只狗。”&lt;/p&gt;

&lt;p&gt;难怪人类会在大刘的《乡村教师》里被评为5B级文明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“上尉。你是个白痴吗？！”&lt;br /&gt;
舰队统帅大怒，&lt;br /&gt;
“你是想告诉我们，&lt;br /&gt;
 一种没有记忆遗传，&lt;br /&gt;
 相互间用声波进行信息交流，&lt;br /&gt;
 并且是以令人难以置信的每秒1至10比特的速率进行交流的物种，&lt;br /&gt;
 能创造出5B级文明？！&lt;br /&gt;
 而且这种文明是在没有任何外部高级文明培植的情况下自动进化的？！”&lt;/p&gt;

&lt;p&gt;“但，阁下，确实如此。”&lt;/p&gt;

&lt;p&gt;“但在这种情况下，&lt;br /&gt;
 这个物种根本不可能在每代之间积累和传递知识，&lt;br /&gt;
 而这时文明进化所必须的！”&lt;/p&gt;

&lt;p&gt;“他们有一种个体，&lt;br /&gt;
 有一定数量，&lt;br /&gt;
 分布于这个种群的各个角落，&lt;br /&gt;
 这类个体充当两代生命体之间知识传递的媒介。”&lt;/p&gt;

&lt;p&gt;“听起来像神话。”&lt;/p&gt;

&lt;p&gt;“不，”&lt;br /&gt;
参议员说：&lt;br /&gt;
“在银河文明的太古时代，&lt;br /&gt;
 确实有过这个概念，&lt;br /&gt;
 但即使在那时也极其罕见，&lt;br /&gt;
 除了我们这些星系文明进化史的专业研究者，&lt;br /&gt;
 很少有人知道。”&lt;/p&gt;

&lt;p&gt;“你是说那种在两代生命体之间传递知识的个体？”&lt;/p&gt;

&lt;p&gt;“他们叫教师。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;存活到现在，&lt;br /&gt;
我可能有四分之一的空闲时间都在思考这类问题。&lt;br /&gt;
高一的时候跟物理老师也探讨过。&lt;br /&gt;
（高中物理老师是个老厉害的人，&lt;br /&gt;
十八岁前他就读完了大学，&lt;br /&gt;
三十多岁就教了二十多年物理了…）&lt;/p&gt;

&lt;p&gt;不过当时的他也没办法说服我，&lt;br /&gt;
主要是几个问题过于终极：&lt;br /&gt;
“人类为什么要活着？&lt;br /&gt;
世界终究会毁灭的话，人类有意义吗？&lt;br /&gt;
即使我是特殊的人类，我能做出什么不同的事情吗？”&lt;/p&gt;

&lt;p&gt;假如你能针对这几个问题，&lt;br /&gt;
给我你的回答的话，&lt;br /&gt;
那我知道有一家很好吃的蛋糕店，&lt;br /&gt;
我请你吃。&lt;/p&gt;

&lt;p&gt;希望世界和平。&lt;br /&gt;
Carpe Diem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>怎么写Bug</title>
      <link>https://liriansu.com/posts/2017-09-20-how-to-write-bugs/</link>
      <pubDate>Wed, 20 Sep 2017 19:49:38 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-20-how-to-write-bugs/</guid>
      <description>&lt;p&gt;时至今日，&lt;br /&gt;
笔者已经有十年以上的写Bug经验了。&lt;br /&gt;
是时候给各位想写Bug但还不够熟练的同学们，&lt;br /&gt;
分享一些写Bug的心得了。&lt;/p&gt;

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;诚实地说，&lt;br /&gt;
写Bug本身并不是一件很光荣的事情。&lt;br /&gt;
但是写了一个很隐蔽/影响很大/看起来像是Feature的Bug，&lt;br /&gt;
然后再修复它，&lt;br /&gt;
就是一件伟大的事情了。&lt;br /&gt;
往往在你的行云流水般的bugfix代码下，&lt;br /&gt;
&lt;a href=&#34;https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/commit/a047be85247755cdbe0acce6#diff-1&#34;&gt;还能收获围观群众的666666惊呼&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
写Bug的技巧可以分为下面几个维度：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;开发功能&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;测试是懦夫的行为&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不要让外界发现Bug&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Warning? 不存在的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;复制别人的代码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;遵循历史规律，不轻易改变&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用中间状态完成功能&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;培养习惯&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;所有情况下都拥抱变化&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;配置个性化的开发环境&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;少做自动化的无用功&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;同时开展多个工作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;信任他人的实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;永远充满自信&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;与人交流&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;永远只实现90%的方案&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;永远只实现100%的方案&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Code Review时也不解释自己的代码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为Bug的合理性辩护&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;适当指责别人写的不好&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;后期维护&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;当权责分明的人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;信奉无知即无罪&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;分担权责到用户和运营上&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;多写代码，生产力=破坏力&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面就让笔者依次为你讲解具体的写Bug技巧。&lt;/p&gt;

&lt;h2 id=&#34;开发功能&#34;&gt;开发功能&lt;/h2&gt;

&lt;h3 id=&#34;测试是懦夫的行为&#34;&gt;测试是懦夫的行为&lt;/h3&gt;

&lt;p&gt;Bug的天敌之一就是完善的测试，&lt;br /&gt;
为了写更多的Bug，&lt;br /&gt;
我们需要减少测试的量。&lt;br /&gt;
但是不写测试道义上说不过去，&lt;br /&gt;
所以我们要合理用一些话术来解释：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这个功能很简单，不用写测试。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个功能太复杂，不想写测试。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个功能是临时上的，不写测试了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个功能我们写不了测试。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;放心吧，我写的代码稳得一笔，包准没有Bug。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更高级的做法是自己开发功能的时候，&lt;br /&gt;
先手动测试保证完善了。&lt;br /&gt;
但是几个月以后，&lt;br /&gt;
别人再改动相关代码的时候，&lt;br /&gt;
就神不知鬼不觉地写了几个Bug进去了。&lt;/p&gt;

&lt;h3 id=&#34;不要让外界发现bug&#34;&gt;不要让外界发现Bug&lt;/h3&gt;

&lt;p&gt;Bug是十分引人讨厌的，&lt;br /&gt;
基本上被发现了都会被修复。&lt;br /&gt;
那针对这个，&lt;br /&gt;
我们有两种操作可以做：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;让Bug不被发现&lt;/strong&gt;。&lt;br /&gt;
编码过程中，&lt;br /&gt;
多用&lt;code&gt;catch Exception { ignore(); }&lt;/code&gt;这样的操作，&lt;br /&gt;
或者就把Bug的信息记到一个没人看的日志文件里面。&lt;br /&gt;
这样前一个操作做错了，&lt;br /&gt;
后面的操作还能接着做下去，&lt;br /&gt;
说不定就像小学数学题一样：&lt;br /&gt;
过程是错的，结果却是对的呢？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;让Bug不被修复&lt;/strong&gt;。&lt;br /&gt;
这个其实很简单，&lt;br /&gt;
只要我们写一个基于概率性假设的Feature就行了。&lt;br /&gt;
比如经典的&lt;code&gt;race condition&lt;/code&gt;，&lt;br /&gt;
在高并发的情况下同时改某一个变量，&lt;br /&gt;
或者是npm的包不锁死版本，&lt;br /&gt;
然后不同时间依次部署在多个环境上…&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;warning-不存在的&#34;&gt;Warning? 不存在的&lt;/h3&gt;

&lt;p&gt;代码里面有Warning是极其正常的事情，&lt;br /&gt;
我们只要保证代码能编译运行就行了。&lt;br /&gt;
IDE的大部分灰色/黄色/下划线都是一些强迫症程序员做的功能，&lt;br /&gt;
我们应当关掉IDE的这些警告。&lt;/p&gt;

&lt;p&gt;还有Lint工具，&lt;br /&gt;
更多是用来检查拼写的。&lt;br /&gt;
每个人的代码习惯都不一样，&lt;br /&gt;
我们应当尊重个人差异，&lt;br /&gt;
只要有习惯不一致的地方，&lt;br /&gt;
就应当关掉Linter对应的检查。&lt;/p&gt;

&lt;h3 id=&#34;多复制别人的代码&#34;&gt;多复制别人的代码&lt;/h3&gt;

&lt;p&gt;程序员业界有一句流传两百多年的俗话，叫：&lt;br /&gt;
“不要重复造轮子”。&lt;/p&gt;

&lt;p&gt;所以我们应当多复制现成的代码，&lt;br /&gt;
这样一个Bug就会被复制成了两个。&lt;br /&gt;
而且以后新版本里，那部分代码的Bug被修复了，&lt;br /&gt;
但肯定没人会发现我们也复制了一份代码，&lt;br /&gt;
这里还有一个Bug。&lt;/p&gt;

&lt;p&gt;当我们要定制化部分第三方依赖库里的代码时，&lt;br /&gt;
少用继承和组合，&lt;br /&gt;
多用复制和粘贴，&lt;br /&gt;
然后在我们需要的地方加上定制化的改动就行了。&lt;/p&gt;

&lt;h3 id=&#34;遵循历史规律-不轻易改变&#34;&gt;遵循历史规律，不轻易改变&lt;/h3&gt;

&lt;p&gt;很多时候以前的代码写成这样是有原因的。&lt;br /&gt;
中国有句老话叫“萧规曹随”，&lt;br /&gt;
写程序里的意思就是“之前的代码就是这么实现的，我也应该要这么写”。&lt;/p&gt;

&lt;p&gt;这样虽然我们只能在新的业务里引进新的Bug，&lt;br /&gt;
但是旧的业务的Bug我们可以继承过来呀。&lt;br /&gt;
而且把这一条技巧和上一条技巧结合起来就更佳了，&lt;br /&gt;
“复制以前的历史代码”，&lt;br /&gt;
是大大减少写Bug的工作量的一条捷径。&lt;/p&gt;

&lt;h3 id=&#34;用中间状态完成功能&#34;&gt;用中间状态完成功能&lt;/h3&gt;

&lt;p&gt;工作中写的代码大体上会分为技术代码和业务代码两部分。&lt;br /&gt;
业务代码很不好玩，&lt;br /&gt;
而且会有一个明确的deadline。&lt;/p&gt;

&lt;p&gt;这个时候我们就要心中冥想“这个我要快点写完”，&lt;br /&gt;
口中默念“这个很容易实现”，&lt;br /&gt;
一边解释“先猥琐一点实现了，后面再整理一下”，&lt;br /&gt;
再依靠我们的编程素养三下五除二地解决问题。&lt;/p&gt;

&lt;p&gt;虽然这样写出来的Bug生命周期不会太长，&lt;br /&gt;
但是万一后面大家都很忙，忘了这里有个中间状态，&lt;br /&gt;
那一些Bug的生命就会很长了！超棒！&lt;/p&gt;

&lt;h2 id=&#34;培养习惯&#34;&gt;培养习惯&lt;/h2&gt;

&lt;h3 id=&#34;所有情况下都拥抱变化&#34;&gt;所有情况下都拥抱变化&lt;/h3&gt;

&lt;p&gt;现代软件开发世界里有一个真理，&lt;br /&gt;
叫&lt;strong&gt;“需求一直是变化的”&lt;/strong&gt;。&lt;br /&gt;
根据逻辑学来看：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;因为需求一直是变化的，&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;又因为代码是要实现需求的，&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;所以代码也一直是变化的。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们写出一个又一个新的Bug就有了坚实的理论基础。&lt;/p&gt;

&lt;p&gt;而且这里还有一个酷炫小技巧就是，&lt;br /&gt;
最开始的系统设计一般都是简单的，&lt;br /&gt;
最开始的时间也是很充裕的，&lt;br /&gt;
但是往往变化的时间会比较急促。&lt;br /&gt;
所以只要我们大胆拥抱变化，承诺“这周内都能实现”，&lt;br /&gt;
这里就会有一个很小但充裕的时间让我们发挥，&lt;br /&gt;
写出一些别人根本设计不出来的Bug。&lt;/p&gt;

&lt;h3 id=&#34;配置个性化的开发环境&#34;&gt;配置个性化的开发环境&lt;/h3&gt;

&lt;p&gt;开发环境永远，永远不要跟生产环境保持一致：&lt;br /&gt;
因为生产环境一般来说是Linux，Linux太无趣了。&lt;br /&gt;
我们应当用一些像Windows/MacOS这样不区分大小写的宽松的系统，&lt;br /&gt;
来当我们的开发环境。&lt;/p&gt;

&lt;p&gt;用自己的电脑开发的时候，为了自己心情愉悦，&lt;br /&gt;
可以在全局装一些好看的字体、很好用的第三方库，&lt;br /&gt;
然后适当地在代码中引用这些定制化的很棒的工具。&lt;br /&gt;
同时测试时永远用最新版的软件，&lt;br /&gt;
比如浏览器、客户端、代码版本等。&lt;/p&gt;

&lt;p&gt;当别人疑惑地报了个疑似Bug的问题时，&lt;br /&gt;
你可以自豪地回复：“我这是好的。”&lt;/p&gt;

&lt;h3 id=&#34;少做自动化的无用功&#34;&gt;少做自动化的无用功&lt;/h3&gt;

&lt;p&gt;假如一个自动化程序有Bug，&lt;br /&gt;
那这个Bug被修复以后就很难被重新引入。&lt;/p&gt;

&lt;p&gt;但是假如我们每次做一些数据上的操作，&lt;br /&gt;
都直接调用代码，&lt;br /&gt;
或者是写一些一次性的脚本来“自动化”这个操作，&lt;br /&gt;
那我们每次都有机会引入全新的Bug。&lt;/p&gt;

&lt;p&gt;虽然手动操作会耗费我们更多的时间，&lt;br /&gt;
但是它能带来更多Bug的可能性呀~&lt;/p&gt;

&lt;h3 id=&#34;同时开展多个工作&#34;&gt;同时开展多个工作&lt;/h3&gt;

&lt;p&gt;厉害的人永远不会只在一个项目上留下他的Bug。&lt;/p&gt;

&lt;p&gt;我们也要当这样的人，&lt;br /&gt;
所以就像“能力越强，责任越大”说的一样，&lt;br /&gt;
在同一时刻我们要敢于承担多个任务。&lt;br /&gt;
这里的任务可大可小，&lt;br /&gt;
但是每个任务都要是不同方面的，&lt;br /&gt;
假如不仅是紧急的任务，&lt;br /&gt;
还时不时会有利益相关的人来催一下就更好了。&lt;/p&gt;

&lt;p&gt;这样我们在完成多个任务的时候，&lt;br /&gt;
还可以充分体验“上下文切换”的快感，&lt;br /&gt;
然后在多个项目上都留下了自己的印记。&lt;/p&gt;

&lt;h3 id=&#34;信任他人的实现&#34;&gt;信任他人的实现&lt;/h3&gt;

&lt;p&gt;正如小学、初中、高中每几年都要学一遍的《珍珠鸟》讲的那样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;信赖，往往创造出美好的境界。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为单纯可爱的程序员，&lt;br /&gt;
我们也要信任他人。&lt;br /&gt;
信任用户这么聪明，肯定能看得懂报错，&lt;br /&gt;
信任产品经理给的需求，肯定简单，&lt;br /&gt;
信任设计师给的图，肯定容易实现；&lt;br /&gt;
信任前端传入的数据，肯定是合法的，&lt;br /&gt;
信任传入合法数据时，后端的接口肯定不会报错；&lt;br /&gt;
信任测试过的代码，上线了肯定没问题，&lt;br /&gt;
信任第三方的库，小版本肯定不会改兼容性，&lt;br /&gt;
信任这么贵的服务，效果肯定比MySQL好。&lt;/p&gt;

&lt;p&gt;而且就算这种时候出了Bug，&lt;br /&gt;
我们也可以解释呀~&lt;br /&gt;
又不是我们的问题，&lt;br /&gt;
这个Bug，写的精妙吧。&lt;/p&gt;

&lt;h3 id=&#34;永远充满自信-不用写注释&#34;&gt;永远充满自信，不用写注释&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/pareto-rule-of-programmers&#34;&gt;世界上20%的程序员&lt;/a&gt;，&lt;br /&gt;
写出了80%的&lt;del&gt;程序&lt;/del&gt;Bug。&lt;br /&gt;
一般来说，看到这篇文章的程序员，&lt;br /&gt;
应该都是属于top 20%。&lt;/p&gt;

&lt;p&gt;虽然说三年前的代码我不一定想的起来，&lt;br /&gt;
但是一年前的代码自己应该看得懂，&lt;br /&gt;
所以一般情况知道是自己维护的话，&lt;br /&gt;
就不用写多少注释了。&lt;/p&gt;

&lt;p&gt;而且像我们这种英文很好的人，&lt;br /&gt;
写注释肯定是用英文的。&lt;br /&gt;
不过又担心看代码的人英文不一定好，&lt;br /&gt;
所以还是不写注释了。&lt;/p&gt;

&lt;p&gt;基于自信的基础上，&lt;br /&gt;
我们还可以觉得所有自己写的Bug都是可以修复的，&lt;br /&gt;
所以一些暂时的Bug不用太重视，&lt;br /&gt;
所谓&lt;code&gt;When there&#39;s a bug, there&#39;s a fix.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;与人交流&#34;&gt;与人交流&lt;/h2&gt;

&lt;h3 id=&#34;永远只实现90-的方案&#34;&gt;永远只实现90%的方案&lt;/h3&gt;

&lt;p&gt;老程序员之间会口口相传的一句道理叫：&lt;br /&gt;
“相比于覆盖100%的复杂设计，我更喜欢覆盖90%的简单设计。”&lt;/p&gt;

&lt;p&gt;虽然这样子写不出来100%的Bug了，&lt;br /&gt;
但其实根据这个原则，&lt;br /&gt;
我们可以把放弃掉的10%用户都看成是一个巨大Bug。&lt;/p&gt;

&lt;p&gt;这么看起来，&lt;br /&gt;
我们在更少的工作量情况下，&lt;br /&gt;
完成了更大的Bug，&lt;br /&gt;
其实效率更高了呢。&lt;/p&gt;

&lt;h3 id=&#34;永远实现100-的方案&#34;&gt;永远实现100%的方案&lt;/h3&gt;

&lt;p&gt;中国的智慧长者们会讲一句东方谚语，叫：&lt;br /&gt;
“行百里者半九十。”&lt;/p&gt;

&lt;p&gt;当我们做一个系统设计/业务实现时，&lt;br /&gt;
假如不能做到最好，&lt;br /&gt;
不考虑完所有的情况，&lt;br /&gt;
那其实相当于整个功能没有实现。&lt;/p&gt;

&lt;p&gt;软件合理的流程应该是一开始设计好整个系统，&lt;br /&gt;
然后再开发，一次性全部上线，&lt;br /&gt;
之后再整理上一次的Bug，&lt;br /&gt;
伙同下一次的所有设计、功能再上线。&lt;br /&gt;
这样旧的Bug也可以活得更久，&lt;br /&gt;
新的Bug也可以持续上线。&lt;/p&gt;

&lt;p&gt;在100%的方案里面，&lt;br /&gt;
Bug虽然会减少一部分，&lt;br /&gt;
但是我们可以分散写Bug的权责，&lt;br /&gt;
最终设计、实现、测试、上线整个流程的所有人都是Bug的父母。&lt;/p&gt;

&lt;h3 id=&#34;code-review时也不解释自己的代码&#34;&gt;Code Review时也不解释自己的代码&lt;/h3&gt;

&lt;p&gt;随着现代软件开发流程的普及，&lt;br /&gt;
大部分程序员用上了Git等版本控制工具。&lt;br /&gt;
但是这些只不过是上传代码的工具，&lt;br /&gt;
即使是版本控制跟项目流程工具结合时，&lt;br /&gt;
我们也应当相信个人的力量。&lt;/p&gt;

&lt;p&gt;发Code Review时利用好自动发邮件功能，&lt;br /&gt;
少解释代码逻辑，多催别人“快approve我的代码”。&lt;br /&gt;
因为小的Code Review比较容易看，&lt;br /&gt;
写的Bug会被一眼看穿，&lt;br /&gt;
所以更棒的做法是发一次改动几百上千行的大的PR。&lt;br /&gt;
这样不仅能显示我们的工作量，&lt;br /&gt;
还能让别人对Review我们的代码望而生怯。&lt;/p&gt;

&lt;p&gt;久而久之，&lt;br /&gt;
别人只能Review我们的代码风格，&lt;br /&gt;
然后Bug们就能隐藏在代码逻辑里，&lt;br /&gt;
在开发环境、测试环境、生产环境之间遨游了。&lt;/p&gt;

&lt;h3 id=&#34;适当指责别人写的不好&#34;&gt;适当指责别人写的不好&lt;/h3&gt;

&lt;p&gt;假如以上的技巧你都掌握了的话，&lt;br /&gt;
那恭喜你，成为了一个写Bug中级工程师。&lt;br /&gt;
此时你不仅拥有了写Bug的权利，&lt;br /&gt;
你还拥有了指责别人的权利。&lt;/p&gt;

&lt;p&gt;当然，我们不能上升到人身攻击，&lt;br /&gt;
所以我们应该主要攻击别人的代码：&lt;br /&gt;
“你这么写不好”&lt;br /&gt;
“我觉得这样写不行”&lt;br /&gt;
“你这么写以后会有Bug”&lt;/p&gt;

&lt;p&gt;为了保持神秘，我们也要少跟别人解释为什么/什么是好代码什么是坏代码。&lt;br /&gt;
心态好的人被指责了，可能会去查谷歌，从而写更少的Bug；&lt;br /&gt;
心态不好的人被指责了，他可能会怀疑自己不适合干这一行。&lt;/p&gt;

&lt;p&gt;总的来说，跟我们写Bug竞争的人会变少。&lt;br /&gt;
这样我们下次敞开写Bug的时候，&lt;br /&gt;
还能反驳“你也写了一个Bug”。&lt;/p&gt;

&lt;h3 id=&#34;为bug的合理性辩护&#34;&gt;为Bug的合理性辩护&lt;/h3&gt;

&lt;p&gt;Bug也分很多种，&lt;br /&gt;
不同的场景会催生不同的Bug，&lt;br /&gt;
严重性、时效性、后果也各有不同。&lt;br /&gt;
写Bug的确是再正常不过的日常了。&lt;/p&gt;

&lt;p&gt;根据“存在即合理”的说法，&lt;br /&gt;
我们要勇于为自己的Bug辩护，&lt;br /&gt;
主要的话术可以聚集以上的技巧，&lt;br /&gt;
总结精华如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;怎么重现的？我电脑上是好的，你确定你操作没问题？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这种是边缘情况，不要这么操作就行，可以忽略。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;以前就是这么实现的，这不是Bug，这是Feature。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;最开始是好的，是改需求改挂的，假如需求不改就不会挂了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;跑脚本跑错了，改一下重跑就行。数据的问题，怎么能叫Bug呢？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个功能不是我写的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个Code Review的时候，A君没有看出来。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个测试的时候，B君没有测出来。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;牢记以上话术，&lt;br /&gt;
适当时候抛出，&lt;br /&gt;
写Bug时心里的底气就会更足了。&lt;/p&gt;

&lt;h2 id=&#34;后期维护&#34;&gt;后期维护&lt;/h2&gt;

&lt;h3 id=&#34;当权责分明的人&#34;&gt;当权责分明的人&lt;/h3&gt;

&lt;p&gt;一个五千多年历史的文明古国里流传着这么一句话：&lt;br /&gt;
“不在其位，不谋其政。”&lt;/p&gt;

&lt;p&gt;意思是“别人写的代码，我们不用管。别人写的Bug，我们不用修”。&lt;br /&gt;
现代工具提供了很便利的历史记录功能，&lt;br /&gt;
比如Git的话可以使用&lt;code&gt;git blame&lt;/code&gt;，&lt;br /&gt;
这样的功能可以让我们快速定位某个Bug是谁写的。&lt;/p&gt;

&lt;p&gt;平常跟别人讨论代码的时候，&lt;br /&gt;
多用“你的代码”、“我的代码”、“他的代码”等指代副词加强代码归属感，&lt;br /&gt;
这样出了Bug以后，别人是甩不了锅的。&lt;br /&gt;
虽然这样的操作弊端是我们自己写的Bug，&lt;br /&gt;
也得我们自己修复。&lt;br /&gt;
但是依照上文的操作，&lt;br /&gt;
我们肯定可以把锅给甩掉。&lt;/p&gt;

&lt;p&gt;总而言之就是一句话：&lt;br /&gt;
Bug都是人写的，&lt;br /&gt;
不是你写的，就是我写的。&lt;/p&gt;

&lt;p&gt;当权责分明的人，&lt;br /&gt;
这样别人就不会对我们的代码感兴趣，&lt;br /&gt;
我们自己的代码，&lt;br /&gt;
想写多少Bug就写多少Bug。&lt;/p&gt;

&lt;h3 id=&#34;信奉无知即无罪&#34;&gt;信奉无知即无罪&lt;/h3&gt;

&lt;p&gt;无知者究竟无罪还是有罪是吃瓜群众们很喜欢争论的话题，&lt;br /&gt;
但在我们写Bug的程序员业界，&lt;br /&gt;
很显然：无知者无罪。&lt;/p&gt;

&lt;p&gt;比如我们要用一个第三方库，怎么用呢？&lt;br /&gt;
百度一下，找到的第一段代码复制粘贴下来就行了。&lt;br /&gt;
我们不一定要去理解所有的代码原理是什么的，&lt;br /&gt;
因为要实现功能的需求更紧迫嘛。&lt;br /&gt;
就算出Bug了怎么办？&lt;br /&gt;
无知者无罪，&lt;br /&gt;
我又不知道这样会有Bug。&lt;/p&gt;

&lt;p&gt;不太清楚这里要怎么操作，&lt;br /&gt;
求A君写一段代码发我。&lt;br /&gt;
虽然我还是不太清楚具体操作，&lt;br /&gt;
但是这段代码是A君写的，&lt;br /&gt;
这样有Bug了有罪的也是他。&lt;br /&gt;
而且我之后调用出了问题，&lt;br /&gt;
也可以写出不少blame到他头上的Bug呢。&lt;/p&gt;

&lt;p&gt;无知即无罪，就是：&lt;br /&gt;
我们写程序的时候，&lt;br /&gt;
不需要懂得每一行程序的原理，&lt;br /&gt;
能用就行了，&lt;br /&gt;
这样程序出问题了，&lt;br /&gt;
也怪不到我头上。&lt;br /&gt;
毕竟谁没个菜鸟的时候呢？&lt;/p&gt;

&lt;h3 id=&#34;分担权责到用户和运营上&#34;&gt;分担权责到用户和运营上&lt;/h3&gt;

&lt;p&gt;技术肯定是不能解决一切问题的，&lt;br /&gt;
而且技术肯定不能解决人的问题。&lt;/p&gt;

&lt;p&gt;所以很多时候的Bug，&lt;br /&gt;
不是我们实现的不对，&lt;br /&gt;
而是用户的操作不对。&lt;/p&gt;

&lt;p&gt;这个工具是写给程序员用的，&lt;br /&gt;
他们都很聪明，&lt;br /&gt;
就不用写那么完善了，&lt;br /&gt;
适当报个&lt;code&gt;NullPointerException&lt;/code&gt;,&lt;br /&gt;
他们肯定能读懂trace，&lt;br /&gt;
报个&lt;code&gt;segmentation fault&lt;/code&gt;,&lt;br /&gt;
他们肯定会用&lt;code&gt;gdb&lt;/code&gt;逐步调试的吧。&lt;/p&gt;

&lt;p&gt;这个工具最终是运营用的，&lt;br /&gt;
&lt;code&gt;end user&lt;/code&gt;可以培训的，&lt;br /&gt;
所以就不用太好用了，&lt;br /&gt;
功能做出来就行。&lt;br /&gt;
适当报个400，&lt;br /&gt;
教一下用户用console看一下就行了。&lt;br /&gt;
不是所有情况的500都是用不了的bug，&lt;br /&gt;
有些情况只要那么操作就可以解决了。&lt;/p&gt;

&lt;p&gt;用户怎么不懂呢？&lt;br /&gt;
这，也是另一种意义上的Bug吧。&lt;/p&gt;

&lt;h3 id=&#34;多写代码-生产力-破坏力&#34;&gt;多写代码，生产力=破坏力&lt;/h3&gt;

&lt;p&gt;好了，孙子兵法三十五计都看完了，&lt;br /&gt;
最后一步，那当然是提升生产力了。&lt;/p&gt;

&lt;p&gt;只要你熟读本文，&lt;br /&gt;
掌握了Bug生产之术，&lt;br /&gt;
那你勤于加班，&lt;br /&gt;
多写代码&lt;br /&gt;
肯定能掌握Bug大生产之术。&lt;/p&gt;

&lt;p&gt;就像中国神话里一位叫“愚公”的人说的，&lt;br /&gt;
写Bug也一样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;虽我之死，无子存焉；&lt;br /&gt;
但100行代码里有51个Bug，&lt;br /&gt;
修了1个，还有78个Bug；&lt;br /&gt;
虽码不加增，Bug无穷匮也。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还是要继续修炼也。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/4758.html&#34;&gt;&lt;em&gt;本文思想仿《如何写出无法维护的代码》&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我眼中的大佬们</title>
      <link>https://liriansu.com/posts/2017-09-16-interesting-humans/</link>
      <pubDate>Sat, 16 Sep 2017 16:07:46 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-16-interesting-humans/</guid>
      <description>&lt;p&gt;近期有一个表情“给大佬递茶”用的蛮多的，&lt;br /&gt;
我理解的“大佬”的含义，&lt;br /&gt;
就是“三人行，必有我师焉”里的“师”一样的含义。&lt;/p&gt;

&lt;p&gt;最近&lt;a href=&#34;https://www.zhihu.com/people/su-zi-yue-50/activities&#34;&gt;因为在公众场合吹的牛逼多了&lt;/a&gt;，&lt;br /&gt;
有些不明真相的群众可能觉得我也是大佬。&lt;br /&gt;
我心有点惶恐，&lt;br /&gt;
于是打算给诸位介绍一下我眼中的大佬们。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DISCLAIMER:&lt;/p&gt;

&lt;p&gt;本文没有客观事实，都是主观观点。&lt;br /&gt;
假如有不恰当的地方，那都是我观点不恰当。&lt;/p&gt;

&lt;p&gt;这些大佬基本都是我认识他，但他不认识我，&lt;br /&gt;
没有利益相关。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;jeff-atwood-jeff-stack-overflow-so-的创始人&#34;&gt;&lt;a href=&#34;https://blog.codinghorror.com/about-me/&#34;&gt;Jeff Atwood&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; 的创始人&lt;/h2&gt;

&lt;p&gt;在我&lt;a href=&#34;https://liriansu.com/read-blogs-to-write-blogs&#34;&gt;刚开始补个人博客的有段时间&lt;/a&gt;里，&lt;br /&gt;
我&lt;del&gt;单方面&lt;/del&gt;认识了很多大佬，&lt;br /&gt;
学习了非常多的博客文章，&lt;br /&gt;
&lt;a href=&#34;https://blog.codinghorror.com/about-me/&#34;&gt;Jeff Atwood (下称 Jeff)&lt;/a&gt; 的 &lt;a href=&#34;https://blog.codinghorror.com/&#34;&gt;codinghorror.com&lt;/a&gt; 就是其中之一。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.codinghorror.com/about-me/&#34;&gt;他的 About Me 页面&lt;/a&gt;写的特别认真，&lt;br /&gt;
至少我很喜欢这种风格：&lt;br /&gt;
在单个页面内，&lt;br /&gt;
首先介绍自己，&lt;br /&gt;
再讲一些微不足道的经历，&lt;br /&gt;
最后主要讲自己的三观（世界/人生/价值）。&lt;/p&gt;

&lt;p&gt;作为 &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;SO&lt;/a&gt; founder,&lt;br /&gt;
&lt;a href=&#34;https://blog.codinghorror.com/about-me/&#34;&gt;Jeff&lt;/a&gt; 大概在业界也是知名的，&lt;br /&gt;
这方面我了解的不多。&lt;br /&gt;
不过他讲的几个事情我记得很牢：&lt;/p&gt;

&lt;p&gt;一个是&lt;a href=&#34;https://blog.codinghorror.com/on-the-meaning-of-coding-horror/&#34;&gt;网站名称的由来&lt;/a&gt;，&lt;br /&gt;
就是&lt;a href=&#34;https://book.douban.com/subject/1477390/&#34;&gt;《代码大全》&lt;/a&gt; &lt;a href=&#34;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&#34;&gt;(Code Complete)&lt;/a&gt; 这本书里的小标题：&lt;br /&gt;
Coding Horror, 翻译成中文大概是“屎代码”的意思。&lt;br /&gt;
于是我也去补完了&lt;a href=&#34;https://book.douban.com/subject/1477390/&#34;&gt;《代码大全》的中文版&lt;/a&gt;，&lt;br /&gt;
感觉虽然是有点年代的书，&lt;br /&gt;
但里面讲的一些程序员的劣习，&lt;br /&gt;
也是中枪无数。&lt;br /&gt;
于是看完了中文版以后，&lt;br /&gt;
我又很饥渴地把&lt;a href=&#34;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&#34;&gt;英文原版&lt;/a&gt;也学习了一遍。&lt;/p&gt;

&lt;p&gt;还有一个就是写博客。&lt;br /&gt;
Jeff 曾&lt;a href=&#34;https://blog.codinghorror.com/fear-of-writing/&#34;&gt;多次&lt;/a&gt;讲到在他心目中，&lt;br /&gt;
&lt;a href=&#34;https://blog.codinghorror.com/how-to-write-without-writing/&#34;&gt;写作是自我学习的很好的方式&lt;/a&gt;。&lt;br /&gt;
不过他自己写博客主要是想找个地方记一下好玩的事情。&lt;/p&gt;

&lt;h2 id=&#34;陈皓-haoel-haoel-weibo-酷壳的站长-haoel&#34;&gt;&lt;a href=&#34;https://weibo.com/haoel&#34;&gt;陈皓，haoel&lt;/a&gt;, &lt;a href=&#34;https://coolshell.cn/haoel&#34;&gt;酷壳的站长&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/haoel&#34;&gt;陈皓（下称耗子叔）对自己的描述&lt;/a&gt;是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大家好，我是陈皓，&lt;br /&gt;
我不是高手，我也不是牛人，&lt;br /&gt;
我只是在跟随着我的兴趣和喜好去学习一些技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过在我眼中，&lt;br /&gt;
他是我认识的寥寥几个&lt;a href=&#34;https://coolshell.cn/articles/17446.html&#34;&gt;做编程技术十多年&lt;/a&gt;的人，&lt;br /&gt;
即使现在可能充当了CTO的角色，&lt;br /&gt;
但依然&lt;del&gt;在写代码&lt;/del&gt;奋战在技术一线。&lt;/p&gt;

&lt;p&gt;他的很多文章传播的比他的名字要广，&lt;br /&gt;
（换种说法就是被各大编程营销号转载过）&lt;br /&gt;
比如&lt;a href=&#34;https://coolshell.cn/articles/4990.html&#34;&gt;《程序员练级攻略》&lt;/a&gt;，&lt;br /&gt;
比如&lt;a href=&#34;https://coolshell.cn/articles/9308.html&#34;&gt;《“做环保的程序员，从不用百度开始”》&lt;/a&gt;，&lt;br /&gt;
耗子叔也会用很地道的语言汉化一些有趣的文章，&lt;br /&gt;
比如&lt;a href=&#34;https://coolshell.cn/articles/4758.html&#34;&gt;《如何写出无法维护的代码》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些文章里总有一种很好闻的程序的味道，&lt;br /&gt;
我很喜欢。&lt;br /&gt;
能从这里那里学到一些&lt;a href=&#34;https://coolshell.cn/articles/17497.html&#34;&gt;一线工程师的很酷的想法&lt;/a&gt;，&lt;br /&gt;
也算是每天进步一点点了。&lt;/p&gt;

&lt;h2 id=&#34;曹政-caoz-caoz&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/people/cao-zheng/activities&#34;&gt;曹政，caoz&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;前阵子跟&lt;a href=&#34;https://www.zhihu.com/people/jia-jia-15-81&#34;&gt;张总&lt;/a&gt;坐地铁聊天的时候，&lt;br /&gt;
我问他除了&lt;a href=&#34;https://blog.xiqiao.info/&#34;&gt;西乔&lt;/a&gt;&lt;a href=&#34;https://blog.devep.net/virushuo/&#34;&gt;霍炬&lt;/a&gt;，&lt;br /&gt;
还有啥很棒的公众号，求推荐一下。&lt;/p&gt;

&lt;p&gt;他先是翻出了&lt;a href=&#34;https://weixin.sogou.com/weixin?type=1&amp;amp;query=mactalkpro&#34;&gt;MacTalk&lt;/a&gt;, &lt;a href=&#34;https://weixin.sogou.com/weixin?type=1&amp;amp;query=tiny4voice&#34;&gt;TinyFool&lt;/a&gt;, &lt;a href=&#34;https://weixin.sogou.com/weixin?type=1&amp;amp;query=angelatalk&#34;&gt;嘀嗒嘀嗒&lt;/a&gt;等&lt;br /&gt;
商业互吹（此处褒义）的公众号小圈子推荐给我，&lt;br /&gt;
然后我们向往了一下这种大佬都是互相认识的氛围。&lt;br /&gt;
我又给他推荐了好像&lt;a href=&#34;https://weixin.sogou.com/weixin?type=1&amp;amp;query=kesoview&#34;&gt;跟雷军、张小龙都很熟的keso&lt;/a&gt;。&lt;br /&gt;
最后他把珍藏多年的&lt;a href=&#34;https://www.zhihu.com/people/cao-zheng/activities&#34;&gt;曹政（下称caoz）&lt;/a&gt;的公众号介绍了给我&lt;a href=&#34;https://weixin.sogou.com/weixin?type=1&amp;amp;query=caozsay&#34;&gt;（公众号：caoz的梦呓）&lt;/a&gt;，&lt;br /&gt;
张总介绍说&lt;a href=&#34;https://www.zhihu.com/question/19596615/answer/14322195&#34;&gt;他是4399的技术大牛&lt;/a&gt;，&lt;br /&gt;
大家都叫他曹总什么什么的。&lt;br /&gt;
当时我心里就简单地把&lt;a href=&#34;https://www.zhihu.com/people/cao-zheng/activities&#34;&gt;caoz&lt;/a&gt;跟&lt;a href=&#34;https://www.zhihu.com/people/fenng/activities&#34;&gt;Fenng&lt;/a&gt;打上了一样的标签。&lt;/p&gt;

&lt;p&gt;不过后来他发的好多篇公众号文章给我看改观了：&lt;br /&gt;
我发现caoz这个人，有意思。&lt;br /&gt;
比如他跟keso都会发文章搞事，&lt;br /&gt;
但他们不太一样。&lt;br /&gt;
keso喜欢怼大势，&lt;br /&gt;
就是xxx改变世界，&lt;br /&gt;
xxx不是好的方向，&lt;br /&gt;
格局很大，气势很足。&lt;br /&gt;
caoz喜欢怼具体的事情，&lt;br /&gt;
比如割韭菜 + 无数的举例，&lt;br /&gt;
而且也会表露出对具体的人的厌恶。&lt;/p&gt;

&lt;p&gt;caoz这样更容易招黑，&lt;br /&gt;
&lt;del&gt;粉丝也不容易涨&lt;/del&gt;&lt;br /&gt;
不过他也不care,&lt;br /&gt;
想说什么照样说，&lt;br /&gt;
而且还会故意说些“洗粉”的真话，&lt;br /&gt;
很是肆意。&lt;/p&gt;

&lt;p&gt;排除一些我并不赞同的道理，&lt;br /&gt;
caoz讲的很多道理都句句到点，&lt;br /&gt;
有实际事情支持，&lt;br /&gt;
的确能学到不少。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;//此处都是主观感受，缺少引用，因为找不到怎么生成微信文章的永久链接…&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;王垠-yin-完全用linux工作-work-with-linux-的作者&#34;&gt;&lt;a href=&#34;https://www.yinwang.org/&#34;&gt;王垠&lt;/a&gt;，&lt;a href=&#34;https://www.douban.com/group/topic/12121637/&#34;&gt;《完全用Linux工作》&lt;/a&gt;的作者&lt;/h2&gt;

&lt;p&gt;王垠（下称垠神），博客是 &lt;a href=&#34;https://www.yinwang.org/&#34;&gt;当然我在扯淡 (https://www.yinwang.org/)&lt;/a&gt;&lt;br /&gt;
早年间一篇&lt;a href=&#34;https://www.douban.com/group/topic/12121637/&#34;&gt;《完全用Linux工作》&lt;/a&gt;收获了很多迷弟，&lt;br /&gt;
后来的好几篇文章，比如&lt;a href=&#34;https://www.yinwang.org/blog-cn/2017/05/10/microsoft-separation&#34;&gt;《微软的秘密离职协议》&lt;/a&gt;也收获了很多黑子。&lt;br /&gt;
在我心目中，垠神是知乎三大话题性程序员之一&lt;br /&gt;
（还有一个是&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25031872&#34;&gt;曾博（现已永久退出知乎）&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;撇去别的，&lt;a href=&#34;https://www.zhihu.com/question/20102511&#34;&gt;垠神的本身经历使得他这个人充满了话题性&lt;/a&gt;。&lt;br /&gt;
首先是敢于表达刺耳的个人想法（并且多年没变），&lt;br /&gt;
光这一点并不是垠神过人之处，&lt;br /&gt;
垠神还会辩证地思考问题，&lt;br /&gt;
敢于在公众前表达对事物两面性的思考。&lt;br /&gt;
比如他最开始被大众所知是因为&lt;a href=&#34;https://www.douban.com/group/topic/12121637/&#34;&gt;《完全用Linux工作》&lt;/a&gt;一文，&lt;br /&gt;
但是多年以后他又发了&lt;a href=&#34;https://www.douban.com/group/topic/44818003/&#34;&gt;《谈Linux，Windows和Mac》&lt;/a&gt;一文。&lt;br /&gt;
又比如他最开始&lt;a href=&#34;https://www.zhihu.com/question/50128385&#34;&gt;加入了微软&lt;/a&gt;，&lt;br /&gt;
然后又&lt;a href=&#34;https://www.yinwang.org/blog-cn/2017/04/11/strike&#34;&gt;一个人地罢工&lt;/a&gt;（这样的事情的确不少）&lt;/p&gt;

&lt;p&gt;大部分人眼中，垠神没有自己的作品，而且反复无常。&lt;br /&gt;
但其实垠神的文章，&lt;br /&gt;
把他对别人的意见那部分排除掉，&lt;br /&gt;
他对技术的理解、思考&lt;del&gt;、运用&lt;/del&gt;其实是超越了大部分人的（比如我）。&lt;br /&gt;
比如他&lt;a href=&#34;https://www.yinwang.org/blog-cn/2017/05/23/kotlin&#34;&gt;对 Kotlin - Checked Exception 的思考&lt;/a&gt;，&lt;br /&gt;
讲到程序设计和程序员能力的关系那部分，&lt;br /&gt;
非常有启发性。&lt;/p&gt;

&lt;p&gt;而且很多时候，垠神的观点真的是振聋发聩，比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.douban.com/group/topic/44818003/&#34;&gt;每次仇恨一个东西，你就失去了向它学习的机会。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以至于我司工作日的时候，&lt;br /&gt;
只要谁发现了垠神又发文章了，&lt;br /&gt;
他就会高呼：“垠神又发文章了！好特么勤快！链接我发群里了！”&lt;br /&gt;
然后大家纷纷一起学习。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;其实我还蛮想把垠神跟凤姐放在一起类比的，&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;但是想想，知道凤姐但理解凤姐的人太少了。&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;这样容易引起误会，这一段就剪掉吧。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;冰封-ice1000-ice1000-github-ice1000-喜欢程序语言的高中生&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/people/ice1000/activities&#34;&gt;冰封&lt;/a&gt;，&lt;a href=&#34;https://github.com/ice1000&#34;&gt;ice1000&lt;/a&gt;, 喜欢程序语言的高中生&lt;/h2&gt;

&lt;p&gt;我最开始是在知乎的女装话题下刷到&lt;a href=&#34;https://www.zhihu.com/people/ice1000/activities&#34;&gt;冰封&lt;/a&gt;（下称ice1000）的动态的，&lt;br /&gt;
看了一圈发现这好像是个程序员友军，&lt;br /&gt;
又看了一下，发现是个&lt;a href=&#34;https://www.zhihu.com/question/64427785&#34;&gt;高中生大佬&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;跟上文讲到的几个大佬不一样，&lt;br /&gt;
ice1000 的影响力可能主要停留在知乎，&lt;br /&gt;
但 ice1000 的未来是无穷的。&lt;br /&gt;
虽说人人平等，但有的人更加平等，&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/63691021&#34;&gt;很多道理早知道和晚知道是不一样的&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ice1000 能在高中的时候，&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/57850781&#34;&gt;确定了自己的兴趣&lt;/a&gt;，并且打算为止奋斗一生，&lt;br /&gt;
比起我这种大学读完四年，&lt;br /&gt;
才&lt;a href=&#34;https://liriansu.com/my-programmer-habits&#34;&gt;确定我真的是喜欢代码的人&lt;/a&gt;肯定要强许多。&lt;br /&gt;
（更别提他 GitHub 的 activity 也是吊打我了）&lt;/p&gt;

&lt;p&gt;祝 ice1000 能找到自己的道路，&lt;br /&gt;
认准它，顺利地走下去。&lt;/p&gt;

&lt;h2 id=&#34;笛子-ocarina-你什么都没看见-uc-nothing-小绿与小蓝-green-blue-life-系列作者&#34;&gt;&lt;a href=&#34;https://weibo.com/echohall?profile_ftype=1&amp;amp;is_all=1&#34;&gt;笛子&lt;/a&gt;，&lt;a href=&#34;https://www.u17.com/comic/16179.html&#34;&gt;《你什么都没看见》&lt;/a&gt;&lt;a href=&#34;https://ac.qq.com/Comic/comicInfo/id/536332&#34;&gt;《小绿与小蓝》&lt;/a&gt;系列作者&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://weibo.com/echohall?profile_ftype=1&amp;amp;is_all=1&#34;&gt;笛子Ocarina（下称笛子）&lt;/a&gt;，&lt;br /&gt;
是跟&lt;a href=&#34;https://weibo.com/u/6365729214&#34;&gt;孙渣&lt;/a&gt;，&lt;a href=&#34;https://weibo.com/A4TYPHOON&#34;&gt;鱼总&lt;/a&gt;等画师一个圈内的画手。&lt;/p&gt;

&lt;p&gt;看她的&lt;a href=&#34;https://www.u17.com/comic/16179.html&#34;&gt;《你什么都没看见》&lt;/a&gt;，&lt;br /&gt;
我总感觉跟&lt;a href=&#34;https://en.wikipedia.org/wiki/Franken_Fran&#34;&gt;《疯狂怪医芙兰》&lt;/a&gt;有异曲同工之妙&lt;br /&gt;
（虽然画风非常不一样）&lt;br /&gt;
还有&lt;a href=&#34;https://ac.qq.com/Comic/comicInfo/id/536332&#34;&gt;《小绿与小蓝》&lt;/a&gt;系列，&lt;br /&gt;
很多地方跟&lt;a href=&#34;https://xkcd.com/&#34;&gt; xkcd 系列漫画&lt;/a&gt;也有异曲同工之妙，&lt;br /&gt;
或者说跟&lt;a href=&#34;https://blog.xiqiao.info/&#34;&gt;西乔的神秘的程序员系列漫画&lt;/a&gt;有异曲同工之妙。&lt;/p&gt;

&lt;p&gt;虽然有&lt;a href=&#34;https://zh.moegirl.org/zh-hans/Ocarina&#34;&gt;“笛子，强，不上色”的梗&lt;/a&gt;，&lt;br /&gt;
但其实可以看出笛子就是一个很喜欢画漫画的人，&lt;br /&gt;
而且很幸运地，她的事业也是画漫画。&lt;br /&gt;
这个特性跟“奇思妙想”这个特性就产生了 1+1&amp;gt;&amp;gt;2 的特性了。&lt;/p&gt;

&lt;p&gt;最开始的&lt;a href=&#34;https://ac.qq.com/Comic/comicInfo/id/536332&#34;&gt;《小绿和小蓝》&lt;/a&gt;就是笛子表达一些小思考的所在，&lt;br /&gt;
&lt;del&gt;明明是笛子缺刀片了&lt;/del&gt;&lt;br /&gt;
里面的很多梗跟 &lt;a href=&#34;https://xkcd.com/&#34;&gt;xkcd&lt;/a&gt; 一样，&lt;br /&gt;
都是荒诞但有趣的：&lt;br /&gt;
比如&lt;a href=&#34;https://ac.qq.com/ComicView/index/id/536332/cid/95&#34;&gt;“走钢丝时一边后空翻一边双手分别转5x5魔方同时倒背国家民法”的这种梗&lt;/a&gt;，&lt;br /&gt;
就跟“三人行，必有我师焉”是一样的道理呀。&lt;/p&gt;

&lt;p&gt;最后，因为篇幅原因，很多大佬就不写上去了。&lt;br /&gt;
（我有一堆仰慕的大佬，但是这里的空间写不下了）&lt;/p&gt;

&lt;p&gt;还有一些大佬，自身的姿势水平非常高，&lt;br /&gt;
但是因为比较少时间输出观点/价值观/干货/技术内容，&lt;br /&gt;
所以很容易被人民群众（比如我）忽略掉，&lt;br /&gt;
在此道个歉。&lt;/p&gt;

&lt;p&gt;不论如何，&lt;br /&gt;
最后引用笛子的一篇感慨作为结束吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/cest_tama_la_vie.jpg&#34; alt=&#34;cest-tama-la-vie&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/cest_tama_la_vie_translate.jpg&#34; alt=&#34;cest-tama-la-vie-translate&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么是连字 (ligature)</title>
      <link>https://liriansu.com/posts/2017-09-13-what-is-ligature/</link>
      <pubDate>Wed, 13 Sep 2017 22:45:39 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-13-what-is-ligature/</guid>
      <description>&lt;p&gt;或者叫“为什么PDF里拷出来的有些字会消失”，&lt;br /&gt;
“为什么有些字体里fi可以连在一起”，&lt;br /&gt;
“Fira Code是怎么做到连体符号的”&lt;/p&gt;

&lt;h2 id=&#34;ligature&#34;&gt;ligature&lt;/h2&gt;

&lt;p&gt;ligature，维基百科中文页是叫“合字”，其实概念意义上更接近“连字”。&lt;br /&gt;
正如字面意义上，连字就是连在一起的字，比如中文的连字是这样的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;俗话说，见字如见人。&lt;/p&gt;

&lt;p&gt;有的专家根据特总的签名，&lt;br /&gt;
分析说他的狂放就如同他那一横一样不羁……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/trump_chinese_ligature.jpg&#34; alt=&#34;trump-chinese-ligature&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在拉丁语系中，很多时候会用到连字这一特性。&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Typographic_ligature&#34;&gt;比如说德语的字母 &lt;code&gt;ß&lt;/code&gt; 最开始其实是 &lt;code&gt;ss&lt;/code&gt;&lt;/a&gt;，&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Typographic_ligature&#34;&gt;拉丁字母中的 &lt;code&gt;W&lt;/code&gt; 最开始的时候是 &lt;code&gt;VV&lt;/code&gt;, 两个 &lt;code&gt;V&lt;/code&gt;&amp;hellip;&lt;/a&gt;，&lt;br /&gt;
非常神奇。&lt;br /&gt;
而我们熟悉的音标里的 &lt;code&gt;æ&lt;/code&gt; 这个字母，&lt;br /&gt;
看起来很像连字，但其实不是连字，&lt;br /&gt;
&lt;code&gt;æ&lt;/code&gt; 是古英语等一系列语系里真实用到的字母。&lt;/p&gt;

&lt;h2 id=&#34;fi与印刷体&#34;&gt;fi与印刷体&lt;/h2&gt;

&lt;p&gt;在活字印刷盛行的时候，&lt;br /&gt;
人们都是用字模来印文章的。&lt;br /&gt;
一篇文章，&lt;br /&gt;
假如要用不同的字体，&lt;br /&gt;
那就要选用对应的不同的字模。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/fi.png&#34; alt=&#34;fi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有些字体里面当 字母&lt;code&gt;f&lt;/code&gt; 和 字母&lt;code&gt;i&lt;/code&gt; 连在一起的时候，&lt;br /&gt;
&lt;code&gt;f&lt;/code&gt; 的一横会跟 &lt;code&gt;i&lt;/code&gt; 的一点撞上，导致不好排版。&lt;br /&gt;
所以为了方便、美观，有些字体直接会有 &lt;code&gt;fi&lt;/code&gt; 连字的字模。&lt;br /&gt;
这里不论是印刷字体的连字，还是上面手写字体的连字，&lt;br /&gt;
都是一样的概念，都叫 &lt;code&gt;ligature&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;电脑字体里的-ligature&#34;&gt;电脑字体里的 ligature&lt;/h2&gt;

&lt;p&gt;虽然说电脑字体不会有印刷字体所有的物理限制，&lt;br /&gt;
但有些字体的 &lt;code&gt;fi&lt;/code&gt; 还依然保留了 &lt;code&gt;ligature&lt;/code&gt; 的这一特性。&lt;br /&gt;
假如你在你的电脑字体配置页面找一找，&lt;br /&gt;
是可以找到相关的属性的。&lt;/p&gt;

&lt;p&gt;基于电脑也能支持连字这个设定，&lt;br /&gt;
于是聪明的人就想到了可以用它来搞事！&lt;br /&gt;
比如有一款字体叫 &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; 宣称自己是最适合程序员的编程语言，&lt;br /&gt;
因为它对各种数学符号都极度友好（细节请点开下图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png&#34; alt=&#34;fira-code-demo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然前提是编辑器也要能支持 ligature,&lt;br /&gt;
比如像 JetBrains系IDE:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/jetbrains_ligature.png&#34; alt=&#34;jetbrains-ligature&#34; /&gt;&lt;/p&gt;

&lt;p&gt;果然正如古代智慧说的一样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;苟日新，日日新，又日新&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还是要多学习一个呀。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据仓库解决方案 RedShift 入坑指南</title>
      <link>https://liriansu.com/posts/2017-09-08-redshift-as-data-warehouse/</link>
      <pubDate>Fri, 08 Sep 2017 22:59:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-09-08-redshift-as-data-warehouse/</guid>
      <description>&lt;p&gt;最近工程师小谢遇到了一个难题，&lt;br /&gt;
就是手头上有千万级别的数据，&lt;br /&gt;
但是没有一个快糙猛的解决方案。&lt;/p&gt;

&lt;h2 id=&#34;提出问题&#34;&gt;提出问题&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;想直接看 RedShift 相关的，&lt;br /&gt;
请跳过前两节瞎扯淡。&lt;br /&gt;
直接到第三节观看。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不像少部分优秀的可以活在彼岸的人，&lt;br /&gt;
可以醉心于写出完美的数据库，&lt;br /&gt;
在须臾间学会所有的程序语言；&lt;br /&gt;
世上大部分程序员都活在此岸，&lt;br /&gt;
他们要解决一个个特定的业务问题。&lt;/p&gt;

&lt;p&gt;工程师小谢就很烦恼，&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/what-is-cash-cow&#34;&gt; 上次产品经理小刘提了个老酷炫的IDEA： &lt;/a&gt;&lt;br /&gt;
“现金牛”。&lt;br /&gt;
观众们很过瘾，&lt;br /&gt;
但作为要实现功能的人，&lt;br /&gt;
小谢有点郁闷。&lt;/p&gt;

&lt;p&gt;具体来说，难点在下面几个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据量很大。&lt;br /&gt;
公司是做菜品相关的，每天记录的菜品数据非常多。&lt;br /&gt;
而且随着公司业务发展，菜品增速增长率也很高。&lt;br /&gt;
（也就是“指数级上升”）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;时间比较紧。&lt;br /&gt;
不像学校里的大作业，可以有一整个学期来实现到交付。&lt;br /&gt;
真正的需求是事情要尽可能早的完成，即使一开始不一定是完美的，&lt;br /&gt;
但是会更早得到外部反馈，正面/负面的评价有助于大家调整前进方向。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;质量有要求。&lt;br /&gt;
基于“现金牛”的这个需求交付完成以后，又会有新的需求降临到小谢的肩上。&lt;br /&gt;
所以这个此时的解决方案，也要解决彼时的问题。&lt;br /&gt;
随着业务/数据量的增大，短时间内（比如说一年），解决方案得稳定靠谱。&lt;br /&gt;
长时间内（比如说三年），解决方案要能拓展，至少是便于重构的。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;上面的几个现世问题，&lt;br /&gt;
其实跟万千现世问题一样，&lt;br /&gt;
都是一个问题：&lt;code&gt;如何在有限的资源下，完成既定的目标？&lt;/code&gt;&lt;br /&gt;
解决方案也都是通用的：&lt;code&gt;转换资源、付出时间、更换目标&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当然，小谢明白，脱离实际例子的方法论都没有意义。&lt;br /&gt;
所以小谢打算整一个数据仓库 (Data Warehouse)&lt;/p&gt;

&lt;p&gt;数据仓库，跟数据库 (DataBase) 很像，&lt;br /&gt;
就像军械库是放军械的地方，&lt;br /&gt;
车库是放车的地方，&lt;br /&gt;
数据仓库/数据库就是放数据的地方。&lt;br /&gt;
&lt;del&gt;多了个仓是因为还放仓鼠&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;二者不同之处详细来说，&lt;br /&gt;
就是因为要解决的问题不一样：&lt;br /&gt;
数据库是要给业务提供基础保证，&lt;br /&gt;
数据仓库则是给面向决策的数据分析提供便利；&lt;br /&gt;
所以二者的设计思想也不一样：&lt;br /&gt;
数据库遵守范式设计，强调数据约束、一致性，读写操作都有涉及，&lt;br /&gt;
数据仓库则是存储大量冗余数据、统计数据，对读的优化更多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;举个栗子&lt;/strong&gt;就是今天中午小谢去吃了四斤烤鱼（真能吃），&lt;br /&gt;
“四斤烤鱼”的数据存在了数据库里，是用来买单算钱的。&lt;br /&gt;
但“今天中午，四斤，烤鱼”这样的统计数据就存在了数据仓库里，&lt;br /&gt;
以用来之后的统计分析。&lt;/p&gt;

&lt;p&gt;业界很多的数据仓库都是基于 &lt;code&gt;Hadoop/Spark/Storm&lt;/code&gt; 的一套 &lt;code&gt;Java&lt;/code&gt; 系技术栈的。&lt;br /&gt;
比如拼多多，用的就是 &lt;code&gt;Hadoop/Hive/HBase/Kafka&lt;/code&gt; 一套技术栈。&lt;br /&gt;
比如小红书，用的也是 &lt;code&gt;Hadoop/Hive/Spark/Kafka&lt;/code&gt; 一套技术栈。&lt;/p&gt;

&lt;p&gt;但是问题来了：&lt;br /&gt;
这些小谢都不懂啊，很尴尬。&lt;br /&gt;
不过还好，小谢有钱，&lt;br /&gt;
他可以去招几个懂的。&lt;br /&gt;
很可惜，招聘是个玄学问题，&lt;br /&gt;
他看上的看不上他，&lt;br /&gt;
看上他的他看不上。&lt;/p&gt;

&lt;p&gt;于是小谢想来想去，&lt;br /&gt;
也只能自己动手，&lt;br /&gt;
最终选择了：&lt;/p&gt;

&lt;h2 id=&#34;redshift-亚马逊云服务全家桶-之-数据仓库-管理助手&#34;&gt;RedShift, 亚马逊云服务全家桶 之 数据仓库 管理助手&lt;/h2&gt;

&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;

&lt;p&gt;作为一种数据仓库的解决方案，&lt;br /&gt;
RedShift 有几个特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;省事，假如你也用了 AWS 的其它服务。&lt;br /&gt;
自带监控，需要定制化的话还可以跟 AWS CloudWatch 结合；&lt;br /&gt;
往里面插入数据推荐用的 &lt;code&gt;COPY&lt;/code&gt; 命令是和 AWS S3 联动的；&lt;br /&gt;
高可用、拓展性、备份等都是 AWS 保证的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提供全套 &lt;code&gt;PostgreSQL&lt;/code&gt; 语法。&lt;br /&gt;
基本上兼容 &lt;code&gt;PostgreSQL&lt;/code&gt; 的地方，换一下 &lt;code&gt;DBDriver&lt;/code&gt; 就可以无痛使用了。&lt;br /&gt;
但是 RedShift 也只提供了一套 &lt;code&gt;SQL&lt;/code&gt; 的标准，&lt;br /&gt;
假如要做 &lt;code&gt;SQL&lt;/code&gt; 之外的（比如文件）数据存放，&lt;br /&gt;
就很吃力了。&lt;del&gt;by design. wontfix&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;贵，相对而言。&lt;br /&gt;
定价大概最便宜的实例类型 (dc1.large, 15GB Mem, 0.16TB SSD) 是一年一万多人民币，&lt;br /&gt;
不算人力价格的话，比自建数据仓库肯定要贵。&lt;br /&gt;
不过算上人力价格的话……就另说了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;

&lt;p&gt;部署使用 RedShift 的主要步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先别急着创建实例，先按照 AWS 的教程走一遍，&lt;br /&gt;
会对 COPY/Encoding/Cluster 有初步了解。&lt;br /&gt;
&lt;del&gt;不喜欢读英文文档的同学，可以右上角切换成中文&lt;/del&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建合适的 AWS RedShift 实例。&lt;br /&gt;
恭喜你完成了_从无到有搭建数据仓库_这个成就。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对接业务，比如选择合适的 Driver。&lt;br /&gt;
我们用的是 django, 直接用 &lt;code&gt;psycopg2&lt;/code&gt; 就可以连接了。&lt;br /&gt;
然后就是ETL、缓存、图表等通用的业务操作了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;心得&#34;&gt;心得&lt;/h3&gt;

&lt;p&gt;用了 RedShift 一阵子，&lt;br /&gt;
有几点学到的地方：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SQL 语句不是直接执行，而是编译后分发执行&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不论我们执行任何语句，即使是 &lt;code&gt;INSERT INTO&lt;/code&gt; 这种单条操作，&lt;br /&gt;
RedShift 都要编译后执行，耗时 500ms 起步_所以要用COPY来做数据导入_。&lt;br /&gt;
又比如我们部署了四个 RedShift 节点，那在&lt;br /&gt;
&lt;code&gt;SELECT * FROM orders WHERE business_id = 100&lt;/code&gt; 编译完成以后，&lt;br /&gt;
RedShift 会把操作根据建表时选定的分区键 &lt;code&gt;DISTKEY&lt;/code&gt; 把命令分发到各个节点操作。&lt;br /&gt;
所以合理的表结构也是查询速度的关键_通用的&lt;del&gt;废话&lt;/del&gt;真理_。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;插入数据用 COPY 命令；更新数据 COPY 到临时表以后，用 DELETE USING + INSERT INTO 来更新数据&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为每条 SQL 都要编译，所以尽量做批量操作，单条操作是非常愚蠢的。&lt;br /&gt;
（就像我们最开始那么愚蠢一样=_=）&lt;br /&gt;
RedShift COPY 命令支持 GZIP, JSON, From S3 等多种操作，&lt;br /&gt;
大部分情况下，加载速度和存储效率都会比普通的 INSERT 要好。&lt;br /&gt;
同理，更新单条数据采用了先删再增的方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定时维护数据仓库&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RedShift 不会自动回收 DELETE/UPDATE 所释放的空间，&lt;br /&gt;
需要用户手动运行 &lt;code&gt;VACUUM&lt;/code&gt; 命令来清理表。&lt;br /&gt;
&lt;code&gt;VACUUM&lt;/code&gt; 本身也是IO密集型操作，&lt;br /&gt;
所以最好是在空闲的时间（比如早上四点）定时跑。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意表的限制&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 RedShift 里，&lt;br /&gt;
&lt;code&gt;unique / primary key / foreign key&lt;/code&gt;都是展示信息，&lt;br /&gt;
没有实质约束力。&lt;/p&gt;

&lt;p&gt;还有 RedShift.varchar 存储的是单字节字符，&lt;br /&gt;
像 MySQL 的 &lt;code&gt;utf8&lt;/code&gt; 默认是三字节字符，&lt;br /&gt;
假如用了 &lt;code&gt;utf8mb4&lt;/code&gt; 就是四字节字符。&lt;br /&gt;
所以 MySQL 里的 varchar(50) 换算到 RedShift 里就应该是 varchar(200)。&lt;br /&gt;
&lt;em&gt;被Emoji坑了的人留&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
RedShift 的最大的好处在于用钱换取生产力，&lt;br /&gt;
简单易用，是 AWS 全家桶用户对数据仓库的一种解决方案。&lt;br /&gt;
具体用法多加注意，也没有什么特别之处。&lt;/p&gt;

&lt;p&gt;不过最近好像是给亚马逊交了不少钱，&lt;br /&gt;
他们都派工程师上门免费 support 了。&lt;/p&gt;

&lt;p&gt;小谢心想。&lt;/p&gt;

&lt;h2 id=&#34;课外阅读&#34;&gt;课外阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/redshift/latest/dg/tutorial-tuning-tables.html&#34;&gt;AWS - RedShift 官方教程 - https://docs.aws.amazon.com/zh_cn/redshift/latest/dg/tutorial-tuning-tables.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/6470.html&#34;&gt;酷壳 - 由12306.CN谈谈网站性能技术 - https://coolshell.cn/articles/6470.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_warehouse&#34;&gt;维基百科 - 数据仓库 - https://en.wikipedia.org/wiki/Data_warehouse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://my.oschina.net/xsh1208/blog/1052781&#34;&gt;全面了解mysql中utf8和utf8mb4的区别 - https://my.oschina.net/xsh1208/blog/1052781&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.xiqiao.info/2013/01/14/1366&#34;&gt;西乔 - 历史悲剧 - https://blog.xiqiao.info/2013/01/14/1366&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>写代码怎么偷懒？多练练</title>
      <link>https://liriansu.com/posts/2017-08-31-lazy-coding-practice/</link>
      <pubDate>Thu, 31 Aug 2017 20:25:12 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-31-lazy-coding-practice/</guid>
      <description>&lt;p&gt;相比于“一门语言”，&lt;br /&gt;
“一门程序语言”更多时候是“一门规范”。&lt;br /&gt;
（当然，“语言”本身就是“规范”。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/standards.png&#34; alt=&#34;standards&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/lazy-coding-thinking&#34;&gt;上次讲到了写代码想偷懒的话&lt;/a&gt;，&lt;br /&gt;
&lt;strong&gt;搞明白、想清楚再写&lt;/strong&gt;是解决根源的一个办法。&lt;br /&gt;
但是凡人（没打错字）的需求始终不是重点，&lt;br /&gt;
写程序要偷懒，&lt;br /&gt;
最终还是在代码上偷懒的。&lt;/p&gt;

&lt;h2 id=&#34;best-practice&#34;&gt;Best Practice&lt;/h2&gt;

&lt;p&gt;外国程序员很喜欢念叨一个词，&lt;br /&gt;
叫&lt;code&gt;Best Practice&lt;/code&gt;。&lt;br /&gt;
比如说&lt;code&gt;Java&lt;/code&gt;里面&lt;code&gt;JSON&lt;/code&gt;要怎么处理，&lt;br /&gt;
就可以搜&lt;code&gt;Java JSON Best Practice&lt;/code&gt;；&lt;br /&gt;
比如我对数据库一窍不通，&lt;br /&gt;
但我就是要学，&lt;br /&gt;
可以搜&lt;code&gt;Database Best Practice&lt;/code&gt;；&lt;br /&gt;
比如我是甲方，&lt;br /&gt;
我不知道我自己想要什么，&lt;br /&gt;
我也可以搜&lt;code&gt;Requirements Best Practice&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这种英文单词一般会有一个直译的中文，&lt;br /&gt;
叫&lt;code&gt;最佳实践&lt;/code&gt;，&lt;br /&gt;
听起来巨蠢。&lt;br /&gt;
但是用来举例子就很好用。&lt;/p&gt;

&lt;p&gt;我加入&lt;a href=&#34;https://liriansu.com/my-work&#34;&gt;再惠&lt;/a&gt;的时候，&lt;br /&gt;
只写过一点&lt;code&gt;Python&lt;/code&gt;，&lt;br /&gt;
代码习惯也是不加&lt;code&gt;encoding&lt;/code&gt;，&lt;br /&gt;
不知道&lt;code&gt;from __future__&lt;/code&gt;，&lt;br /&gt;
写&lt;code&gt;print&lt;/code&gt;不写括号的，&lt;br /&gt;
所有要用到的第三方库都装在全局的&lt;code&gt;site-packages&lt;/code&gt;下面。&lt;br /&gt;
来了以后&lt;a href=&#34;https://docs.python-guide.org/en/latest/dev/virtualenvs/&#34;&gt;我知道了&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
后来张总玩&lt;code&gt;Lucene&lt;/code&gt;的时候我给他配了下&lt;code&gt;Gradle&lt;/code&gt;，&lt;br /&gt;
并解释了一下：“这个东西很简单的，跟&lt;code&gt;virtualenv&lt;/code&gt;是类似的概念。”&lt;br /&gt;
张总感慨道：&lt;br /&gt;
“其实学一门语言就是从这些工具开始啊，&lt;br /&gt;
这样才有一种我上手了的感觉啊！”&lt;/p&gt;

&lt;p&gt;还有就像&lt;a href=&#34;https://blog.golang.org/go-fmt-your-code&#34;&gt;&lt;code&gt;Go&lt;/code&gt;语言的&lt;code&gt;gofmt&lt;/code&gt;命令&lt;/a&gt;，&lt;br /&gt;
这个命令会强制执行统一的代码风格调整，&lt;br /&gt;
不能配置、不能定制化、缩进统一使用Tab。&lt;br /&gt;
我十分痛苦，&lt;br /&gt;
不过也十分认可这里的思想：&lt;br /&gt;
“语言风格就是&lt;del&gt;林黛玉&lt;/del&gt;哈姆雷特，千人千面。&lt;br /&gt;
相比于完美的风格，统一的风格更科学。”&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Best Practice&lt;/code&gt;就是实际操作时的指南，&lt;br /&gt;
了解、掌握、实践&lt;code&gt;Best Practice&lt;/code&gt;可以&lt;del&gt;少些很多代码&lt;/del&gt;少走很多弯路，&lt;br /&gt;
用精妙的方法解决实际问题。&lt;/p&gt;

&lt;h2 id=&#34;精妙的方法&#34;&gt;精妙的方法&lt;/h2&gt;

&lt;p&gt;按照套路，接下来应该讲一段精妙的方法。&lt;br /&gt;
不过小弟我没啥精妙的方法，&lt;br /&gt;
就只能举自身当反例了。&lt;/p&gt;

&lt;p&gt;在写&lt;code&gt;API&lt;/code&gt;的时候，&lt;br /&gt;
经常要处理&lt;code&gt;URL&lt;/code&gt;，&lt;br /&gt;
处理&lt;code&gt;URL&lt;/code&gt;实际上是字符串拼接。&lt;br /&gt;
比如&lt;code&gt;Python&lt;/code&gt;里面把一个&lt;code&gt;dict&lt;/code&gt;转换成&lt;code&gt;query string&lt;/code&gt;格式，&lt;br /&gt;
我以前会这么写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;afu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;take a plane&amp;#39;&lt;/span&gt;}
query_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(k, v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; params&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()])  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;name=afu&amp;amp;action=take a plane&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当时自我感觉良好，&lt;br /&gt;
觉得&lt;code&gt;Python&lt;/code&gt;不愧是&lt;code&gt;Python&lt;/code&gt;啊，&lt;br /&gt;
&lt;code&gt;List Comprehension&lt;/code&gt;真优雅，真好看。&lt;br /&gt;
然而这段代码不仅有Bug，&lt;br /&gt;
其实&lt;code&gt;Python&lt;/code&gt;有专门的库&lt;code&gt;urllib&lt;/code&gt;来处理这类问题，&lt;br /&gt;
&lt;code&gt;urllib&lt;/code&gt;也已经考虑了各种边界情况（比如带非法字符等）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 举Python3为例&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib

params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;afu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;take a plane&amp;#39;&lt;/span&gt;}
query_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; urllib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;urlencode(params)  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;name=afu&amp;amp;action=take+a+plane&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后来又学到了&lt;code&gt;urlencode&lt;/code&gt;函数在&lt;code&gt;Python2&lt;/code&gt;和&lt;code&gt;Python3&lt;/code&gt;的位置都不一样，&lt;br /&gt;
一般是用&lt;a href=&#34;https://pythonhosted.org/six/&#34;&gt;&lt;code&gt;six&lt;/code&gt;&lt;/a&gt;这个库去处理兼容性的。&lt;br /&gt;
下面这段代码就不需要额外说明_举Python3为例_了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; six

params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;afu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;take a plane&amp;#39;&lt;/span&gt;}
query_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; six&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;moves&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;urllib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;urlencode(params)  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;name=afu&amp;amp;action=take+a+plane&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然有很多种方法都能达到同样的效果，&lt;br /&gt;
但软件工程中，&lt;br /&gt;
大家往往都定下一个&lt;code&gt;Best Practice&lt;/code&gt;然后遵守它。&lt;br /&gt;
这样不仅能省下写程序的功夫，&lt;br /&gt;
也能省下沟通争辩的功夫。&lt;br /&gt;
就像&lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34;&gt;&lt;code&gt;Zen of Python&lt;/code&gt;&lt;/a&gt;里说的一样：&lt;br /&gt;
&lt;code&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之前我一直很好奇大部分人在用&lt;code&gt;Python&lt;/code&gt;写&lt;code&gt;datetime&lt;/code&gt;类型的时候，&lt;br /&gt;
都是用&lt;code&gt;import datetime&lt;/code&gt;+&lt;code&gt;datetime.datetime(), datetime.date()&lt;/code&gt;的写法，&lt;br /&gt;
我就一直不解，&lt;br /&gt;
&lt;code&gt;from datetime import datetime, date&lt;/code&gt;+&lt;code&gt;datetime(), date()&lt;/code&gt;这样感觉更好啊？&lt;br /&gt;
而且后续的代码更短。&lt;/p&gt;

&lt;p&gt;后来读到&lt;a href=&#34;docs.python-guide.org/en/latest/&#34;&gt;&lt;code&gt;Kenneth Reitz&lt;/code&gt;的&lt;code&gt;Hitchhiker&#39;s Guide to Python&lt;/code&gt;&lt;/a&gt;的时候我才明白，&lt;br /&gt;
&lt;code&gt;Explicit is better than implicit&lt;/code&gt;的体现就是显式指定包名，&lt;br /&gt;
这样代码表现力就会更强，也更易读。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Very bad

[...]
from modu import *
[...]
x = sqrt(4)  # Is sqrt part of modu? A builtin? Defined above?


## Better

from modu import sqrt
[...]
x = sqrt(4)  # sqrt may be part of modu, if not redefined in between


## Best

import modu
[...]
x = modu.sqrt(4)  # sqrt is visibly part of modu&amp;#39;s namespace&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从学到这一点以后，&lt;br /&gt;
我就下定决心再也不用&lt;code&gt;from datetime import datetime&lt;/code&gt;了。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Best Practice&lt;/code&gt;这种东西，&lt;br /&gt;
看起来很美好，&lt;br /&gt;
用好了可以大大&lt;del&gt;偷懒&lt;/del&gt;减少工作量。&lt;br /&gt;
但它有一个重要特性：&lt;br /&gt;
&lt;code&gt;Best Practice&lt;/code&gt;从来不是试出来的，&lt;br /&gt;
而是&lt;strong&gt;思索、学习、择优&lt;/strong&gt;得到的。&lt;br /&gt;
多加一个&lt;code&gt;if&lt;/code&gt;，多加一个机器，多招一个人，多加一点班&lt;br /&gt;
可能只能解决当下的问题。&lt;br /&gt;
平时多学习一个，&lt;br /&gt;
才能到了要解决问题的时候，&lt;br /&gt;
面临技术、业务、上线时间的多重压力，&lt;br /&gt;
优雅地使用&lt;code&gt;Best Practice&lt;/code&gt;解决问题。&lt;/p&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
为了&lt;del&gt;偷懒&lt;/del&gt; &lt;del&gt;少干活&lt;/del&gt;提高效率，&lt;br /&gt;
我们又定下了这么些小目标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多学习一个&lt;code&gt;Best Practice&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;学到了就用，能用精妙的方法就不用愚蠢的方法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过思考来学习，而不是完全通过试错反馈机制来学习&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;毕竟编程风格可不能是&lt;a href=&#34;https://coolshell.cn/articles/2058.html&#34;&gt;散弹枪编程&lt;/a&gt;呀。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写代码怎么偷懒？我想想</title>
      <link>https://liriansu.com/posts/2017-08-30-lazy-coding-thinking/</link>
      <pubDate>Wed, 30 Aug 2017 23:10:52 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-30-lazy-coding-thinking/</guid>
      <description>&lt;p&gt;我真的不是因为写了&lt;code&gt;Python&lt;/code&gt;，就在黑&lt;code&gt;Perl&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;起&#34;&gt;起&lt;/h2&gt;

&lt;p&gt;最近装了 &lt;a href=&#34;https://wakatime.com/dashboard&#34;&gt;wakatime&lt;/a&gt; 这个控件以后，&lt;br /&gt;
我一直忍不住好奇心去看看我平常到底有多少时间在写代码。&lt;br /&gt;
经过严谨的数据统计表明：&lt;br /&gt;
我只有25%的时间在写代码。&lt;br /&gt;
（按一周40小时算，&lt;br /&gt;
我一周只写10小时的代码=_,=）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/wakatime_dashboard.jpg&#34; alt=&#34;old-waka&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样不好。&lt;br /&gt;
于是我决定奋发图强，&lt;br /&gt;
在自以为沉浸地写了一周代码以后，&lt;br /&gt;
25%变成了33%。&lt;br /&gt;
于是严谨的数据统计依然表明：&lt;br /&gt;
我大部分的时间都在划水。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/wakatime.png&#34; alt=&#34;new-waka&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是我放弃了挣扎，&lt;br /&gt;
就像苏轼朋友佛印和尚讲过的一样：&lt;br /&gt;
&lt;code&gt;既来之，则安之&lt;/code&gt; &lt;em&gt;不是他说的&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我很开心地想道：&lt;br /&gt;
“哎呀。&lt;br /&gt;
我就花这么一点点时间干活，&lt;br /&gt;
是不是说明我效率高呀？”&lt;/p&gt;

&lt;p&gt;“不是的，只不过是因为你懒而已。”&lt;br /&gt;
心里的正义小人蹦了出来。&lt;/p&gt;

&lt;p&gt;我十分开心地嘴硬道：&lt;br /&gt;
“对呀对呀，我就是懒。&lt;br /&gt;
而且就像我以前说的，&lt;br /&gt;
懒有那种没有建设性的懒，&lt;br /&gt;
还有那种一劳永逸的懒。”&lt;/p&gt;

&lt;p&gt;嗯，今天我就要尝试说服我心里的正义小人，&lt;br /&gt;
&lt;strong&gt;我不是在偷懒，我是在想问题！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;按老规矩，&lt;br /&gt;
用讲故事的方式讲道理。&lt;br /&gt;
献丑了！&lt;/p&gt;

&lt;h2 id=&#34;承&#34;&gt;承&lt;/h2&gt;

&lt;p&gt;我从大四到毕业，&lt;br /&gt;
一直在&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt;当研发（就是研发工程师）&lt;br /&gt;
一般来说，“研发工程师”这个说法是分工上这么叫的，&lt;br /&gt;
洋文里叫 &lt;code&gt;SE, Software Engineer&lt;/code&gt;,&lt;br /&gt;
对应测试工程师 &lt;code&gt;QA, Quality Assurance&lt;/code&gt;。&lt;br /&gt;
互联网公司里是Web编程的话，&lt;br /&gt;
会从另一个维度上分成前端工程师 &lt;code&gt;FE, Front End&lt;/code&gt;,&lt;br /&gt;
后端工程师 &lt;code&gt;BE, Back End&lt;/code&gt;。&lt;br /&gt;
有些也会从部门上拆分成架构、技术（业务）、算法、数据不同的组。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt;主要是按业务拆分研发部门，&lt;br /&gt;
我们当时是Foundation组（基础架构组）。&lt;br /&gt;
公司做的是SaaS形式的ERP系统。（SAP, Oracle都是我们的竞争对手）&lt;br /&gt;
这里的SaaS可以简单理解为年费会员，&lt;br /&gt;
大众(Volkswagen)公司买QAD的ERP系统并不是一锤子买卖，&lt;br /&gt;
当合同签订以后，&lt;br /&gt;
我们还要负责整套系统的安装、培训、维护、升级工作。&lt;br /&gt;
（当然大众也要对应地交“物业费”就是了）&lt;br /&gt;
公司部门分工大概如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;R&amp;amp;D 负责开发软件。R&amp;amp;D也就是研发部门，Research and Development, 我在这…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Sales 负责销售产品。（有的时候研发还没做完，产品就卖出去了，于是倒催研发…十分神奇…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Service 负责产品的安装、上线、培训。有的时候客户有一些定制化的需求，Service也是要写代码的。比如中国的医药公司要开发一套药监局审查流程，这个明显不是标准流程，就需要&lt;strong&gt;定制化开发&lt;/strong&gt;。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Support 负责日常的支持。比如产品平时出Bug了，晚上出Bug了，周末出Bug了，都要负责给客户解决…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Finance, Law, HR, CEO 等其他队友提供内部支持，维系组织有序运转。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我当时参与的项目是叫&lt;code&gt;CVC, Customer Version Control&lt;/code&gt;。&lt;br /&gt;
要解决的问题，就是&lt;strong&gt;定制化开发中的，代码版本控制难题。&lt;/strong&gt;&lt;br /&gt;
比如还是大众公司，&lt;br /&gt;
他们2008年就安装了QAD2008版本，&lt;br /&gt;
然后基于2008版本做了大量关于车辆测试、车辆安全性能等方面的定制化开发。&lt;br /&gt;
于是在QAD要升级主程序版本的时候，&lt;br /&gt;
大众公司惊呼：&lt;a href=&#34;https://xkcd.com/1597/&#34;&gt;“1079 Merge Conflicts Found!!!”&lt;/a&gt;&lt;br /&gt;
这种定制化和主干的冲突，&lt;br /&gt;
只是当时我们要解决的其中一个问题，&lt;br /&gt;
其它还包括有超过10G的代码本地环境构建，&lt;br /&gt;
dev-test-sup-prod多环境代码管理，&lt;br /&gt;
soft/hard lock等。&lt;/p&gt;

&lt;h2 id=&#34;转&#34;&gt;转&lt;/h2&gt;

&lt;p&gt;正义小人：“ok，于是你讲了这么多，&lt;br /&gt;
跟具体写程序相关的一句话没讲……”&lt;/p&gt;

&lt;p&gt;的确，具体写程序的话是一句没讲。&lt;br /&gt;
那既然都扯这么多了，&lt;br /&gt;
我就再扯多点吧…&lt;/p&gt;

&lt;p&gt;技术选型上，最开始用了 &lt;code&gt;Git&lt;/code&gt; + &lt;code&gt;Perl&lt;/code&gt;。&lt;br /&gt;
因为要做代码版本控制，&lt;br /&gt;
所以核心的轮子就用了&lt;code&gt;Git&lt;/code&gt;，&lt;br /&gt;
当时团队的技术栈主要是&lt;code&gt;Git vs SVN&lt;/code&gt;，&lt;br /&gt;
又因为要做多环境管理，&lt;br /&gt;
所以&lt;code&gt;git rebase&lt;/code&gt;, &lt;code&gt;git cherry-pick&lt;/code&gt;, &lt;code&gt;git filter-branch&lt;/code&gt;等一串能修改历史的命令就优势明显。&lt;br /&gt;
又因为整个项目最终是一个命令行工具，&lt;br /&gt;
而且团队之前的主要技术栈是&lt;code&gt;Perl&lt;/code&gt;，&lt;br /&gt;
&lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;项目语言就采用了&lt;code&gt;Perl&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;code&gt;Perl&lt;/code&gt;这门语言最强大是它的命令行交互和文本处理，&lt;br /&gt;
很多&lt;code&gt;shell&lt;/code&gt;命令是天生共通的，&lt;br /&gt;
比如&lt;code&gt;echo, test -f, $@&lt;/code&gt;等；&lt;br /&gt;
文本处理上，正则和一些&lt;code&gt;heredoc&lt;/code&gt;也是非常美妙。&lt;br /&gt;
而&lt;code&gt;Perl&lt;/code&gt;最大的问题倒不在&lt;a href=&#34;https://coolshell.cn/articles/1903.html&#34;&gt;语言本身被诟病的鬼画符&lt;/a&gt;上，&lt;br /&gt;
最大的问题是：&lt;code&gt;Perl&lt;/code&gt;日渐衰弱。&lt;br /&gt;
比如假如我们说我们招&lt;code&gt;Java&lt;/code&gt;工程师，&lt;br /&gt;
那其实可以招到很多人才，&lt;br /&gt;
但同样招&lt;code&gt;Perl&lt;/code&gt;工程师，&lt;br /&gt;
招到同样人才的概率也不一定会高很多，&lt;br /&gt;
但是付出的成本要高更多。&lt;/p&gt;

&lt;p&gt;于是后来我干了一件事情，&lt;br /&gt;
下班时间用&lt;code&gt;Java&lt;/code&gt;把&lt;code&gt;CVC&lt;/code&gt;给重写了。&lt;br /&gt;
三四月份的上海特别凉快，&lt;br /&gt;
我住的离公司也近，&lt;br /&gt;
六点多吃完饭，走路回家洗个澡，&lt;br /&gt;
穿个拖鞋就蹦跶回公司。&lt;br /&gt;
白天写&lt;code&gt;Perl&lt;/code&gt;，晚上写&lt;code&gt;Java&lt;/code&gt;，特别开心。&lt;br /&gt;
当时老大也特别会顺势而为，&lt;br /&gt;
他看我自己在重构项目，&lt;br /&gt;
分给我的活也更少了，&lt;br /&gt;
于是后来上班的时间我也在“划水”写&lt;code&gt;Java&lt;/code&gt;了。&lt;br /&gt;
因为需求明确，功能点清晰，&lt;br /&gt;
就这样过了两个月，&lt;br /&gt;
两万行的&lt;code&gt;Perl&lt;/code&gt;代码再加同样量级的单元测试，&lt;br /&gt;
（一时间竟没找到比代码行数更恰当的数据……）&lt;br /&gt;
被我重构了一半到&lt;code&gt;Java&lt;/code&gt;&amp;hellip;&lt;br /&gt;
后来大家一起把各种Edge Case补上了，&lt;br /&gt;
整个产品正式切换成了&lt;code&gt;Java&lt;/code&gt;，&lt;br /&gt;
也算是一点微小的贡献吧。&lt;/p&gt;

&lt;h2 id=&#34;合&#34;&gt;合&lt;/h2&gt;

&lt;p&gt;我在QAD的时间(2014年7月到2016年10月)&lt;br /&gt;
基本上都贡献给了CVC这个项目。&lt;br /&gt;
同样的功能，&lt;br /&gt;
&lt;code&gt;Perl&lt;/code&gt;版本用了一年多实现，&lt;br /&gt;
&lt;code&gt;Java&lt;/code&gt;版本用了几个月就实现了。&lt;br /&gt;
决定性因素跟语言表现力毫无关系，&lt;br /&gt;
而在于&lt;code&gt;业务需求&lt;/code&gt;和&lt;code&gt;业务理解&lt;/code&gt;上。&lt;/p&gt;

&lt;p&gt;正如上文介绍项目流程里讲的，&lt;br /&gt;
项目要做的是&lt;strong&gt;定制化开发&lt;/strong&gt;，&lt;br /&gt;
需求就是来自于&lt;strong&gt;Service&lt;/strong&gt;部门同事。&lt;br /&gt;
他们一开始是不知道什么样的软件是好用的，&lt;br /&gt;
我们定义好的产品模式（比如自由checkout文件），&lt;br /&gt;
但是他们觉得另一种模式更好（开发人员更换频繁，需要对文件加soft lock），&lt;br /&gt;
或者是觉得产品可以更好（比如流程要和Jira高度结合）。&lt;br /&gt;
所以其实我们在&lt;code&gt;Design - Refine&lt;/code&gt;这个流程上不断进步&lt;br /&gt;
（中文的说法叫“走了不少弯路”）&lt;/p&gt;

&lt;p&gt;还有我们在重构过程中，&lt;br /&gt;
因为知道了整体的需求的样子，&lt;br /&gt;
就能更好地抽象逻辑。&lt;br /&gt;
就像是建筑师设计房子的时候，&lt;br /&gt;
因为知道了整体架构，&lt;br /&gt;
他才能确定房梁的承重，&lt;br /&gt;
部件的用材。&lt;/p&gt;

&lt;p&gt;正义小人想了想，说：&lt;br /&gt;
“噢，我明白了。你的意思是说，&lt;br /&gt;
偷懒不写程序，其实只是停笔，&lt;br /&gt;
想想要写什么样的程序？&lt;br /&gt;
需求更准确，理解更清晰，事情才会更好做？”&lt;/p&gt;

&lt;p&gt;“对呀对呀！满分理解！”&lt;/p&gt;

&lt;p&gt;正义小人又一脸嫌弃：&lt;br /&gt;
“但是现实生活中，是不会有这样的情况的。”&lt;/p&gt;

&lt;p&gt;是呀，所以我也只能一边说着“学到了学到了”，&lt;br /&gt;
一边想着“我是谁，我在哪，我要写什么程序？”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HR与程序员的日常（二）：OKR是啥</title>
      <link>https://liriansu.com/posts/2017-08-13-okr/</link>
      <pubDate>Sun, 13 Aug 2017 22:17:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-13-okr/</guid>
      <description>&lt;p&gt;TI 输了，&lt;br /&gt;
熬夜看比赛的 Lirian 感觉心很痛。&lt;br /&gt;
于是他打算换个心情，&lt;br /&gt;
看看 Mia 最近的学习任务是啥。&lt;/p&gt;

&lt;h2 id=&#34;okr-是什么&#34;&gt;OKR 是什么&lt;/h2&gt;

&lt;p&gt;Mia 最近听的课程刚好讲到了 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 。&lt;br /&gt;
Lirian 其实只知道 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 是&lt;br /&gt;
Objectives and Key Results 的简称，&lt;br /&gt;
是一种绩效考核的方式，&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 是另一种绩效考核的方式。&lt;br /&gt;
感觉 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 跟 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 的关系，&lt;br /&gt;
可能像是素质教育与应试教育的关系一样，&lt;br /&gt;
各有优势，各有不同。&lt;/p&gt;

&lt;p&gt;于是 Lirian 用一招*抛砖引玉*打开了话题：&lt;br /&gt;
“话说 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 究竟有啥区别啊？”&lt;/p&gt;

&lt;p&gt;Mia 回以一招*斗转星移*：&lt;br /&gt;
“我觉得 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 是有本质区别的。”&lt;/p&gt;

&lt;p&gt;Lirian 顺势一招&lt;a href=&#34;https://zh.moegirl.org/zh-hans/%E4%B9%8C%E9%B8%A6%E5%9D%90%E9%A3%9E%E6%9C%BA&#34;&gt;&lt;em&gt;乌鸦坐飞机&lt;/em&gt;&lt;/a&gt;问了下去：&lt;br /&gt;
“噢，有什么区别~请讲~”&lt;/p&gt;

&lt;p&gt;没想到 Mia 不坐飞机，一招*借力打力*回了过来：&lt;br /&gt;
“那我先问你，你知道 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 是什么吗？”&lt;/p&gt;

&lt;p&gt;Lirian 顿时懵逼了：&lt;br /&gt;
“啊…不知道……大概是绩效考核的一种方式？”&lt;/p&gt;

&lt;p&gt;“你这么讲也对。&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 的全称其实是 &lt;code&gt;Key Performance Indicator&lt;/code&gt;,&lt;br /&gt;
翻译成中文就是 &lt;code&gt;关键绩效指标&lt;/code&gt;。&lt;br /&gt;
工作上，每个人都可以有自己的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt;,&lt;br /&gt;
一般是一年/半年结一次，&lt;br /&gt;
这个目标要符合 &lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;&lt;code&gt;SMART&lt;/code&gt;&lt;/a&gt; 原则。”&lt;/p&gt;

&lt;p&gt;“啥是 &lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;&lt;code&gt;SMART&lt;/code&gt;&lt;/a&gt; 原则啊？”&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;&lt;code&gt;SMART&lt;/code&gt;&lt;/a&gt; 原则就跟你知道的 &lt;code&gt;SWOT&lt;/code&gt; 分析方法一样，&lt;br /&gt;
是外国人很喜欢的缩写 (acronym).&lt;br /&gt;
具体来说，就是&lt;br /&gt;
&lt;code&gt;Specific, 具体的&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;Measurable, 可量化的&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;Achievable, 能做到的&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;Realistic, 现实的&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;Timely, 有时限的&lt;/code&gt;&lt;br /&gt;
这五个形容词的英文首字母缩写。&lt;br /&gt;
一个科学的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;&lt;code&gt;KPI&lt;/code&gt;&lt;/a&gt; 就得 &lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;&lt;code&gt;SMART&lt;/code&gt;&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;“噢噢噢，明白了。&lt;br /&gt;
比如诸葛亮的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt;,&lt;br /&gt;
&lt;code&gt;今年之内平复南蛮&lt;/code&gt;，&lt;br /&gt;
就比&lt;code&gt;有生之年光复汉室&lt;/code&gt;要科学得多？”&lt;/p&gt;

&lt;p&gt;Mia 勉强赞同了这个类比：&lt;br /&gt;
“呃，可以这么说吧。”&lt;/p&gt;

&lt;h2 id=&#34;为什么要用-okr&#34;&gt;为什么要用 OKR&lt;/h2&gt;

&lt;p&gt;Lirian 想起了最开始的话题：&lt;br /&gt;
“那，&lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 究竟有啥本质区别呢？&lt;br /&gt;
我感觉 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 也得 &lt;a href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;&gt;&lt;code&gt;SMART&lt;/code&gt;&lt;/a&gt; 吧……”&lt;/p&gt;

&lt;p&gt;Mia 想了想，说：&lt;br /&gt;
“我觉得，&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 的目的是不一样的。&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 是告诉你 &lt;code&gt;要我做什么&lt;/code&gt;，&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 是告诉你 &lt;code&gt;我要做什么&lt;/code&gt;。&lt;br /&gt;
还有，&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 一般都和奖金挂钩，&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 就可能不会和奖金挂钩。&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 可能是一下子定一年的目标，&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 经常会变…”&lt;/p&gt;

&lt;p&gt;Lirian 感觉信息密度一下子变大了，&lt;br /&gt;
赶快打断了 Mia 的吟唱：&lt;br /&gt;
“且慢，小弟听不太懂……&lt;br /&gt;
什么是 &lt;code&gt;要我做什么&lt;/code&gt; ?”&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 的 &lt;code&gt;要我做什么&lt;/code&gt; 指的是它一般都是从上到下分解的任务。&lt;br /&gt;
比如我们公司今年要朝市值一亿元去努力，&lt;br /&gt;
每个部门要怎么怎么样，&lt;br /&gt;
具体到每个人要怎么怎么样，&lt;br /&gt;
这些都是要定性定量完成的任务。&lt;br /&gt;
而 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 的 &lt;code&gt;我要做什么&lt;/code&gt; 更多是把一亿元这个目标给摆出来，&lt;br /&gt;
然后部门去决定，短期、长期的部门目标。&lt;br /&gt;
每个人也会根据部门的目标，&lt;br /&gt;
去决定自己的目标。”&lt;/p&gt;

&lt;p&gt;“啊？这么听起来 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 考核压力很大啊！&lt;br /&gt;
听下来我还是喜欢 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; &amp;hellip;”&lt;/p&gt;

&lt;p&gt;“是的呀，&lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 就是硅谷湾区那边弄出来的，&lt;br /&gt;
Google 就把 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 给发扬光大了。&lt;br /&gt;
不过其实这个会因人、岗位而异的。”&lt;/p&gt;

&lt;p&gt;“嗯，怎么讲？”&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 里面有一点很重要，就是可以量化。&lt;br /&gt;
比如像计件工作的车间工人，&lt;br /&gt;
可以直接用完成数量来考核。&lt;br /&gt;
这种时候他的个人意愿、创造力等不会是考核里的重要因素。&lt;br /&gt;
但像不能量化的工作，&lt;br /&gt;
就像你们程序员，&lt;br /&gt;
难道能用代码行数来考核吗？&lt;br /&gt;
明显不科学。&lt;br /&gt;
&lt;em&gt;此处有想到了 &lt;a href=&#34;https://en.wikipedia.org/wiki/Indent_style#K.26R&#34;&gt;K&amp;amp;R naming convention&lt;/a&gt; 而死命点头的 Lirian&lt;/em&gt;&lt;br /&gt;
像 HR,&lt;br /&gt;
假如是做招聘还好，&lt;br /&gt;
可以根据招聘岗位数量来量化。&lt;br /&gt;
但是假如是做培训什么的，&lt;br /&gt;
也无法量化，强行上 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 就会很痛苦。&lt;br /&gt;
所以说 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 这两种绩效考核的方式，&lt;br /&gt;
是因人、岗位、公司而异的。”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;此处 Lirian 又想到了《主角与配角》里的陈佩斯&lt;/p&gt;

&lt;p&gt;朱时茂对他说：“像你这种人，还真得下死命令。”&lt;/p&gt;

&lt;p&gt;明显就是 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 的戏剧冲突啊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lirian 思索 + 理解了一番，&lt;br /&gt;
又问：&lt;br /&gt;
“那像 &lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt; 呢？&lt;br /&gt;
&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt; 是用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 还是 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 的？”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt; 是 Mia 和 Lirian 相识的地方。&lt;br /&gt;
一家专做 ERP 的跨国软件公司，&lt;br /&gt;
主要对手是 SAP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mia 邪魅一笑：&lt;br /&gt;
“&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt; 既不用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt;,&lt;br /&gt;
也不用 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt; 用的是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Management_by_objectives&#34;&gt;MBO&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;Lirian 惊了个呆：&lt;br /&gt;
“还有这种操作啊？&lt;br /&gt;
听起来像是啥电视台的名字，&lt;br /&gt;
这个 &lt;a href=&#34;https://en.wikipedia.org/wiki/Management_by_objectives&#34;&gt;MBO&lt;/a&gt; 又是什么？”&lt;/p&gt;

&lt;p&gt;Mia 解释了一下：&lt;br /&gt;
“这个 &lt;a href=&#34;https://en.wikipedia.org/wiki/Management_by_objectives&#34;&gt;MBO&lt;/a&gt; 呢，&lt;br /&gt;
全称叫 &lt;code&gt;Management by objectives&lt;/code&gt;.&lt;br /&gt;
中文可能叫 &lt;code&gt;目标管理&lt;/code&gt;，其实跟 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 有相似之处。&lt;br /&gt;
它是上世纪六七十年代出现的绩效考核方法，&lt;br /&gt;
比 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 都早，&lt;br /&gt;
萧规曹随，&lt;a href=&#34;https://www.qad.com/about&#34;&gt;QAD&lt;/a&gt; 就一直用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Management_by_objectives&#34;&gt;MBO&lt;/a&gt; 用了下来。&lt;br /&gt;
不过近两年转的 PDP,&lt;br /&gt;
其实就有 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 的影子。”&lt;/p&gt;

&lt;h2 id=&#34;okr-要怎么操作&#34;&gt;OKR 要怎么操作&lt;/h2&gt;

&lt;p&gt;Lirian 想了想，&lt;br /&gt;
又理了一下思路：&lt;br /&gt;
“既然 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 是因部门而异的，&lt;br /&gt;
是不是意味着公司里可以同时使用两套绩效考核的方式啊？”&lt;/p&gt;

&lt;p&gt;“是的呀。&lt;br /&gt;
就像邓爷爷说的，&lt;br /&gt;
&lt;code&gt;不管黑猫白猫，抓到老鼠的就是好猫。&lt;/code&gt;&lt;br /&gt;
所有管理理论在具体落地的时候，&lt;br /&gt;
只要合适就可以实施。”&lt;/p&gt;

&lt;p&gt;“那，有没有可能同一个部门里，&lt;br /&gt;
有些员工用 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt;,&lt;br /&gt;
有些员工用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 管理呢？”&lt;/p&gt;

&lt;p&gt;“哦，这个不可能。”&lt;/p&gt;

&lt;p&gt;Lirian 表示疑惑：&lt;br /&gt;
“为啥呀，&lt;br /&gt;
假如我在一个 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 团队里，&lt;br /&gt;
但是我就是需要明确的量化的指标告诉我干啥，&lt;br /&gt;
那该咋办？”&lt;/p&gt;

&lt;p&gt;Mia 回答的很快：&lt;br /&gt;
“那其实说明你不适合这个团队，&lt;br /&gt;
因为团队有自己的统一风格也是很重要的。”&lt;/p&gt;

&lt;p&gt;Lirian 只能无奈地学到了这个事实：&lt;br /&gt;
“好吧……”&lt;/p&gt;

&lt;p&gt;讲到了团队，Mia 又补充了几点：&lt;br /&gt;
“目前的 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 应用状况是：&lt;br /&gt;
在中国，用的比较多的是创业公司、互联网公司、正在转型的公司。&lt;br /&gt;
美国的话就是硅谷的科技公司。&lt;br /&gt;
当然因为 &lt;a href=&#34;https://en.wikipedia.org/wiki/OKR&#34;&gt;OKR&lt;/a&gt; 其实只是一个指导方针，&lt;br /&gt;
所以每个公司执行的政策也会各有不同。”&lt;/p&gt;

&lt;p&gt;Lirian 心想：&lt;br /&gt;
嗯，正如每个人都会有一套 RestFul 的风格……&lt;/p&gt;

&lt;p&gt;Mia 又想起来 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 有一点很大的弊端：&lt;br /&gt;
“还有就是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 有一个很大的问题，&lt;br /&gt;
大家很容易本末倒置。&lt;br /&gt;
为了完成 &lt;a href=&#34;https://en.wikipedia.org/wiki/Performance_indicator&#34;&gt;KPI&lt;/a&gt; 的定量指标，&lt;br /&gt;
就背离了公司本来的目标。”&lt;/p&gt;

&lt;p&gt;“是啊，不忘初心很重要。&lt;br /&gt;
希望 CN Dota 加油，&lt;br /&gt;
明年 TI 加油吧。”&lt;/p&gt;

&lt;p&gt;“啊？”&lt;/p&gt;

&lt;p&gt;“唔，我来跟你讲讲什么是 TI 吧。”&lt;/p&gt;

&lt;p&gt;（本章完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub上的小标签有什么好玩的</title>
      <link>https://liriansu.com/posts/2017-08-08-github-badges/</link>
      <pubDate>Tue, 08 Aug 2017 23:10:01 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-08-github-badges/</guid>
      <description>&lt;p&gt;GitHub很多项目主页都会放上好玩的小标签（GitHub Badges），&lt;br /&gt;
这次我们也来玩点表面功夫。&lt;/p&gt;

&lt;h2 id=&#34;首先-我们要有一个项目&#34;&gt;首先，我们要有一个项目&lt;/h2&gt;

&lt;p&gt;前阵子&lt;a href=&#34;https://www.jingkaizhao.com/&#34;&gt;靖哥哥&lt;/a&gt;口嫌体正直地吐槽了一下&lt;a href=&#34;https://github.com/typicode/lowdb&#34;&gt;lowdb&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个lowdb，&lt;br /&gt;
好用是好用，&lt;br /&gt;
但是也太low了吧&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我十分好奇，&lt;br /&gt;
跑去看了看&lt;a href=&#34;https://github.com/typicode/lowdb&#34;&gt;lowdb&lt;/a&gt;的介绍：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这是一个 JSON 格式的微型数据库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;诶，微型诶，感觉萌萌哒。&lt;br /&gt;
那 Python 有没有对标的库呢？&lt;br /&gt;
有，那就是&lt;a href=&#34;https://tinydb.readthedocs.io/en/latest/intro.html&#34;&gt;tinydb&lt;/a&gt;~&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tinydb 大概只有1200行源代码，以及1000行测试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;啥？！这还tiny呢？&lt;br /&gt;
怕是18级的tiny吧？&lt;/p&gt;

&lt;p&gt;于是我们决定，&lt;br /&gt;
&lt;strong&gt;要有一个比tinydb还tiny的，比lowdb还要low的数据库。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;起名字顿时是个问题。&lt;br /&gt;
既然犹豫不定，&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/forgive-her-meme&#34;&gt;那就选择原谅他吧&lt;/a&gt;~&lt;br /&gt;
于是又一个轮子诞生了：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hui-z/ForgiveDB&#34;&gt;原谅数据库(hui-z/ForgiveDB)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/github/forgive.jpg&#34; alt=&#34;readme&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-badges&#34;&gt;GitHub Badges&lt;/h2&gt;

&lt;p&gt;忽略README里对项目本身的吹捧，&lt;br /&gt;
Logo下面那一长串绿绿的小标签，&lt;br /&gt;
就是Badges啦~&lt;br /&gt;
&lt;a href=&#34;https://liriansu.com/how-i-use-github&#34;&gt;由于程序员一般都在GitHub上活动&lt;/a&gt;，&lt;br /&gt;
所以大家也习惯把这些叫做是GitHub Badges&lt;br /&gt;
（即使在别的地方也可以用到它们）&lt;/p&gt;

&lt;p&gt;本质上这些小标签就是能点的图片，&lt;br /&gt;
比如用 &lt;a href=&#34;https://liriansu.com/hrbp-and-markdown&#34;&gt;Markdown 语法&lt;/a&gt;可以这么写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;![ForgiveDB&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://img.shields.io/badge/ForgiveDB-HuiZ-brightgreen.svg&lt;/span&gt;)](https://github.com/hui-z/ForgiveDB)

&lt;span style=&#34;font-style:italic&#34;&gt;*这么一长串实际上是 Markdown 里图片的语法，加超链接的语法组合成的*&lt;/span&gt;

![&lt;span style=&#34;color:#f92672&#34;&gt;图片的语法&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://img.shields.io/badge/ForgiveDB-HuiZ-brightgreen.svg&lt;/span&gt;)

[&lt;span style=&#34;color:#f92672&#34;&gt;超链接的语法&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://github.com/hui-z/ForgiveDB&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面一串就会变成这样子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hui-z/ForgiveDB&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ForgiveDB-HuiZ-brightgreen.svg&#34; alt=&#34;ForgiveDB&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这么一长串实际上是 Markdown 里图片的语法，加超链接的语法组合成的&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/ForgiveDB-HuiZ-brightgreen.svg&#34; alt=&#34;图片的语法&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hui-z/ForgiveDB&#34;&gt;超链接的语法&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;各种-badges&#34;&gt;各种 Badges&lt;/h2&gt;

&lt;p&gt;具体来看，&lt;br /&gt;
我们在 &lt;a href=&#34;https://github.com/hui-z/ForgiveDB&#34;&gt;ForgiveDB&lt;/a&gt; 里用到的标签有这些：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shields.io/&#34;&gt;&lt;strong&gt;shields.io&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
这个值得单独拎出来讲，&lt;br /&gt;
因为他们是个专门做 Badges 的网站，&lt;br /&gt;
上面图还是 SVG 矢量图，&lt;br /&gt;
在任何分辨率屏幕下都不会模糊。&lt;br /&gt;
假如我们想挑各种各样奇怪的 Badges,&lt;br /&gt;
（比如 star 项目的数量、&lt;br /&gt;
issue 关闭的数量、&lt;br /&gt;
npm, pypi, nuget的版本、&lt;br /&gt;
甚至是自定义任意字符）&lt;br /&gt;
都可以上&lt;a href=&#34;https://shields.io/&#34;&gt;shields.io&lt;/a&gt;找找看。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/forgive&#34;&gt;&lt;strong&gt;PyPI&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
这个是 Python 官方的包仓库，&lt;br /&gt;
&lt;a href=&#34;https://shields.io/&#34;&gt;shields.io&lt;/a&gt;也支持版本自动嗅探。&lt;br /&gt;
低于 1.0.0 版本的好像还会变成屎黄色…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://pyup.io/repos/github/hui-z/ForgiveDB/&#34;&gt;&lt;strong&gt;pyup.io&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
这个服务很好玩，&lt;br /&gt;
授权以后它会自动检测你的 requirements 是不是最新的。&lt;br /&gt;
假如一有更新，&lt;br /&gt;
&lt;a href=&#34;https://github.com/hui-z/ForgiveDB/pull/7&#34;&gt;pyup-bot 会直接给项目提一个 Pull Request&amp;hellip;&lt;/a&gt;&lt;br /&gt;
简直酷炫。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hui-z/ForgiveDB&#34;&gt;&lt;strong&gt;travis-ci.org&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
这个就是大众熟知的 Travis 自动化集成工具了，&lt;br /&gt;
Travis 对开源项目免费，&lt;br /&gt;
十分友好。&lt;br /&gt;
而且功能强大，&lt;br /&gt;
&lt;a href=&#34;https://github.com/marketplace/travis-ci&#34;&gt;和 GitHub 也有很多集成&lt;/a&gt;，&lt;br /&gt;
用着十分舒服。&lt;br /&gt;
（前提是你得写点 UT 什么的）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其它：&lt;br /&gt;
还有一些 &lt;a href=&#34;https://codecov.io/github/hui-z/ForgiveDB?branch=master&#34;&gt;CodeCov 测试覆盖率&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://www.appveyor.com/&#34;&gt;AppVeyor 又一个好用的 CI&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI 双一个好用的 CI&lt;/a&gt;&lt;br /&gt;
等等，等等……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大概这就是给 ForgiveDB 挑好看的标签的旅程了。&lt;br /&gt;
这份心情，&lt;br /&gt;
就像是给心爱的键盘选好看的键帽一样美好。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hui-z/ForgiveDB&#34;&gt;最后欢迎大家给 ForgiveDB 提 Pull Request&lt;/a&gt;~&lt;br /&gt;
就算是&lt;a href=&#34;https://github.com/hui-z/ForgiveDB/pull/8&#34;&gt;像靖哥哥一样只改改文档&lt;/a&gt;，&lt;br /&gt;
&lt;a href=&#34;https://github.com/hui-z/ForgiveDB/graphs/contributors&#34;&gt;混个 contributor 也行&lt;/a&gt;啊~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我们是怎么升级到Python3的</title>
      <link>https://liriansu.com/posts/2017-08-06-py2-to-py3/</link>
      <pubDate>Sun, 06 Aug 2017 12:07:32 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-06-py2-to-py3/</guid>
      <description>&lt;p&gt;最近我们从Python2.7,&lt;br /&gt;
全线升级到了Python3.5。&lt;/p&gt;

&lt;h2 id=&#34;python2-和-python3-有啥区别啊&#34;&gt;Python2 和 Python3 有啥区别啊？&lt;/h2&gt;

&lt;p&gt;在程序员的理想乡里，&lt;br /&gt;
程序语言理应只是个好用的工具。&lt;br /&gt;
然而在现实生活里，&lt;br /&gt;
程序语言甚至是程序语言的版本，&lt;br /&gt;
关系到工程的很多方面。&lt;br /&gt;
Python2和Python3就像是小黄车和摩拜一样，&lt;br /&gt;
在某几个大的特性上有区别，&lt;br /&gt;
但本质上都一样，&lt;br /&gt;
不过一些细微之处又有不同。&lt;/p&gt;

&lt;p&gt;比如说 Python2 最坑的 Unicode.&lt;br /&gt;
写过 Python2 的人总会遇到 &lt;code&gt;UnicodeDecodeError&lt;/code&gt; 和 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 这样的错。&lt;br /&gt;
在电话面试的时候，&lt;br /&gt;
我们回答候选人我们为什么会用 Python2,&lt;br /&gt;
也是把锅丢给谢老板：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;嗯是这样的，&lt;br /&gt;
我们第一行代码到整个初期框架都是 CEO 选的。&lt;br /&gt;
他是美国回来的，&lt;br /&gt;
所以不知道中国要用中文，&lt;br /&gt;
也会遇到 Unicode 相关的问题。&lt;br /&gt;
于是他没想太多，&lt;br /&gt;
就选了 Python2.7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;真实原因还有很大一部分是因为当时一些库对 Python2 支持比较好&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;除了 Unicode 的区别，&lt;br /&gt;
Python2 到 Python3 还有一些系统自带函数有变化。&lt;br /&gt;
比如 &lt;code&gt;urllib.urlencode -&amp;gt; urllib.parse.urlencode&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;StringIO.StringIO -&amp;gt; io.BytesIO&lt;/code&gt;。&lt;br /&gt;
一般项目里面可以用&lt;a href=&#34;https://pypi.python.org/pypi/six&#34;&gt;six&lt;/a&gt;这个库来做兼容，&lt;br /&gt;
比如上面举的两个例子可以用&lt;code&gt;six.moves.urllib.parse.urlencode&lt;/code&gt;&lt;br /&gt;
和&lt;code&gt;six.BytesIO&lt;/code&gt;来替换，&lt;br /&gt;
Django也自带了一个&lt;a href=&#34;https://pypi.python.org/pypi/six&#34;&gt;six&lt;/a&gt;在&lt;code&gt;django.utils.six&lt;/code&gt;.&lt;br /&gt;
不过我们是自己搭建环境，&lt;br /&gt;
所以其实不用考虑兼容性，&lt;br /&gt;
迁移工作大概的 Milestone 如下：&lt;/p&gt;

&lt;h2 id=&#34;一些微小的工作&#34;&gt;一些微小的工作&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;确保自己代码的兼容性。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;确保第三方库的兼容性。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;确保单元测试能过。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;确保测试环境、集成测试能过。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;正式环境切换 Python3！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;宣布辉煌结果！&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如说讲些我们具体做的事情吧：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ldsink.com/&#34;&gt;柳老板&lt;/a&gt;很早就想把&lt;del&gt;谢老板的&lt;/del&gt;Python2换了。&lt;br /&gt;
所以大概在16年底的时候，&lt;br /&gt;
我们都有这个心理预期。&lt;br /&gt;
因为我们都是 &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; 用户，&lt;br /&gt;
(&lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;JetBrains&lt;/a&gt; 家巨好用的 &lt;a href=&#34;[https://en.wikipedia.org/wiki/Integrated_development_environment]&#34;&gt;IDE&lt;/a&gt;)&lt;br /&gt;
所以都打开了 Python Compatibility Inspection。&lt;br /&gt;
然后写代码的时候注意不使用&lt;code&gt;xrange()&lt;/code&gt;, &lt;code&gt;dict.iteritems()&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;,&lt;br /&gt;
而用&lt;code&gt;range()&lt;/code&gt;, &lt;code&gt;dict.items()&lt;/code&gt;, &lt;code&gt;print()&lt;/code&gt;来代替。&lt;br /&gt;
对于Unicode一类的问题，&lt;br /&gt;
我们使用了&lt;code&gt;__future__&lt;/code&gt;这个功能，&lt;br /&gt;
确保每个文件的头都是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; absolute_import, unicode_literals

&lt;span style=&#34;color:#75715e&#34;&gt;# 第一行指定 encoding&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 第二行 absolute_import 指定优先从绝对路径 import&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   参见 PEP-0328: https://www.python.org/dev/peps/pep-0328&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 第二行 unicode_literals 指定字符串默认使用 unicode 类型&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   参见 PEP-3112: https://www.python.org/dev/peps/pep-3112&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如有个很蠢的&lt;a href=&#34;https://docs.python.org/3/library/2to3.html&#34;&gt;py2to3&lt;/a&gt;的工具，&lt;br /&gt;
用它最好情况也只能把上面说到的“自己代码和系统依赖”给替换了。&lt;br /&gt;
具体的库替换、正确性验证还是得自己做。&lt;/p&gt;

&lt;p&gt;后来我们又大概过了一遍用到的第三方库（requirements.txt）。&lt;br /&gt;
最大的依赖 Django 本身是2/3都兼容的，&lt;br /&gt;
然后像 celery/redis/requests 这种兼容性也妥妥的。&lt;br /&gt;
之前我们用的 &lt;a href=&#34;https://boto.cloudhackers.com/en/latest/&#34;&gt;AWS Python SDK - boto&lt;/a&gt; 不支持 Python3，&lt;br /&gt;
这个好说，对应的功能可以用&lt;a href=&#34;https://boto3.readthedocs.io/en/latest/&#34;&gt;boto3&lt;/a&gt;来替换。&lt;/p&gt;

&lt;p&gt;比较麻烦的是当时用的微信库&lt;a href=&#34;https://github.com/doraemonext/wechat-python-sdk&#34;&gt;python-wechat-sdk&lt;/a&gt;。&lt;br /&gt;
这个主要是我们用到了微信的很多功能：&lt;br /&gt;
消息回复、用户管理、模板/图文、各种素材等。&lt;br /&gt;
本身代码量就不小，&lt;br /&gt;
而且之前的代码写的还比较屎，&lt;br /&gt;
亟需重构。&lt;br /&gt;
于是我们花了几个月来重构代码+换库，&lt;br /&gt;
最终换成了更科学更好用的&lt;a href=&#34;https://github.com/jxtech/wechatpy&#34;&gt;wechatpy&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;代码上的准备工作做完以后&lt;br /&gt;
（虽然这是轻巧的一句话，&lt;br /&gt;
但是因为实际开发中，&lt;br /&gt;
不可能空出一段时间专门用于架构升级。&lt;br /&gt;
所以我们都是在各种业务需求中找夹缝做的，&lt;br /&gt;
大概用了半年。）&lt;/p&gt;

&lt;p&gt;代码上的准备工作做完以后，&lt;br /&gt;
我们又用Python3跑了一下&lt;a href=&#34;https://en.wikipedia.org/wiki/Unit_testing&#34;&gt;单元测试(UT)&lt;/a&gt;。&lt;br /&gt;
&lt;strong&gt;完善的自动测试，是平时的保障，是关键时刻的定心丸。&lt;/strong&gt;&lt;br /&gt;
理论上 Python2 到 Python3,&lt;br /&gt;
不应当有任何外部表现差异，&lt;br /&gt;
UT也不应当有错。&lt;br /&gt;
所以在修复了UT的错误以后，&lt;br /&gt;
我们就有信心切换 Python3 跑跑了。&lt;/p&gt;

&lt;p&gt;这里还有个小差别，&lt;br /&gt;
就是我们之前的服务器用的是 &lt;code&gt;Ubuntu 14 (Trusty)&lt;/code&gt;，&lt;br /&gt;
Ubuntu14 上默认的 Python3 是 Python3.4。&lt;br /&gt;
最新的 Ubuntu 版本是 &lt;code&gt;Ubuntu 16 (Xenial)&lt;/code&gt;，&lt;br /&gt;
上面默认的 Python3 是 Python3.5。&lt;br /&gt;
&lt;a href=&#34;https://ldsink.com/&#34;&gt;柳老板&lt;/a&gt;也心水了 Ubuntu16 很久了，&lt;br /&gt;
于是这次切换 Python3,&lt;br /&gt;
我们也顺便把服务器版本升到了 Ubuntu16。&lt;br /&gt;
&lt;del&gt;不能print中文的feature也下掉了&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;然后就是测试环境切换 Python3，&lt;br /&gt;
生产环境切换 Python3 了。&lt;br /&gt;
这里也有个小插曲，&lt;br /&gt;
生产环境切换 Python3 的时候，&lt;br /&gt;
我们原本想着先只&lt;a href=&#34;https://en.wikipedia.org/wiki/A/B_testing&#34;&gt;升级一部分Server（灰度）&lt;/a&gt;，&lt;br /&gt;
但是 Celery 的 Python2 Producer抛出的任务，&lt;br /&gt;
Python3 Consumer能接，&lt;br /&gt;
但是百分百完不成…&lt;/p&gt;

&lt;p&gt;于是我们决定这还灰个蛋，不灰了！&lt;br /&gt;
找一天晚上点份奶茶和小龙虾，&lt;br /&gt;
全线切换Python3！&lt;br /&gt;
因为做好了前期准备，&lt;br /&gt;
所以我们大概只花了十分钟切换成了Python3~&lt;br /&gt;
腰也不酸了，&lt;br /&gt;
颈椎也不疼了，&lt;br /&gt;
连美餐的饭也好像变得美味了起来。&lt;br /&gt;
现在的&lt;a href=&#34;https://www.kezaihui.com/#!/join&#34;&gt;我司后台就是跑在Python3上的~&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后还有就是大家的开发环境也切换一下 Python3 啦，&lt;br /&gt;
以前写的 docstring 可以切换成 &lt;a href=&#34;https://docs.python.org/3/library/typing.html&#34;&gt;type hintings&lt;/a&gt; 啦之类的微小的工作了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Python 2 的时候这么写&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;old_hint&lt;/span&gt;(messages, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;()):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :type messages: list
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :type data: list[dict]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :rtype: str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# Python 3 就可以这么写&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_hint&lt;/span&gt;(messages: list, data: list(dict) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ()) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;从 Python 2 到 Python 3 的好处见仁见智，&lt;br /&gt;
对于不同的情况各有不同。&lt;br /&gt;
做成这么一件微小的事情，&lt;br /&gt;
感受比较深的就是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;目标要清晰。&lt;/strong&gt;&lt;br /&gt;
比如我们早早地就把 Python 3 提到了我们的 Scrum Board 上。&lt;br /&gt;
除了技术很清楚我们要做什么，&lt;br /&gt;
产品也会有意识地给我们升级架构留下排期。&lt;br /&gt;
目标清晰，大家步伐就会一致。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;要有推动者。&lt;/strong&gt;&lt;br /&gt;
比如&lt;a href=&#34;https://ldsink.com/&#34;&gt;柳老板&lt;/a&gt;就充当了整件事情的推动者，&lt;br /&gt;
有序给大家分锅，具体哪个模块谁来重构，哪个库谁来换。&lt;br /&gt;
一些没人想干的麻烦/要背锅的事情他也都做了，&lt;br /&gt;
比如去修UT的兼容性之类的…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;互相信任真好。&lt;/strong&gt;&lt;br /&gt;
后端升级架构，&lt;br /&gt;
其实各方面都会受影响，&lt;br /&gt;
比如上文提到的 Celery 那个坑就让我们紧急回退了版本，&lt;br /&gt;
或者类比一下游戏厂商每周例行的停服务器操作。&lt;br /&gt;
这时候产生的一些锅，&lt;br /&gt;
就被一线的队友背了，&lt;br /&gt;
他们也没多埋怨就帮我们擦屁股去了…&lt;br /&gt;
ORZ 感恩！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不论如何，&lt;code&gt;Python 3&lt;/code&gt;毕竟是趋势，&lt;br /&gt;
&lt;a href=&#34;https://www.djangoproject.com/weblog/2015/jun/25/roadmap/&#34;&gt;Django的新版本不会支持Python 2&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://docs.celeryproject.org/en/latest/whatsnew-4.0.html#last-major-version-to-support-python-2&#34;&gt;Celery的新版本也不会支持Python 2了&lt;/a&gt;。&lt;br /&gt;
我们也不能落后呀。&lt;/p&gt;

&lt;p&gt;就像&lt;a href=&#34;https://coolshell.cn/articles/17583.html&#34;&gt;陈皓老师&lt;/a&gt;常说的一样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;技术债是还不完的，但我们也要一直还！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;陈皓老师：不，我没说过这句话，你自己编的。&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>人类真愚蠢——《南方公园》</title>
      <link>https://liriansu.com/posts/2017-08-05-south-park-intro/</link>
      <pubDate>Sat, 05 Aug 2017 19:29:14 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-08-05-south-park-intro/</guid>
      <description>&lt;p&gt;给你们介绍一个美漫。&lt;/p&gt;

&lt;p&gt;讲到美国动漫（美漫），&lt;br /&gt;
不同人的第一反应是不一样的。&lt;br /&gt;
有人会想到《狮子王》、《猫和老鼠》，&lt;br /&gt;
有人会想到《瑞克和莫蒂》、《Happy Tree Friends》，&lt;br /&gt;
也有人会想到《超人》、《守望者》。&lt;/p&gt;

&lt;p&gt;不过这些都不重要，&lt;br /&gt;
因为跟这些_辣鸡_动画/漫画相比，&lt;br /&gt;
我们今天要讲的是一个更_辣鸡_的动画：&lt;/p&gt;

&lt;h2 id=&#34;南方公园-south-park&#34;&gt;南方公园 South Park&lt;/h2&gt;

&lt;p&gt;在美国的南部，有个公园，叫南方公园。&lt;br /&gt;
我们有四个小学生主角：&lt;br /&gt;
&lt;code&gt;Cartman&lt;/code&gt;, &lt;code&gt;Kyle&lt;/code&gt;, &lt;code&gt;Stan&lt;/code&gt;, &lt;code&gt;Kenny&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/sp/boys.jpg&#34; alt=&#34;boys&#34; /&gt;&lt;/p&gt;

&lt;p&gt;众所周知，&lt;br /&gt;
小学生都是怪物。&lt;br /&gt;
南方四剑客（没错，这个称号就是这么&lt;a href=&#34;https://zh.moegirl.org/zh-hans/%E4%B8%AD%E4%BA%8C%E7%97%85&#34;&gt;中二&lt;/a&gt;）的日常，&lt;br /&gt;
也是波涛汹涌。&lt;/p&gt;

&lt;p&gt;比如说作为一家万众瞩目的创业公司，&lt;br /&gt;
要开新闻发布会啦（S18E01）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/sp/cartman_fw.jpg&#34; alt=&#34;news&#34; /&gt;&lt;/p&gt;

&lt;p&gt;比如说作为一个变性人，&lt;br /&gt;
要享受自己选择厕所的权利啦（S18E03）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/sp/cartman_trans.jpg&#34; alt=&#34;trans&#34; /&gt;&lt;/p&gt;

&lt;p&gt;比如还有 Elon Mask 的乱入啦（S18E04）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/sp/elon.jpg&#34; alt=&#34;elon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;比如里面的加拿大人都是这个画风（S18E06）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/sp/t_and_p.jpg&#34; alt=&#34;t-p&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;南方公园的特别之处&#34;&gt;南方公园的特别之处&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.adultswim.com/videos/rick-and-morty/&#34;&gt;Rick And Morty&lt;/a&gt;特别之处是它的背景、线索、剧情设定，&lt;br /&gt;
&lt;a href=&#34;https://mondomedia.com/channel/HappyTreeFriends&#34;&gt;Happy Tree Friends&lt;/a&gt;特别之处是它的直白、不留情面。&lt;br /&gt;
南方公园(South Park, 简称SP)的特别之处是在于他的世界观：&lt;br /&gt;
&lt;strong&gt;每个人都是特别的，所有人都是愚蠢的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SP反政治正确（Political Correctness, 简称PC），&lt;br /&gt;
专门搞了个校长叫 P.C. Principal.&lt;br /&gt;
他做的事情全部都是政治正确的，&lt;br /&gt;
结果被讽刺地不行。&lt;/p&gt;

&lt;p&gt;SP也反政治不正确，&lt;br /&gt;
虽然PC校长一直被挂，&lt;br /&gt;
但最后他还是很帅地站出来拯救了南方公园，&lt;br /&gt;
以及发表了一番&lt;a href=&#34;https://wiki.southpark.cc.com/wiki/Kyle_Broflovski&#34;&gt;gay little speech&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;SP讽刺中国人。&lt;br /&gt;
在南方公园的中国人是开餐厅的，&lt;br /&gt;
眼睛小站不直，&lt;br /&gt;
满嘴蜜汁口音。&lt;/p&gt;

&lt;p&gt;SP讽刺加拿大人。&lt;br /&gt;
长的奇怪，&lt;br /&gt;
思想简单，&lt;br /&gt;
爱好奇葩，&lt;br /&gt;
连画风都跟别人不一样（字面意义上的画风不一样）…&lt;/p&gt;

&lt;p&gt;SP更加讽刺美国人。&lt;br /&gt;
比如美国电视不允许出现 F-word 这个脏话，&lt;br /&gt;
SP就在其中的某一集里面塞了两百多个 F-word…&lt;/p&gt;

&lt;p&gt;总而言之，&lt;br /&gt;
在南方公园，&lt;br /&gt;
所有人都会被黑。&lt;br /&gt;
但就是这一点让它变得特别：&lt;br /&gt;
&lt;strong&gt;想要黑人，先要自黑。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;从第几集看起呢&#34;&gt;从第几集看起呢？&lt;/h2&gt;

&lt;p&gt;南方公园到现在已经有快20季，总共200集了。&lt;br /&gt;
但是剧情之间连贯性不是特别强，&lt;br /&gt;
所以想看的话可以从最新的18, 19季开始看起。&lt;br /&gt;
（直接到B站上搜 南方公园 就有资源了）&lt;/p&gt;

&lt;p&gt;或者也可以挑一些精彩的话题性单集看：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;南方公园第8季第7集：迈克尔杰弗逊 (SP S08E07: The Jeffersons)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;南方公园第10季第8集：魔兽世界 (SP S10E08: Make love, not Warcraft)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;南方公园第17季第7/8集：冰与火之歌 (SP S17E07/08: A Song Of Ass and Fire)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过不管从哪看起，&lt;br /&gt;
也改变不了你们是愚蠢的人类这个事实。&lt;br /&gt;
科科。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>原来我喜欢的是打底裤</title>
      <link>https://liriansu.com/posts/2017-07-30-girls-stockings/</link>
      <pubDate>Sun, 30 Jul 2017 18:24:30 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-30-girls-stockings/</guid>
      <description>&lt;p&gt;以前一直觉得穿黑色丝袜的小姐姐们好好看啊，&lt;br /&gt;
后来才知道，&lt;br /&gt;
我以为好看的那些都是打底裤。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;以前的某个春天，&lt;br /&gt;
跟女朋友在街上闲逛的时候，&lt;br /&gt;
我感慨了一句：&lt;br /&gt;
“怪不得那么多男人喜欢黑丝，&lt;br /&gt;
PLMM穿黑丝是好看啊。“&lt;br /&gt;
女朋友鄙视了我一眼：&lt;br /&gt;
“你以为的黑丝，&lt;br /&gt;
其实都是打底裤。”&lt;br /&gt;
我：“啊？！？！？”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/stockings/wtf.jpg&#34; alt=&#34;wtf&#34; /&gt;&lt;/p&gt;

&lt;p&gt;年幼的我对黑丝的理解很简单：&lt;br /&gt;
“穿在腿上的，&lt;br /&gt;
黑的，&lt;br /&gt;
看起来有丝的感觉，&lt;br /&gt;
那应该就是黑丝了。”&lt;/p&gt;

&lt;p&gt;然后女朋友问我：&lt;br /&gt;
“你知道黑丝、裤袜、打底裤、紧身裤的区别吗？”&lt;/p&gt;

&lt;p&gt;“……啥啥啥？能再问一遍吗。。。”&lt;/p&gt;

&lt;p&gt;“你知道黑丝、裤袜、打底裤、紧身裤有什么区别不？”&lt;/p&gt;

&lt;p&gt;“……噢噢噢，紧身裤我知道！&lt;br /&gt;
紧身的裤子！&lt;br /&gt;
搞摇滚的特喜欢！&lt;br /&gt;
就是汪峰那种！”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/cold.jpg&#34; alt=&#34;cold&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来女朋友跟我稍微解释了一下，&lt;br /&gt;
再配合维基等解释，&lt;br /&gt;
我稍微总结一下这几个名词的区别：&lt;/p&gt;

&lt;h2 id=&#34;丝袜&#34;&gt;丝袜&lt;/h2&gt;

&lt;p&gt;丝袜就是丝质的袜子，&lt;br /&gt;
黑丝就是黑色的丝袜。&lt;/p&gt;

&lt;p&gt;这句话有没有很有韵律感，&lt;br /&gt;
感觉随时都要寻找光明了。&lt;/p&gt;

&lt;p&gt;一般来说丝袜都比较透，&lt;br /&gt;
像那种腿毛比较旺盛的妹子，&lt;br /&gt;
假如不刮腿毛的话，&lt;br /&gt;
穿浅色丝袜就容易不好看。&lt;br /&gt;
所以从这个角度上来说，&lt;br /&gt;
黑色丝袜也更受欢迎。&lt;br /&gt;
而且&lt;a href=&#34;https://www.zhihu.com/question/20320697&#34;&gt;黑色显瘦&lt;/a&gt;嘛。&lt;/p&gt;

&lt;h2 id=&#34;裤袜&#34;&gt;裤袜&lt;/h2&gt;

&lt;p&gt;裤袜其实可以算是丝袜的一种，&lt;br /&gt;
分不清也不是你的错。&lt;/p&gt;

&lt;p&gt;裤袜就是像裤子一样的丝袜，&lt;br /&gt;
普通的丝袜是袜子，&lt;br /&gt;
是两只一对的。&lt;br /&gt;
裤袜就只有一条，&lt;br /&gt;
它是连在一起的。&lt;/p&gt;

&lt;h2 id=&#34;打底裤&#34;&gt;打底裤&lt;/h2&gt;

&lt;p&gt;首先打底裤跟&lt;a href=&#34;https://zh.moegirl.org/zh-hans/%E5%AE%89%E5%85%A8%E8%A3%A4&#34;&gt;安全裤&lt;/a&gt;肯定是有区别的。&lt;br /&gt;
&lt;del&gt;作为一个舞区观众，&lt;br /&gt;
我大概很了解安全裤&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;打底裤是长裤，&lt;br /&gt;
好像说最开始功能跟安全裤类似，&lt;br /&gt;
都是防走光打底用的。&lt;br /&gt;
但是因为一些打底裤穿着很舒服，&lt;br /&gt;
也很自然地变成了单穿的长裤。&lt;/p&gt;

&lt;p&gt;春秋之际路上小姐姐穿的黑色薄薄的裤子，&lt;br /&gt;
其实很多都是打底裤。&lt;/p&gt;

&lt;h2 id=&#34;紧身裤&#34;&gt;紧身裤&lt;/h2&gt;

&lt;p&gt;没错，就是汪峰的那种裤子。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;女朋友看完了我上面的解释，&lt;br /&gt;
表示我总结的很好，&lt;br /&gt;
但是理解的不对：&lt;br /&gt;
现在丝袜大部分也是连在一起的了，&lt;br /&gt;
裤袜比丝袜要厚。&lt;/p&gt;

&lt;p&gt;我：&lt;br /&gt;
ToT 不听不懂不学不看，&lt;br /&gt;
太复杂啦。&lt;br /&gt;
我只知道，&lt;br /&gt;
原来我不喜欢黑丝，&lt;br /&gt;
我喜欢打底裤。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/stockings/what.jpg&#34; alt=&#34;what&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>现金牛是什么梗？</title>
      <link>https://liriansu.com/posts/2017-07-27-what-is-cash-cow/</link>
      <pubDate>Thu, 27 Jul 2017 22:31:18 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-27-what-is-cash-cow/</guid>
      <description>&lt;p&gt;最近产品经理小刘很苦恼，&lt;br /&gt;
因为别人一直问他，&lt;br /&gt;
PPT上面的*现金流*是不是写错了？&lt;br /&gt;
写成了&lt;em&gt;现金牛&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;故事的背景大概是，&lt;br /&gt;
因为客户在我们的云平台上管理会员，&lt;br /&gt;
所以我们想免费给他们展示一波数据，&lt;br /&gt;
给他们做商业决策来点帮助。&lt;/p&gt;

&lt;h2 id=&#34;swot&#34;&gt;SWOT&lt;/h2&gt;

&lt;p&gt;说到商业决策的分析方法，&lt;br /&gt;
有个&lt;a href=&#34;https://en.wikipedia.org/wiki/SWOT_analysis&#34;&gt;很著名的 SWOT 分析法&lt;/a&gt;，&lt;br /&gt;
会从四个维度来分析当前形势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S, Strengths, 优势，&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;W, Weaknesses, 劣势；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;O, Opportunities, 机遇，&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;T, Threats, 威胁。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如诸葛亮在三顾茅庐作的&lt;a href=&#34;https://baike.baidu.com/item/%E9%9A%86%E4%B8%AD%E5%AF%B9/188772&#34;&gt;隆中对&lt;/a&gt;，&lt;br /&gt;
就是典型的 SWOT 分析：&lt;br /&gt;
&lt;em&gt;举个栗子，不要在意细节&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优势：&lt;code&gt;将军既帝室之胄，信义著于四海。&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;劣势：&lt;code&gt;今操已拥百万之众，挟天子以令诸侯，此诚不可与争锋。&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;机遇：&lt;code&gt;刘璋暗弱，张鲁在北，民殷国富而不知存恤，智能之士思得明君。&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;威胁：&lt;code&gt;将军身率益州之众出于秦川，百姓孰敢不箪食壶浆，以迎将军者乎？&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;把 SWOT 画成&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E8%AF%B1%E5%AF%BC%E5%85%AC%E5%BC%8F&#34;&gt;&lt;code&gt;奇变偶不变符号看象限&lt;/code&gt;&lt;/a&gt;的图大概是这样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/bcg/swot.jpg&#34; alt=&#34;swot-matrix&#34; /&gt;&lt;/p&gt;

&lt;p&gt;很多鸡汤小故事里会描述一个这样的场景：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A公司以前发展很快，&lt;br /&gt;
但是最近陷入瓶颈了，&lt;br /&gt;
老板很苦恼。&lt;/p&gt;

&lt;p&gt;后来他们花一百万美金请了专业商业公司B的人来分析，&lt;br /&gt;
这个B公司的人花了一个月的时间实地考察，&lt;br /&gt;
然后花了两天画了一个 PPT,&lt;br /&gt;
上面就两张图。&lt;br /&gt;
一张是家人合照，&lt;br /&gt;
因为美国人都很有家庭观念。&lt;br /&gt;
另外一张就是 SWOT 分析。&lt;/p&gt;

&lt;p&gt;A公司老板很气愤：&lt;br /&gt;
“我花一百万不是让你来做 PPT 的！”&lt;br /&gt;
这个B公司的人很平静地回复道：&lt;br /&gt;
“是的，你画十块钱也能让别人做 PPT,&lt;br /&gt;
但是只有一百万才能买得到我们的 SWOT 分析。”&lt;/p&gt;

&lt;p&gt;听了这个精彩回答，&lt;br /&gt;
会议场上顿时响起了经久不绝的热烈掌声。&lt;br /&gt;
最后A公司的人照着 SWOT 分析的建议严格地去做了，&lt;br /&gt;
果然药到病除，&lt;br /&gt;
公司又回到了飞速增长的道路上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;:)&lt;/p&gt;

&lt;p&gt;故事里可能扯皮的有点多，&lt;br /&gt;
但是我们可以大概了解到：&lt;br /&gt;
这种商业分析更多是用一定的姿势，&lt;br /&gt;
从多个角度去看问题，&lt;br /&gt;
最终提供了一个范用的方法论。&lt;br /&gt;
假如真的像故事里&lt;code&gt;严格地去做&lt;/code&gt;这么有行动力的话，&lt;br /&gt;
那肯定是有正面的效果的。&lt;/p&gt;

&lt;h2 id=&#34;bcg-matrix&#34;&gt;BCG-matrix&lt;/h2&gt;

&lt;p&gt;那么类似的，&lt;br /&gt;
*现金牛*这个词其实是出自另外一套分析方法。&lt;/p&gt;

&lt;p&gt;产品经理小刘预设了大家都跟他有一样丰富的人生经验，&lt;br /&gt;
上来就丢了这么一张图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/bcg/base.jpg&#34; alt=&#34;base&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;当然实际上他放的图更加专业，&lt;br /&gt;
这图是作者随便翻译和随便画的&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;大家有点懵逼，&lt;br /&gt;
然后快速地指出了图里有个错别字。&lt;/p&gt;

&lt;p&gt;小刘没有办法，&lt;br /&gt;
只能给大家说了些洋文，&lt;br /&gt;
举了个栗子：&lt;/p&gt;

&lt;p&gt;首先，你现在是一家跨国大型公司的老总。&lt;br /&gt;
你手下有二十万个员工，两百个厂房，五十多条产品线。&lt;br /&gt;
每月的十号都是发薪日，&lt;br /&gt;
作为一个不拖欠工资，&lt;br /&gt;
遵守劳动法，&lt;br /&gt;
有良心的资本家，&lt;br /&gt;
你发现每月九号账上还很多的现金，&lt;br /&gt;
十号就所剩无几了。&lt;br /&gt;
而且你的利润率还比隔壁黑心企业低很多。&lt;/p&gt;

&lt;p&gt;于是你看着上文提及的五十多条产品线，开始思考：&lt;br /&gt;
&lt;strong&gt;哪些产品赚钱？哪些产品可以下线？哪些产品有增长空间？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为你在交大读过 MBA ,&lt;br /&gt;
 SWOT 的故事你也听过，&lt;br /&gt;
觉得那个是针对公司策略，&lt;br /&gt;
或者单个产品的。&lt;br /&gt;
你不想画五千多万做 SWOT 分析，&lt;br /&gt;
于是你请来了&lt;del&gt;圣地亚哥&lt;/del&gt;波士顿咨询公司的人。&lt;/p&gt;

&lt;p&gt;这群人依据老祖宗的&lt;code&gt;奇变偶不变符号看象限&lt;/code&gt;的道理，&lt;br /&gt;
一边画图一边说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To analyze the business, we should plot&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你打断了他们的施法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chinese please, excuse my bad English&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是他们用中文介绍了起来：&lt;/p&gt;

&lt;p&gt;老总啊，贵司的问题很大一部分是现金流不明确啊。&lt;br /&gt;
这样子，我们画个图，&lt;br /&gt;
横轴呢，从左到右是 ** 挣钱多 &amp;gt; 挣钱少 **&lt;br /&gt;
纵轴呢，从下到上是 ** 花钱少 &amp;gt; 花钱多 **&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/bcg/en.jpg&#34; alt=&#34;en&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是从现金这个角度，&lt;br /&gt;
根据这两个维度，&lt;br /&gt;
四个区域我们来看看贵司的产品们。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;左上角的&lt;strong&gt;Stars 明星产品&lt;/strong&gt;。&lt;br /&gt;
这种产品挣的钱多，花的也多！&lt;br /&gt;
比如你们天天在电视上做广告的那个，&lt;br /&gt;
虽然卖得好，但是天价广告费。&lt;br /&gt;
别人认识贵司都是从这些产品开始，&lt;br /&gt;
可要保持。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;左下角的&lt;strong&gt;Cash Cows 现金牛&lt;/strong&gt;。&lt;br /&gt;
没错，这种就是花的少、挣的多的产品。&lt;br /&gt;
它们给贵司带来了长足的收入啊！&lt;br /&gt;
就跟牛一样，吃进去的是草，挤出来的是奶！&lt;br /&gt;
非常好！多关照！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;右下角的&lt;strong&gt;Dogs 老狗&lt;/strong&gt;。&lt;br /&gt;
别看他们现在挣得少，花的少，没啥存在感，&lt;br /&gt;
但他们一般是贵司的现金牛转换过来的，&lt;br /&gt;
比如贵司的那个老牌数码相机，&lt;br /&gt;
以前很赚钱的，但是最近居然被智能手机给干下去了。&lt;br /&gt;
这些产品有情怀就维持一下吧。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;右上角的&lt;strong&gt;Question Marks 问题少年&lt;/strong&gt;。&lt;br /&gt;
这个，挣得少还花的多，&lt;br /&gt;
我们还真不好预测。&lt;br /&gt;
比如某巨头，&lt;br /&gt;
之前连续十年亏损也一样头变大了。&lt;br /&gt;
这些产品很有可能会变成你的明星产品，&lt;br /&gt;
乃至现金牛。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;老总觉得这很科学。&lt;br /&gt;
后来波士顿咨询公司回去总结了一下，&lt;br /&gt;
这个套路就慢慢变成了一种范用的分析方式了，&lt;br /&gt;
大家叫它 &lt;a href=&#34;https://en.wikipedia.org/wiki/Growth%E2%80%93share_matrix&#34;&gt;BCG-matrix (波士顿咨询公司矩阵)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;

&lt;p&gt;因为此文偏向讲梗，&lt;br /&gt;
所以很多地方夹杂魔改过的私货。&lt;br /&gt;
正统的横轴是 Relative market share,&lt;br /&gt;
纵轴是 Market growth rate，&lt;br /&gt;
Question Marks 和 Dogs 的翻译也是我随便翻的…&lt;br /&gt;
想了解更精确的内容请&lt;a href=&#34;https://en.wikipedia.org/wiki/Growth%E2%80%93share_matrix&#34;&gt;自行查阅维基&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序员的二八定律</title>
      <link>https://liriansu.com/posts/2017-07-25-pareto-rule-of-programmers/</link>
      <pubDate>Tue, 25 Jul 2017 23:15:51 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-25-pareto-rule-of-programmers/</guid>
      <description>&lt;p&gt;二八定律 (Pareto Principle),&lt;br /&gt;
泛指在各种事情中，&lt;br /&gt;
80%的结果是由20%的原因决定的，&lt;br /&gt;
这个定律一般用来定性而不是定量。&lt;/p&gt;

&lt;p&gt;很有趣的是，&lt;br /&gt;
程序员们就很吃这个定律。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;20%的程序员写出了80%的代码。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;20%的程序员写出了80%的Bug。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的代码出的Bug只占20%。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;也就是说有80%的Bug，是出在20%的代码里面。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为了修复这20%的代码，程序员花掉了80%的时间。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所以有80%的程序员，每天写代码的时间不到20%。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的程序员都有自己偏好的编程语言，但只有20%的程序员会去辩论&lt;em&gt;什么是世界上最好的编程语言&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的纷争都是这20%的程序员搞起来的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的编程语言都是20%的程序员搞起来的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一门编程语言里，只有20%的功能会被经常用到。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但是面试题目范围在另外80%里面。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如不点名地去黑一门语言，那不管你黑的是哪个点，有80%的用户都会觉得自己喜欢的语言被黑了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所以程序员们一般去黑剩下的那20%的编程语言。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的程序员都在面向对象编程，但是只有20%的程序员有对象（此数据有偏差）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的程序员都知道小黄鸭编程法，但是只有20%的程序员有小黄鸭。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的小黄鸭都被程序员抓起来了，此处应 @小黄鸭保护协会&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;80%的需求可以在20%的时间里面实现。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;剩下20%的需求要花80%的时间去研究，20%的时间去实现，80%的时间去测试。（没错总共是200%的时间）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不还技术债的话，80%的时间连20%的需求都做不完…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;坚持还技术债、不断学习、提升自我的话，那就是&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;10 percent luck&lt;/p&gt;

&lt;p&gt;20 percent skill&lt;/p&gt;

&lt;p&gt;15 percent concentrated power of will.&lt;/p&gt;

&lt;p&gt;5 percent pleasure&lt;/p&gt;

&lt;p&gt;50 percent pain&lt;/p&gt;

&lt;p&gt;and 100 percent reason&lt;br /&gt;
to remember the name&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>GitHub 要怎么玩</title>
      <link>https://liriansu.com/posts/2017-07-18-how-i-use-github/</link>
      <pubDate>Tue, 18 Jul 2017 23:15:49 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-18-how-i-use-github/</guid>
      <description>&lt;p&gt;经常会听到其它程序员说：&lt;/p&gt;

&lt;p&gt;哎呀，又在 GitHub 上发现了个好玩的项目。&lt;/p&gt;

&lt;p&gt;那么问题来了，&lt;br /&gt;
他们怎么发现的呢？&lt;/p&gt;

&lt;h2 id=&#34;github-是什么&#34;&gt;GitHub 是什么&lt;/h2&gt;

&lt;p&gt;知乎上有个万赞答案写的很好，&lt;br /&gt;
叫 &lt;a href=&#34;https://www.zhihu.com/question/20070065/answer/79557687&#34;&gt;怎样使用 GitHub ? - 珊姗的回答&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过里面的图有点过时，&lt;br /&gt;
新版的 GitHub 大概是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/github/mine_panel.jpg&#34; alt=&#34;user-page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;学术地说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub 是一个通过 Git 进行版本控制的软件源代码托管服务，&lt;br /&gt;
它是世界上最大的代码存放网站和开源社区。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单的来说：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub 是程序员放程序的地方。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里说的&lt;code&gt;放&lt;/code&gt;不仅指存放、放置，&lt;br /&gt;
还有放开、共享的意思。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/NARKOZ/hacker-scripts&#34;&gt;普通程序员会把自己业余写的一些工具放到 GitHub 上去&lt;/a&gt;，&lt;br /&gt;
&lt;a href=&#34;https://github.com/fouber/blog/issues/1&#34;&gt;文艺程序员会把 GitHub 当做写博客的地方&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://shell909090.org/blog/archives/2792/&#34;&gt;2B程序员会把公司的商业代码上传到 GitHub 上去&amp;hellip;&lt;/a&gt;。。。&lt;/p&gt;

&lt;h2 id=&#34;github-有什么好玩的&#34;&gt;GitHub 有什么好玩的&lt;/h2&gt;

&lt;p&gt;那既然 GitHub 是程序员放程序的地方，&lt;br /&gt;
听起来这么严肃，&lt;br /&gt;
它怎么可能跟好玩沾上边？&lt;/p&gt;

&lt;p&gt;这个问题问得很好。&lt;br /&gt;
在我眼里，&lt;br /&gt;
所有程序员都是可爱的动物，&lt;br /&gt;
有一个词叫&lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/&#34;&gt;Programming Humor&lt;/a&gt;，&lt;br /&gt;
翻译成中文大概是*代码之趣*。&lt;br /&gt;
比如&lt;a href=&#34;https://xkcd.com&#34;&gt;我很喜欢的XKCD系列漫画&lt;/a&gt;，&lt;br /&gt;
就有很多关于代码的好玩的梗：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/random_number.png&#34; alt=&#34;xkcd221&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（我凭本事丢骰子丢的4，&lt;br /&gt;
你为什么说这个数字不够随机？）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/python.png&#34; alt=&#34;xkcd353&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（Python 大法好！）&lt;/p&gt;

&lt;p&gt;GitHub 上也有很多很好玩的东西。&lt;/p&gt;

&lt;p&gt;比如&lt;a href=&#34;https://github.com/mackyle/sqlite/blob/3cf493d4018042c70a4db733dd38f96896cd825f/src/os.h#L52-L62&#34;&gt;etilqs的梗&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有个小型数据库软件叫 SQLite ，&lt;br /&gt;
它非常好用。&lt;/p&gt;

&lt;p&gt;于是知名杀毒软件 McAfee 就用了这个数据库，&lt;br /&gt;
McAfee 还以 sqlite_ 当文件名丢了很多文件在C盘放着。&lt;/p&gt;

&lt;p&gt;不懂计算机的用户们，装上 McAfee 以后发现，&lt;br /&gt;
C盘多了好多奇怪的文件。&lt;/p&gt;

&lt;p&gt;于是他们有些人 Google 到了 sqlite 的研发工程师的电话，&lt;br /&gt;
半夜打电话去吵醒工程师，&lt;br /&gt;
问C盘里多出来的这些文件是干啥的……&lt;/p&gt;

&lt;p&gt;后来 sqlite 就决定把临时文件的名字改成 etilqs。&lt;/p&gt;

&lt;p&gt;假如有人能分别得出这个词，&lt;br /&gt;
是 sqlite 反过来写。&lt;br /&gt;
那以他的智商，&lt;br /&gt;
也不至于半夜打电话叫醒 sqlite 的研发工程师了……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如前阵子，&lt;br /&gt;
好几家公司有新闻的时候，&lt;br /&gt;
就有个&lt;a href=&#34;https://github.com/shengxinjing/programmer-job-blacklist&#34;&gt;programming-job-blacklist&lt;/a&gt;的项目，&lt;br /&gt;
列了一堆程序员找工作的黑名单公司&lt;br /&gt;
（列表皆整理，请谨慎食用）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/gaoshi.jpg&#34; alt=&#34;gaoshi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然，&lt;br /&gt;
还有&lt;a href=&#34;https://github.com/avinassh/rockstar&#34;&gt;酷炫的“是男人就一年不断 Contribution”的刷 Contribution 的项目&lt;/a&gt;。&lt;br /&gt;
一分钟就可以让你变得绿油油的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/avinassh/rockstar/raw/master/images/greensgreensgreens.png&#34; alt=&#34;contribution&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;那-github-要怎么玩呢&#34;&gt;那 GitHub 要怎么玩呢？&lt;/h2&gt;

&lt;p&gt;正如鲁迅说过：&lt;br /&gt;
有人的地方就会有江湖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/not_said.jpg&#34; alt=&#34;no-i-didnt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作为一个以 &lt;a href=&#34;https://en.wikipedia.org/wiki/User-generated_content&#34;&gt;UGC&lt;/a&gt; 为主的网站，&lt;br /&gt;
我们当然是要关注更多的用户。&lt;/p&gt;

&lt;p&gt;我在 GitHub 上主要关注了三种用户（此分类不正交）：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一般意义上的大神，这些人粉着以示膜拜。&lt;br /&gt;
比如&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20346580&#34;&gt;从胖子变帅哥的Python程序员Kenneth Reitz&lt;/a&gt;，&lt;br /&gt;
经常可以看看他又被哪个组织拉进去了，&lt;br /&gt;
又给哪个项目贡献代码了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;项目作者、文章博主，这些人做的东西往往看着更好玩。&lt;br /&gt;
比如&lt;a href=&#34;https://github.com/Ovilia&#34;&gt;羡辙学姐&lt;/a&gt;，&lt;br /&gt;
占着一个巨好的 GitHub ID 不说，&lt;br /&gt;
我对前端的不少了解都是羡辙和&lt;a href=&#34;https://github.com/yyx990803&#34;&gt;尤大&lt;/a&gt;的feed刷出来的。&lt;br /&gt;
比如&lt;a href=&#34;https://github.com/haoel&#34;&gt;皓哥&lt;/a&gt;，&lt;br /&gt;
虽然他目前好像忙着搞事，&lt;br /&gt;
不过毕竟是一直奋斗在写代码一线的我辈楷模。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我喜欢的身边的朋友，平时有更多可能性交流技术。&lt;br /&gt;
比如有&lt;a href=&#34;https://github.com/ldsink&#34;&gt;基友ldsink&lt;/a&gt;，&lt;br /&gt;
toolbox的一些脚本非常好用。&lt;br /&gt;
比如有&lt;a href=&#34;https://github.com/hczhcz&#34;&gt;交大魔法师hcz&lt;/a&gt;，&lt;br /&gt;
很多好玩的项目都是他给我的timeline刷出来的。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以总结一下。&lt;/p&gt;

&lt;p&gt;GitHub 就是这么一个本来是放程序，&lt;br /&gt;
但是被玩成了同性交友的社交网站…&lt;/p&gt;

&lt;p&gt;（嗯，本文以一个讲梗的角度讲了下 GitHub ）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>那当然是选择原谅她是什么梗</title>
      <link>https://liriansu.com/posts/2017-07-02-forgive-her-meme/</link>
      <pubDate>Sun, 02 Jul 2017 23:05:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-02-forgive-her-meme/</guid>
      <description>&lt;p&gt;“她做了对不起我的事情，该怎么办？”&lt;br /&gt;
“那当然是选择原谅她啦！”&lt;/p&gt;

&lt;h2 id=&#34;绿帽子&#34;&gt;绿帽子&lt;/h2&gt;

&lt;p&gt;绿帽子这个词好像流传已久了。&lt;/p&gt;

&lt;p&gt;有说是春秋时期，&lt;br /&gt;
卖淫为生的人的家人要头裹绿巾，&lt;br /&gt;
以分贵贱。&lt;/p&gt;

&lt;p&gt;还有个比较逗的说法是，&lt;br /&gt;
古代有个已婚女士搞外遇，&lt;br /&gt;
每次早上丈夫出门，&lt;br /&gt;
她都给丈夫戴上一顶绿帽子，&lt;br /&gt;
以此作为明显的暗号。&lt;/p&gt;

&lt;p&gt;总而言之，&lt;br /&gt;
不论如何，&lt;br /&gt;
这个偏侮辱性的词语就流传了下来。&lt;/p&gt;

&lt;p&gt;不过最近的一个梗把这个侮辱性给弱化了…&lt;/p&gt;

&lt;h2 id=&#34;那当然是选择原谅她&#34;&gt;那当然是选择原谅她&lt;/h2&gt;

&lt;p&gt;这个&lt;a href=&#34;https://zh.moegirl.org/zh-hans/%E5%BD%93%E7%84%B6%E6%98%AF%E9%80%89%E6%8B%A9%E5%8E%9F%E8%B0%85%E5%A5%B9&#34;&gt;短句的出处也是不一的&lt;/a&gt;，&lt;br /&gt;
有说是&lt;a href=&#34;https://www.douyu.com/pis&#34;&gt;卜同学&lt;/a&gt;，&lt;br /&gt;
也有说是白同学…&lt;/p&gt;

&lt;p&gt;不过事实就是最近的表情包的确为它的热度推波助澜了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/of_course.jpg&#34; alt=&#34;of-course&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/be_strong.jpg&#34; alt=&#34;be-strong&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/enough.jpg&#34; alt=&#34;enough&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来逐渐发展出了原谅帽系列表情：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/hat.jpg&#34; alt=&#34;hat&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/take_my_hat.jpg&#34; alt=&#34;take-my-hat&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/hat_pa.jpg&#34; alt=&#34;hat-pa&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/hat_papapa.jpg&#34; alt=&#34;hat-papapa&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/hat_ulti_pa.jpg&#34; alt=&#34;hat-ulti-pa&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/hat_fight.jpg&#34; alt=&#34;hat-fight&#34; /&gt;&lt;/p&gt;

&lt;p&gt;还有人做了原谅帽的游戏…&lt;br /&gt;
&lt;a href=&#34;https://green.ssyar.com/&#34;&gt;green.ssyar.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/forgive/hat_game.jpg&#34; alt=&#34;hat-game&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然，&lt;br /&gt;
这个梗火了以后就会有对应的讨论：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/58602662&#34;&gt;知乎：“当然是选择原谅她啊”系列表情图是不是歧视女性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/58756792&#34;&gt;知乎：“当然是选择原谅她啊”系列表情图是不是歧视男性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;不过这个表情包真的很好玩啊，&lt;br /&gt;
每次我们谁写了个bug，&lt;br /&gt;
多了个需求，&lt;br /&gt;
就一下子想到了原谅帽了…&lt;/p&gt;

&lt;h2 id=&#34;saint-patrick-s-day&#34;&gt;Saint Patrick&amp;rsquo;s Day&lt;/h2&gt;

&lt;p&gt;爱尔兰有个节日叫&lt;a href=&#34;https://en.wikipedia.org/wiki/Saint_Patrick%27s_Day&#34;&gt;Saint Patrick&amp;rsquo;s Day&lt;/a&gt;，&lt;br /&gt;
大概讲的就是很久很久以前，&lt;br /&gt;
有个厉害的人到爱尔兰，&lt;br /&gt;
向大家传播了基督教感化了大家…&lt;/p&gt;

&lt;p&gt;于是在那一天，&lt;br /&gt;
大家都会穿上爱尔兰国旗颜色（绿色）的衣物、袜子、帽子，&lt;br /&gt;
聚在一起，&lt;br /&gt;
喝酒…&lt;/p&gt;

&lt;p&gt;就像中国人，&lt;br /&gt;
不论什么节都会过成情人节一样。&lt;br /&gt;
外国很多节，&lt;br /&gt;
最终都会变成喝酒的节…&lt;/p&gt;

&lt;p&gt;那这该怎么办呢？&lt;br /&gt;
当然是选择原谅她啦~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写程序的我的性格</title>
      <link>https://liriansu.com/posts/2017-07-01-my-programmer-habits/</link>
      <pubDate>Sun, 02 Jul 2017 00:20:23 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-07-01-my-programmer-habits/</guid>
      <description>&lt;p&gt;写程序真开心啊。&lt;/p&gt;

&lt;p&gt;前阵子面试频繁的时候，&lt;br /&gt;
有一个工作了七八年的兄弟在简历上写，&lt;br /&gt;
自己大学学的是Java，&lt;br /&gt;
工作以后做的是全栈，&lt;br /&gt;
所以有十多年的Java开发经验，&lt;br /&gt;
七八年的前端开发经验，&lt;br /&gt;
还有若干年的Blabla&amp;hellip;&lt;/p&gt;

&lt;p&gt;当时周丞和我就很无奈，&lt;br /&gt;
假如工作经验真的是这么算的话。&lt;br /&gt;
那中学时期就开始参加OI的同学，&lt;br /&gt;
岂不是都是十年软件开发经验起步了？&lt;/p&gt;

&lt;h2 id=&#34;经验&#34;&gt;经验&lt;/h2&gt;

&lt;p&gt;我一直觉得软件开发的，&lt;br /&gt;
或者说程序员的，&lt;br /&gt;
“工作经验”是一件很扯的事情。&lt;br /&gt;
因为假如程序员停止了学习、思考与进步，&lt;br /&gt;
那么一个有十年工作经验的人，&lt;br /&gt;
只不过是工作的第一年学习了一年的工作经验，&lt;br /&gt;
然后又重复了九年。&lt;br /&gt;
真正的十年工作经验，&lt;br /&gt;
应该是那些“苟日新，日日新，又日新。”的人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有一句俗话叫&lt;br /&gt;
朝闻道，夕死可矣。&lt;/p&gt;

&lt;p&gt;这句话的意思就是一个人早上听到了一个很科学的道理，&lt;br /&gt;
想了一天，&lt;br /&gt;
到了傍晚终于发出了“死可矣”(すごい)的感慨之声。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，&lt;br /&gt;
人的一生不可能每天都在学习崭新的姿势，&lt;br /&gt;
就算某一天了解到了新的知识，&lt;br /&gt;
也不一定能够消化吸收，&lt;br /&gt;
说不定隔夜就忘了。&lt;/p&gt;

&lt;p&gt;不过我们人类这种生命，&lt;br /&gt;
正是所有过去的积淀。&lt;br /&gt;
我们读的书、&lt;br /&gt;
吃的饭、&lt;br /&gt;
做的事情都会消失，&lt;br /&gt;
但是我们的生命会越来越厚重。&lt;/p&gt;

&lt;p&gt;举个栗子，&lt;br /&gt;
我是记不得我写过的每一行代码的，&lt;br /&gt;
但是我能清晰地感觉到，&lt;br /&gt;
我身上有些特质，&lt;br /&gt;
和写程序有着一定的羁绊。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;懒&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;科学&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;试试看&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;问个问题&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;懒&#34;&gt;懒&lt;/h2&gt;

&lt;p&gt;Quora上有个问题是&lt;br /&gt;
&lt;a href=&#34;https://www.quora.com/Do-intelligent-lazy-people-achieve-more-in-life-than-intelligent-active-people&#34;&gt;聪明人里面，懒人是不是比勤奋的人贡献更大？&lt;/a&gt;&lt;br /&gt;
有个回答我非常喜欢：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I divide my officers into four classes; the clever, the lazy, the industrious, and the stupid. Each officer possesses at least two of these qualities. Those who are clever and industrious are fitted for the highest staff appointments. Use can be made of those who are stupid and lazy. The man who is clever and lazy however is for the very highest command; he has the temperament and nerves to deal with all situations. But whoever is stupid and industrious is a menace and must be removed immediately!”&lt;br /&gt;
— General Kurt von Hammerstein-Equord&lt;/p&gt;

&lt;p&gt;在我眼里，我的下属们一共占了四种属性：&lt;br /&gt;
聪明的、懒的、勤奋的、蠢的。&lt;br /&gt;
他们每一个人都占了两种属性以上。&lt;/p&gt;

&lt;p&gt;那些既聪明又勤奋的人会做最重要的事情，&lt;br /&gt;
同样地，那些又蠢又懒的人也只会做最不重要的事情。&lt;br /&gt;
一个聪明的懒人也可以做很重要的事情，他有能力去处理各种事态。&lt;br /&gt;
假如一个人不仅蠢，生产力还巨高，那得马上开掉他！&lt;br /&gt;
by 一个可能有名的将军&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我部分赞同这个答案，&lt;br /&gt;
因为我不仅自认为是一个聪明的懒人，&lt;br /&gt;
我还认为大部分好的程序员都是聪明的懒人。&lt;/p&gt;

&lt;p&gt;程序员很喜欢干的一件事情就是“自动化”。&lt;br /&gt;
GitHub之前有个&lt;a href=&#34;https://github.com/NARKOZ/hacker-scripts&#34;&gt;很火的Repo (NARKOZ/hacker-scripts)&lt;/a&gt;，&lt;br /&gt;
讲的是有个程序员离职以后，&lt;br /&gt;
其他同事在整理他写的程序。&lt;br /&gt;
发现他不仅写了一个自动泡咖啡的程序，&lt;br /&gt;
还写了一个“假如晚上九点电脑还开着，就随机编一个理由，给老婆发短信说会晚回家…”&lt;/p&gt;

&lt;p&gt;所以我想说的懒，&lt;br /&gt;
其实是“程序员式的懒”：&lt;br /&gt;
不是不想干活，&lt;br /&gt;
而是不想干重复性的工作；&lt;br /&gt;
相比于简单但重复的解决办法，&lt;br /&gt;
更愿意选择工作量大但一劳永逸的办法。&lt;/p&gt;

&lt;p&gt;毕竟聪明人支起世界，&lt;br /&gt;
懒人改变世界嘛。&lt;/p&gt;

&lt;h2 id=&#34;科学&#34;&gt;科学&lt;/h2&gt;

&lt;p&gt;我有两个口头禅，&lt;br /&gt;
一个是“这很科学”，&lt;br /&gt;
一个是“这不科学”。&lt;/p&gt;

&lt;p&gt;一方面，&lt;br /&gt;
我认为“万物都有自己的规律”，&lt;br /&gt;
“物理世界存在大一统定律”，&lt;br /&gt;
“事出反常必有妖”，&lt;br /&gt;
“程序不会自己出bug，都是人写的”，&lt;br /&gt;
“多用git blame我们就能找到那个人了”。&lt;/p&gt;

&lt;p&gt;另一方面，&lt;br /&gt;
我也认为“人类是愚蠢的，是短视的”，&lt;br /&gt;
“所以很多规律人类都没发现，比如关于人类自己的”，&lt;br /&gt;
“像老师、HR、销售等，跟人打交道的，都是厉害的”，&lt;br /&gt;
“更别提艺术那种，一千个人就有一千个freestyle的学科了”。&lt;/p&gt;

&lt;p&gt;比如程序员修bug，&lt;br /&gt;
首先第一步要做的就是问一句：&lt;br /&gt;
“能重现吗？怎么重现？”&lt;br /&gt;
假如一个bug不能重现，&lt;br /&gt;
我们就会说：&lt;br /&gt;
“我这咋是好的，重现不了，不修了。”&lt;br /&gt;
假如一个bug不能重现，&lt;br /&gt;
但是它很严重，&lt;br /&gt;
必须要修复，&lt;br /&gt;
我们就会感慨：&lt;br /&gt;
“卧槽，这不科学啊…”&lt;/p&gt;

&lt;h2 id=&#34;试试看&#34;&gt;试试看&lt;/h2&gt;

&lt;p&gt;直到目前为止，&lt;br /&gt;
程序都是为人服务的。&lt;br /&gt;
人是活在现实生活中的，&lt;br /&gt;
所以实践证明一切。&lt;/p&gt;

&lt;p&gt;假如两个程序员battle，&lt;br /&gt;
基本上一句话可以终结：&lt;br /&gt;
&lt;code&gt;Talk is cheap, show me the code&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因为万事万物都是有规律的，&lt;br /&gt;
一定的条件下，&lt;br /&gt;
试一次就可以学到了。&lt;br /&gt;
比如压缩食物怎么样？试一试呗。&lt;br /&gt;
创业公司是什么样子？试一试呗。&lt;br /&gt;
Kotlin和Java有什么不同？试一试呗。&lt;/p&gt;

&lt;p&gt;就像诸葛亮用标记重捕法发现南蛮之地盛产孟获一样，&lt;br /&gt;
程序员也经常会用控制变量法来尝试。&lt;br /&gt;
比如之前说的重现一个bug，&lt;br /&gt;
试试ios，试试安卓，&lt;br /&gt;
试试win xp，试试有360的电脑。&lt;br /&gt;
世界这么大，&lt;br /&gt;
我们总会再见的。&lt;/p&gt;

&lt;h2 id=&#34;问个问题&#34;&gt;问个问题&lt;/h2&gt;

&lt;p&gt;小时候看过一个比喻，&lt;br /&gt;
说人的知识是一个圆，&lt;br /&gt;
知道的是面积，&lt;br /&gt;
不知道的是周长。&lt;br /&gt;
（翻译成鸡汤就是“你知道的越多，你不知道的也越多”）&lt;br /&gt;
果然鸡汤披上了科学的外衣，&lt;br /&gt;
就额外迷人呢…&lt;/p&gt;

&lt;p&gt;写程序做技术也是一样，&lt;br /&gt;
学到了更多的知识以后，&lt;br /&gt;
觉得未知的世界更大了。&lt;/p&gt;

&lt;p&gt;大四的时候第一次实习，&lt;br /&gt;
那之前只是把git理解为一个ftp一样的放文件的工具，&lt;br /&gt;
VIM更是从没用过，&lt;br /&gt;
所以我心中的问题那是多的一比。&lt;/p&gt;

&lt;p&gt;我实习的公司QAD给每个员工会安排一个Mentor，&lt;br /&gt;
可以类比于“老师傅带徒弟”的模式。&lt;br /&gt;
第一天入职的时候我找到自己座位坐了下来，&lt;br /&gt;
发现离我最近的同事叫Justin，&lt;br /&gt;
于是问他：“你是我的Mentor吗？”&lt;br /&gt;
(那时刻有种Saber问士郎的蜜汁即视感…)&lt;br /&gt;
他笑了笑说：“我也不知道啊”&lt;br /&gt;
最后发现其实他知道自己是我的Mentor -.-&lt;/p&gt;

&lt;p&gt;一开始我经常会问他git怎么操作，&lt;br /&gt;
比如说John往dev分支提交了最新代码，&lt;br /&gt;
我想用他的一个函数咋办。&lt;br /&gt;
他就会站到我身后，&lt;br /&gt;
一个字母一个字母把命令说出来，&lt;br /&gt;
然后让我敲一遍：&lt;br /&gt;
“打开Putty，git，G I T，空格，rebase，R E B A S E&amp;hellip;”&lt;br /&gt;
因为有种自己被当成智障的感觉，&lt;br /&gt;
所以我压力山大地操作完了以后，&lt;br /&gt;
又上网查了一遍我刚才做的操作是什么意思…&lt;br /&gt;
这样来回几遍以后，&lt;br /&gt;
我发现自己收获很大啊，&lt;br /&gt;
之后git相关问的就越来越少了。&lt;/p&gt;

&lt;p&gt;所以直到现在，&lt;br /&gt;
我还是很愿意当一个智障的好奇宝宝。&lt;br /&gt;
先看，再问，后想，&lt;br /&gt;
只要问到了，就是学到了。&lt;br /&gt;
每个人都有自己独到的厉害之处，&lt;br /&gt;
这个道理就跟老祖宗苏轼说的一样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;吾上可陪玉皇大帝，&lt;br /&gt;
下可以陪卑田院乞儿，&lt;br /&gt;
眼前见天下无一不好人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;苏轼写文章的能发这样的豪迈感慨，&lt;br /&gt;
我写程序那也可以一样豪迈呀 :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写程序与取名字</title>
      <link>https://liriansu.com/posts/2017-06-24-naming-variable/</link>
      <pubDate>Sat, 24 Jun 2017 19:36:17 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-06-24-naming-variable/</guid>
      <description>&lt;p&gt;据说平均下来，&lt;br /&gt;
程序员会有10%的时间花在取名字上。&lt;/p&gt;

&lt;p&gt;今天和俊儒聊天的时候，&lt;br /&gt;
讲到了在知乎上看的，&lt;br /&gt;
《扩散性百万亚瑟王》为什么停运的原因：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/ma_dead_reason.jpg&#34; alt=&#34;ma&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这种等级的中二程序员的确可以留名青史了…&lt;br /&gt;
大型程序一般都是团伙作案，&lt;br /&gt;
所以“写出逻辑清晰、见文知意”的程序，&lt;br /&gt;
也是一个程序员的必备技能。&lt;/p&gt;

&lt;p&gt;按照正常文章的套路走，&lt;br /&gt;
这里我们要介绍一下，&lt;br /&gt;
绝大多数的计算机词语是有唯一的中英对照的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;服务器 - Server
表 - Table
事务 - Transaction
等等&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;像这类词语一般来说都没啥异议。&lt;br /&gt;
写程序的时候就直白地写就行了。&lt;br /&gt;
不过有的时候程序员要写富含需求的代码，&lt;br /&gt;
就可以玩一玩了。&lt;/p&gt;

&lt;h1 id=&#34;代码片段&#34;&gt;代码片段&lt;/h1&gt;

&lt;p&gt;之前有一段代码，&lt;br /&gt;
要实现软文、软广相关的功能。&lt;br /&gt;
于是取变量名时，&lt;br /&gt;
翔神一拍大腿：&lt;br /&gt;
那就是&lt;code&gt;advertorial&lt;/code&gt;这个词了！&lt;br /&gt;
这个词非常准确，&lt;br /&gt;
就是软文的意思。&lt;br /&gt;
吃瓜群众纷纷表示真牛逼！&lt;/p&gt;

&lt;p&gt;然后代码写好了，&lt;br /&gt;
到浏览器里跑一下：&lt;br /&gt;
结果后端接口调用挂了…&lt;br /&gt;
定睛一看，&lt;br /&gt;
原来是浏览器的防广告插件自动识别了advertorial这个词，&lt;br /&gt;
把我们的接口屏蔽了…&lt;br /&gt;
&amp;hellip;&lt;br /&gt;
于是后来数据库里，&lt;br /&gt;
软文还是&lt;code&gt;advertorial&lt;/code&gt;，&lt;br /&gt;
但是url里，&lt;br /&gt;
软文变成了&lt;code&gt;soft_article&lt;/code&gt;…&lt;br /&gt;
吃瓜群众纷纷表示更牛逼了…&lt;/p&gt;

&lt;p&gt;还有一段代码，&lt;br /&gt;
要实现一个大礼包相关的功能。&lt;br /&gt;
类似于星巴克88元的礼品卡，&lt;br /&gt;
送券送积分送储值等等…&lt;br /&gt;
于是问题来了，&lt;br /&gt;
这个“大礼包”的抽象类应该叫什么名字呢？&lt;/p&gt;

&lt;p&gt;当时系统里面已有的一些英文对照有：&lt;br /&gt;
&lt;code&gt;积分奖 reward&lt;/code&gt;, &lt;code&gt;券 coupon&lt;/code&gt;, &lt;code&gt;礼品卡 gift_card&lt;/code&gt;等等……&lt;br /&gt;
感觉好的名字都用完了，&lt;br /&gt;
我们都停下了手里的键盘，&lt;br /&gt;
开始了头脑风暴…&lt;/p&gt;

&lt;p&gt;gift_bag感觉很蠢，&lt;br /&gt;
尤其是有了gift_card。&lt;/p&gt;

&lt;p&gt;这种奖励是一系列产品的叠加，&lt;br /&gt;
也可以叫production，&lt;br /&gt;
但是这会跟production environment有歧义。&lt;/p&gt;

&lt;p&gt;最终我们给这个东西取名叫：&lt;br /&gt;
&lt;code&gt;one_piece&lt;/code&gt;。&lt;br /&gt;
没错，OnePiece就是《海贼王》里面的海贼宝藏。&lt;/p&gt;

&lt;p&gt;给抽象类取一个无意义的名字，&lt;br /&gt;
反而影响深刻，没有歧义。&lt;br /&gt;
简直是解释一次，终生难忘…&lt;/p&gt;

&lt;h1 id=&#34;信达雅&#34;&gt;信达雅&lt;/h1&gt;

&lt;p&gt;其实写程序起名字，&lt;br /&gt;
很多时候随便起一个也很容易，&lt;br /&gt;
但是想追求一个信达雅的表达，&lt;br /&gt;
就需要仔细想想了。&lt;/p&gt;

&lt;p&gt;最近业余时间写麻将相关代码，&lt;br /&gt;
就感觉翻译真难…&lt;br /&gt;
像花色和大小还能用纸牌的&lt;code&gt;Suit&lt;/code&gt;和&lt;code&gt;Rank&lt;/code&gt;来对应，&lt;br /&gt;
但是一些番名我就比较懵逼了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;十三幺/国士无双&lt;/code&gt;，根据&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E4%B8%89%E5%B9%BA&#34;&gt;维基百科的说法是&lt;code&gt;ThirteenOrphans&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;那老头牌估计就是&lt;code&gt;OrphanTile&lt;/code&gt;了&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;九莲宝灯&lt;/code&gt;，有翻译说是&lt;code&gt;Nine Gates&lt;/code&gt;，这个我先信了…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;海底捞月&lt;/code&gt;，&lt;code&gt;杠上开花&lt;/code&gt;这些咋办…&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;:) 所以看来10%时间都花在取变量名上，&lt;br /&gt;
这个说法还是比较保守的呢。&lt;/p&gt;

&lt;p&gt;正如程序员经常说的&lt;br /&gt;
&lt;code&gt;Talk is cheap, show me the code&lt;/code&gt;，&lt;br /&gt;
有个有个很棒的翻译：&lt;br /&gt;
&lt;code&gt;废话少说，放码过来&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;还是要继续修炼啊。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的工作</title>
      <link>https://liriansu.com/posts/2017-06-11-my-work/</link>
      <pubDate>Sun, 11 Jun 2017 13:49:36 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-06-11-my-work/</guid>
      <description>&lt;p&gt;前两天和家里打电话，&lt;br /&gt;
聊到了工作上的事情，&lt;br /&gt;
我多讲了几句，&lt;br /&gt;
虽然爸妈听不懂，&lt;br /&gt;
但他们听的很开心。&lt;/p&gt;

&lt;p&gt;我一直是个粗糙的利己主义者，&lt;br /&gt;
有的时候会过量地我行我素。&lt;br /&gt;
难得有个机会思考一下，&lt;br /&gt;
就借此写点东西，&lt;br /&gt;
记录一下我现在的工作生活吧。&lt;/p&gt;

&lt;h2 id=&#34;再惠&#34;&gt;再惠&lt;/h2&gt;

&lt;p&gt;去年十月左右，&lt;br /&gt;
百姓网的HR PP找到了&lt;a href=&#34;https://github.com/LKI&#34;&gt;我的GitHub&lt;/a&gt;，&lt;br /&gt;
要了我的简历，&lt;br /&gt;
约我到百姓网面试。&lt;/p&gt;

&lt;p&gt;因为大学室友&lt;a href=&#34;https://ldsink.com/&#34;&gt;周丞&lt;/a&gt;之前就是在百姓干活的，&lt;br /&gt;
我就去问他百姓各方面怎么样。&lt;br /&gt;
他大概讲了一下他眼中的百姓，&lt;br /&gt;
然后问我是不是在找工作？&lt;br /&gt;
不如顺便发个简历来？&lt;br /&gt;
帮我内推一下？&lt;br /&gt;
我问他现在在哪工作，&lt;br /&gt;
他说在&lt;a href=&#34;https://www.kezaihui.com/#!/join&#34;&gt;再惠&lt;/a&gt;，是个创业公司。&lt;br /&gt;
我第一感觉再惠这个名字听起来不响亮，&lt;br /&gt;
于是上网搜了下，&lt;br /&gt;
结果除了融资的新闻和&lt;a href=&#34;https://www.kezaihui.com/#!/join&#34;&gt;官网&lt;/a&gt;，&lt;br /&gt;
没搜到任何有意义的信息，&lt;br /&gt;
连吐槽面试的贴子都没。&lt;br /&gt;
我又去知乎搜了一下再惠，&lt;br /&gt;
然后没搜到问题和回答，&lt;br /&gt;
只搜到两个人，&lt;br /&gt;
一个是&lt;a href=&#34;https://www.zhihu.com/people/zhao-yang-61-85/activities&#34;&gt;创始人之一赵洋&lt;/a&gt;，&lt;br /&gt;
另一个就是&lt;a href=&#34;https://www.zhihu.com/people/ldsink/activities&#34;&gt;周丞&lt;/a&gt;-_-&amp;hellip;&lt;br /&gt;
当时总有一种再惠不靠谱的感觉，&lt;br /&gt;
不过感觉周丞现在还是蛮开心的，&lt;br /&gt;
应该不像是在传销组织？&lt;br /&gt;
（毕竟看过很多被熟人带进传销组织的故事）&lt;/p&gt;

&lt;p&gt;结果没想到最后经过一番面试和抉择，&lt;br /&gt;
我还是加入了再惠这个传销组织 :)&lt;br /&gt;
（这句当然是玩笑话）&lt;/p&gt;

&lt;p&gt;我司①，也就是再惠，是做&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_as_a_service&#34;&gt;SaaS系统&lt;/a&gt;的。&lt;br /&gt;
呃，其实我也搞不太懂这个词，所以按目前的情况来说，&lt;br /&gt;
我们主要在做餐饮行业的会员系统解决方案的。&lt;br /&gt;
举个栗子。&lt;/p&gt;

&lt;p&gt;周末我和女朋友打算出门吃顿好的，&lt;br /&gt;
在&lt;strong&gt;大众点评&lt;/strong&gt;上看到了魔都有家网红餐厅&lt;strong&gt;暗恋桃花源&lt;/strong&gt;，&lt;br /&gt;
于是决定去吃这家店。&lt;br /&gt;
吃完饭以后买单，&lt;br /&gt;
服务员提示说扫码成为桃花源的微信会员可以享受满100减5的&lt;strong&gt;优惠&lt;/strong&gt;，&lt;br /&gt;
于是我很开心地扫了桌子上贴的二维码，&lt;br /&gt;
然后关注了桃花源的&lt;strong&gt;公众号&lt;/strong&gt;，&lt;br /&gt;
之后在公众号里用&lt;strong&gt;微信支付&lt;/strong&gt;买了单。&lt;br /&gt;
之后过了一周，&lt;br /&gt;
某一天突然桃花源的公众号给我发了张“桃花源常伴你身旁，下次消费可以全单九折”的优惠&lt;strong&gt;券&lt;/strong&gt;。&lt;br /&gt;
然而有钱的我不想为九折优惠跑一趟，不为所动。&lt;br /&gt;
再惠的会员系统就&lt;strong&gt;学习&lt;/strong&gt;到了原来小额优惠打动不了这个顾客。&lt;br /&gt;
又过了两周我突然收到了一张优惠&lt;strong&gt;力度更大&lt;/strong&gt;的八折优惠券…&lt;br /&gt;
因为这家店味道和风情都不错，&lt;br /&gt;
我最终又回去吃了一顿 :)&lt;/p&gt;

&lt;p&gt;没错，上面这段话里的粗体字，&lt;br /&gt;
除了&lt;strong&gt;大众点评&lt;/strong&gt;都是我司的业务内容~&lt;br /&gt;
大众点评做的更多的是拉新，拉流量，&lt;br /&gt;
我司做的更多的是留存，维持会员关系。&lt;/p&gt;

&lt;p&gt;比如我司有个经典客户案例，&lt;br /&gt;
商户叫&lt;strong&gt;玲珑宝宴&lt;/strong&gt;，&lt;br /&gt;
店是开在饿了么公司附近的某个角落里…&lt;br /&gt;
之前一直是流量一般，没有盈利的状况，&lt;br /&gt;
老板还想过关掉门店。&lt;br /&gt;
但后来用了我司产品以后，&lt;br /&gt;
效果拔群！&lt;br /&gt;
也许是各种优惠吸引了饿了么程序员吧…&lt;br /&gt;
后来饿了么的人来面试，&lt;br /&gt;
他们还很开心地说过：&lt;br /&gt;
“诶我知道再惠，我用过你们的产品…”&lt;/p&gt;

&lt;h2 id=&#34;过程和结果&#34;&gt;过程和结果&lt;/h2&gt;

&lt;p&gt;正如黑恶势力老大训斥小弟说的那句：&lt;br /&gt;
“蠢材，我们的事业是正义的！”一样，&lt;br /&gt;
很多时候体验都是独一无二，因人而异的。&lt;br /&gt;
我很喜欢目前的工作，&lt;br /&gt;
一个原因是因为做事的过程十分&lt;strong&gt;敏捷&lt;/strong&gt;。&lt;br /&gt;
没错就是那个Agility，&lt;br /&gt;
每一点敏捷增加1的攻速②。 :)&lt;/p&gt;

&lt;p&gt;前几个月我写过一个bug，&lt;br /&gt;
是给微信的一个接口，&lt;br /&gt;
文档上规定接口一定要返回success这七个小写字母。&lt;br /&gt;
但有的时候微信会给我们发文档上没提的错误消息，&lt;br /&gt;
我就想当然地回复了fail…&lt;br /&gt;
于是，&lt;br /&gt;
第一天写的代码，&lt;br /&gt;
第一天晚上发了新版本，&lt;br /&gt;
第二天我们的公众号全部报错不能用了&amp;hellip;&amp;hellip;&lt;br /&gt;
这就是&lt;strong&gt;敏捷&lt;/strong&gt;&amp;hellip;&lt;br /&gt;
（当然后来研究了一会就修好了）&lt;/p&gt;

&lt;p&gt;我们还有家商户叫&lt;strong&gt;雨树湾/胡姬兰&lt;/strong&gt;③。&lt;br /&gt;
他们有个需求，&lt;br /&gt;
就是点套餐会免费赠送一杯滴滴咖啡，&lt;br /&gt;
但是为了对账，&lt;br /&gt;
这杯咖啡在点菜机上的价格是一分钱。&lt;br /&gt;
于是会出现客人在公众号里买单时，&lt;br /&gt;
因为送了两倍滴滴咖啡，&lt;br /&gt;
结果要付100.02块钱的恶心情况…&lt;br /&gt;
当天上午知道这个情况以后，&lt;br /&gt;
我们迅速讨论研究了一下，&lt;br /&gt;
抉择以后写了段代码特殊处理0.01元的情况，&lt;br /&gt;
然后又发了个版本，&lt;br /&gt;
于是下午买单的客人就不用多付那几分钱了。&lt;br /&gt;
这也是&lt;strong&gt;敏捷&lt;/strong&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;除了&lt;strong&gt;敏捷&lt;/strong&gt;的做事过程，&lt;br /&gt;
还有一个很棒的是&lt;strong&gt;透明&lt;/strong&gt;的结果。&lt;br /&gt;
也就是说我们做的所有东西，&lt;br /&gt;
都会很快、很明显地反映出来。&lt;/p&gt;

&lt;p&gt;前阵子我们做&lt;a href=&#34;https://en.wikipedia.org/wiki/Growth_hacking&#34;&gt;Growing Hack&lt;/a&gt;的时候，&lt;br /&gt;
成立了一只诺曼底分队④。&lt;br /&gt;
他们的任务是到店 &lt;del&gt;公费吃喝&lt;/del&gt; 观察客人是怎么用我们产品的。&lt;br /&gt;
然后老板就会跟他们吐槽&lt;br /&gt;
POS机难用啊、&lt;br /&gt;
支付流程太麻烦啊、&lt;br /&gt;
客人不愿意加入会员啊、&lt;br /&gt;
POS机难用啊等问题。&lt;br /&gt;
这种时候小队队员们也只能苦笑着替大家背锅了&amp;hellip;&lt;/p&gt;

&lt;p&gt;还有一件很惊奇的事情，&lt;br /&gt;
就是我来面试的时候，&lt;br /&gt;
前端爸爸 同济大佬 靖哥哥⑤在面试过程中，&lt;br /&gt;
掏出了他的大电脑，&lt;br /&gt;
连上了数据库，&lt;br /&gt;
直接&lt;code&gt;SELECT COUNT&lt;/code&gt;了一下，&lt;br /&gt;
然后直接跟我展示数据库里我们多少条用户记录，多少条商户记录…&lt;br /&gt;
我就惊了，生产环境也能这么玩，感觉是好玩啊…&lt;/p&gt;

&lt;p&gt;既然过程到结果都是很愉快，&lt;br /&gt;
再加上写代码本来就很有趣这一点，&lt;br /&gt;
我的日常基本上就是：&lt;br /&gt;
开心地写代码、&lt;br /&gt;
开心地发版、&lt;br /&gt;
开心地吃饭、&lt;br /&gt;
紧张地修bug、&lt;br /&gt;
开心地发版……&lt;/p&gt;

&lt;h2 id=&#34;后端工程师&#34;&gt;后端工程师&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;现在的公司是再惠，技术团队不到20人，每个人都很强，我感觉自己是里面最菜的 :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正如我在&lt;a href=&#34;https://liriansu.com/about/&#34;&gt;个人介绍&lt;/a&gt;里说的一样，我们技术团队不到20人 ;)&lt;/p&gt;

&lt;p&gt;目前分工如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1个当CEO的（以前可以算1个技术，现在大概算是0.5个技术吧）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2个Windows端工程师（我们要Hack别人的点菜机）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2个Android端工程师（我们要写自己的商户端App）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6个后端工程师&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;其他都是前端工程师&amp;hellip;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我是六个后端之一。&lt;br /&gt;
后端的主要职责有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;实现业务API。比如上面讲到的支付流程，公众号看到漂亮的支付页面这部分属于前端，输密码支付然后扣钱给商户这部分就是后端。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;打理数据库。比如之前传出的&lt;a href=&#34;https://www.acfun.cn/a/ac3416677&#34;&gt;炉石数据丢失&lt;/a&gt;、&lt;a href=&#34;https://www.zhihu.com/question/21793037&#34;&gt;某酒店开房记录泄露&lt;/a&gt;这些都是后端的锅…&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;管理服务器。比如*这破网页怎么这么慢*一般也是后端的锅…&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;平常用的语言是Python，&lt;br /&gt;
这是门很简单的语言，&lt;br /&gt;
&lt;a href=&#34;https://github.com/LKI/teach-girlfriend-python&#34;&gt;当HR的女朋友也可以很快学会&lt;/a&gt;&lt;br /&gt;
（不过相对于写Python，显然她对看奇葩说兴趣更大…）&lt;/p&gt;

&lt;p&gt;不过好像我大部分时间都花在了Chrome上&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/pics/wakatime_dashboard.jpg&#34; alt=&#34;wakatime-dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;总的来说这些就是我的工作了，&lt;br /&gt;
希望个人的奋斗能赶上历史的进程吧。&lt;br /&gt;
一切安康。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;① 我司：就是我的公司的简称，好像是华为先用这个词，然后传播出去了，不是很正式的词。&lt;/p&gt;

&lt;p&gt;② 敏捷和攻速：是游戏里面的一个梗。很多游戏会分力量、敏捷、智力三种人物，游戏里的敏捷一般是名词。&lt;/p&gt;

&lt;p&gt;③ 雨树湾和胡姬兰：这家店做新加坡菜的，还蛮好吃。胡姬兰是新加坡的国花。他们店一开始叫雨树湾，后来改回胡姬兰了，更有辨识度。&lt;/p&gt;

&lt;p&gt;④ 诺曼底分队：取名自诺曼底登陆。我司取名一向富有风格，比如羊晨羊晓、神付、SoftArticle、OnePiece等&lt;del&gt;内部黑话&lt;/del&gt;…&lt;/p&gt;

&lt;p&gt;⑤ 前端爸爸：内部互膜文化盛行，类比于敬酒时两个人会争先放低杯位然后趴到地上，我们互相也会称呼XX爸爸、XX老板、XX老爷等…&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>我也看完了《人人都是产品经理2.0》</title>
      <link>https://liriansu.com/posts/2017-05-21-so-many-pm/</link>
      <pubDate>Sun, 21 May 2017 00:18:14 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-05-21-so-many-pm/</guid>
      <description>&lt;p&gt;最近把很有话题性的《人人都是产品经理》看完了，&lt;br /&gt;
看的是2.0版本，这大概是个读后感吧。&lt;/p&gt;

&lt;p&gt;这本书其实是入门级别的科普读物，&lt;br /&gt;
作者试图用简洁的语言、生动的例子和必要的术语来诠释产品经理（Product Manager）的日常。&lt;br /&gt;
因为书的定位不是教材，&lt;br /&gt;
所以指望看这本书能像看《算法导论》一样学到算法，&lt;br /&gt;
看《代码大全》一样学到代码之道是期待过高了。&lt;br /&gt;
不过这本书很多地方的视角还是很特别、很好玩的&lt;br /&gt;
:) 或者说有的时候从比较PM的角度来看问题的确会好玩一些。&lt;/p&gt;

&lt;p&gt;比如书里提到一句&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;只做一次的事情求可行解，反复做的事情求最优解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话就很科学。&lt;br /&gt;
因为写程序的时候也是这样的。&lt;br /&gt;
有些出现频次低的需求，&lt;br /&gt;
程序员就会写个脚本去做。&lt;br /&gt;
而假如这个需求老是出现，&lt;br /&gt;
那程序员就会重新审视问题，&lt;br /&gt;
完善地考虑一遍，&lt;br /&gt;
再优化/重做之前的脚本。&lt;/p&gt;

&lt;p&gt;书里还有一句话（稍微凝缩一下）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对某个领域的激情是能通过做过什么而看出来的。“做过什么”是指“输出”而不是“输入”。比如看过什么书，逛什么网站都是输入。而写过一些言之有物的文章，做过一些哪怕很小的Demo，都算输出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然这段话是说怎么面试PM的，&lt;br /&gt;
但其实任何事情都是这个道理。&lt;br /&gt;
举个栗子，&lt;br /&gt;
我最近已经不敢说“我很喜欢二次元文化了”。&lt;br /&gt;
因为我很长一段时间都没投过视频，&lt;br /&gt;
参与动漫相关的讨论，&lt;br /&gt;
甚至没发过弹幕（惭愧）&lt;br /&gt;
所以即便我没事会看一些动画、漫画，&lt;br /&gt;
这些也不过都是输入而已，&lt;br /&gt;
我并没有什么输出（滑稽）&lt;/p&gt;

&lt;h2 id=&#34;我很喜欢的一个小节&#34;&gt;我很喜欢的一个小节&lt;/h2&gt;

&lt;p&gt;书里有一个小章节，叫《如何通过提问把别人干翻》&lt;br /&gt;
大意是别人在讲PPT的时候，&lt;br /&gt;
你可以提这些问题来把他干翻：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;为什么要做这件事，不做的话会死人吗？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这是用户的目标还是我们的目标？是不是老板的目标？老板换了怎么办？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这个用户有普遍性吗？能代表多少人？这类用户对我们优先级是什么？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;数据来源是什么？什么时候获取的？是怎么采样的？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为什么没有看到这个产品线的大图？5年后这个产品是什么样子？你实现整个图景的途径是什么？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;未来的确很美好，但怎么实现？现在如果只做一件事，最重要的是什么？你打算怎么做？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;……（还有很多）&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;光是粗略的看了一遍问题，&lt;br /&gt;
我已经能想象会议室里的尴尬的沉默了……&lt;/p&gt;

&lt;p&gt;其实《把别人干翻》的这系列问题，&lt;br /&gt;
跟&lt;a href=&#34;https://coolshell.cn/articles/4758.html&#34;&gt;《如何写出无法维护的代码》&lt;/a&gt;的意思都是一样的，&lt;br /&gt;
通过反向的思考（假如我是刁民）来完善自我。&lt;/p&gt;

&lt;h2 id=&#34;好奇心与行动力&#34;&gt;好奇心与行动力&lt;/h2&gt;

&lt;p&gt;书里很多次地提到过一对词：【新手】和【专家】。&lt;br /&gt;
而且后面还说&lt;br /&gt;
“一个好的PM不仅有新手心态，热爱思考，拒绝存在即合理。&lt;br /&gt;
也会有专家能力，很快上手，做什么事情都很擅长。”&lt;br /&gt;
&lt;del&gt;呸&amp;hellip;这又不是PM专属的&amp;hellip;作者真不要脸 :)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;其实我眼中这就是两个词：&lt;br /&gt;
&lt;strong&gt;好奇心&lt;/strong&gt;和&lt;strong&gt;行动力&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;好奇心会促使我们看到一个东西时，&lt;br /&gt;
想去玩一下体验一下，&lt;br /&gt;
然后试图搞清楚它的原理。&lt;br /&gt;
也会激发我们透过现象看本质，&lt;br /&gt;
比如&lt;a href=&#34;https://liriansu.com/x-y-z-question&#34;&gt;XYZ问题&lt;/a&gt;里的道理一样，&lt;br /&gt;
透过Z问题，越过Y问题，看到最初的X问题。&lt;/p&gt;

&lt;p&gt;行动力可以帮助我们满足好奇心。&lt;br /&gt;
陶菲格在自己的文章里质问自己：&lt;br /&gt;
“（为什么我要践行我的思想呢？）&lt;br /&gt;
难道只有我的头脑中才有思想？”&lt;br /&gt;
而他自己又回答道：&lt;br /&gt;
“其他人也有思想。&lt;br /&gt;
但是能让思想出世的却寥寥无几。”&lt;/p&gt;

&lt;p&gt;复用上文的的说法，&lt;br /&gt;
好奇心会增加输入，&lt;br /&gt;
行动力会把输入转化成有用的输出。&lt;/p&gt;

&lt;p&gt;总的来说作为一个外行人，&lt;br /&gt;
看《人人都是产品经理2.0》这本书的确增长了一点眼界。&lt;br /&gt;
不过假如人人都是程序员就更好了 XD&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim, Tmux, Zsh怎么读</title>
      <link>https://liriansu.com/posts/2017-05-12-pronunciations/</link>
      <pubDate>Fri, 12 May 2017 22:41:02 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-05-12-pronunciations/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;孔乙己显出极高兴的样子，将两个指头的长指甲敲着柜台，点头说，“对呀对呀！……回字有四样写法，你知道么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前阵子 GitHub 上有一个很好玩的 Repo ：&lt;br /&gt;
&lt;a href=&#34;https://github.com/shimohq/chinese-programmer-wrong-pronunciation&#34;&gt;shimohq/chinese-programmer-wrong-pronunciation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;列了一些国内程序员容易读错的词，&lt;br /&gt;
过了一遍我发现我也中招了：&lt;br /&gt;
&lt;code&gt;Django 读作 Jango 就行了，D不用读出来&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;vim-怎么读&#34;&gt;Vim 怎么读&lt;/h2&gt;

&lt;p&gt;这让我想起前阵子听&lt;a href=&#34;https://tianchunbinghe.blog.163.com&#34;&gt;冰河学长&lt;/a&gt;&lt;a href=&#34;https://music.163.com/#/song?id=28707021&#34;&gt;和别人聊 Common Lisp 的时候&lt;/a&gt;，&lt;br /&gt;
（一个多小时的纯聊天，听完收获很大）&lt;br /&gt;
把 Vim 单个字母地读出来读成了 &lt;code&gt;V - I - M&lt;/code&gt; &amp;hellip;&lt;br /&gt;
当时我就很好奇地去查了一下大部分人是怎么读 Vim 的。&lt;br /&gt;
结果在万能的 Vim Manual 里发现了 &lt;code&gt;:help pronounce&lt;/code&gt;，&lt;br /&gt;
里面是这么说的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vim is pronounced as one word, like Jim, not vi-ai-em.  It&amp;rsquo;s written with a&lt;br /&gt;
capital, since it&amp;rsquo;s a name, again like Jim.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说 &lt;strong&gt;Vim是一个词连读的，就好像读Tim一样&lt;/strong&gt;，很科学&lt;/p&gt;

&lt;h2 id=&#34;tmux-怎么读&#34;&gt;Tmux 怎么读&lt;/h2&gt;

&lt;p&gt;不像 Vim 的读法，有一个比较官方的说法。&lt;br /&gt;
Tmux 的读法可以当做辩题…&lt;br /&gt;
&lt;a href=&#34;https://www.reddit.com/r/linux/comments/yz4r6/screen_vs_tmux/c6034gp/?utm_content=permalink&amp;amp;utm_medium=front&amp;amp;utm_source=reddit&amp;amp;utm_name=linux&#34;&gt;比如 Reddit 上有小伙伴说，公司里因为没有统一的 Tmux 读法，所以很多人都装了 Screen&amp;hellip;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过 &lt;strong&gt;大部分人都觉得 Tmux 应该读作 Tee Mucks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如下面有个比较靠谱的回复说，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tmux 应该读作 Tee Mucks，因为 Tmux 其实是 Terminal Multiplexer 的缩写，所以应该读作 T-Mux (Tee Mucks)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;又有人说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tmux 的发音规则很简单，就跟 Gmail 一样&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;zsh-怎么读&#34;&gt;Zsh 怎么读&lt;/h2&gt;

&lt;p&gt;其实类似于 Tmux，大部分人觉得&lt;strong&gt;Zsh 应该跟 Tmux, Gmail 一样发音&lt;/strong&gt;&lt;br /&gt;
因为 Zsh 全称是 Z Shell：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/admin_mourning.png&#34; alt=&#34;xkcd686&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;其实也可以说纠结读音的人，都是PM需求提的不够多（滑稽）&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
我喜欢兼听则明。&lt;br /&gt;
能听懂不同发音指向的同一名词，&lt;br /&gt;
也能选择自己觉得最科学的发音来与人讨论问题 :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我可能看了假的技术书</title>
      <link>https://liriansu.com/posts/2017-04-22-how-google-works-note/</link>
      <pubDate>Sat, 22 Apr 2017 01:48:05 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-04-22-how-google-works-note/</guid>
      <description>&lt;p&gt;清明节的时候在火车上把 &lt;code&gt;How Google Works&lt;/code&gt; 给读完了，&lt;br /&gt;
我原以为读这本书会提升技术，&lt;br /&gt;
没想到提升了 HR 的知识（懵逼&lt;/p&gt;

&lt;h2 id=&#34;这本书讲啥&#34;&gt;这本书讲啥&lt;/h2&gt;

&lt;p&gt;写书的人叫 &lt;code&gt;Eric Schmidt&lt;/code&gt;，&lt;br /&gt;
是 Google 的 Executive Chairman。&lt;br /&gt;
然而我并不知道这个职位具体是做啥的，&lt;br /&gt;
大概翻译成中文会是“执行总裁”，&lt;br /&gt;
感觉做很多管理相关的工作。&lt;br /&gt;
不论如何，这个职位是不写代码的。&lt;/p&gt;

&lt;p&gt;这本书条理极其清晰，&lt;br /&gt;
整本书的内容用章节小标题即可概括：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;像创始人一样工作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;放权于员工&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;只聘用比你优秀的人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不要把职业发展和绩效管理混淆&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关注团队的两端：最好的和最差的员工&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;既要节俭，又要慷慨&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不公平薪酬&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;助推  &lt;em&gt;这个翻译太屎了&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;能力越高，期望越高&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;享受你的工作&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;读完这本书基本上我的感想如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;卧槽，外国人的英语是溜啊&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不愧是谷歌，有些东西是只有他们才能这么搞，规模效应是厉害&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在吹牛逼之前，首先你得变得牛逼&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;书里的招聘&#34;&gt;书里的招聘&lt;/h2&gt;

&lt;p&gt;前几章的重心都在招聘上，&lt;br /&gt;
作者讲到一条大家都认同的道理，&lt;br /&gt;
就是&lt;strong&gt;面试是无法精确衡量一个人的水平的&lt;/strong&gt;。&lt;br /&gt;
所以对此，他们采取的解决方案就是&lt;br /&gt;
&lt;strong&gt;招聘Top10%的人才，这样他们就算表现再差，也只会是中等水平&lt;/strong&gt;。&lt;br /&gt;
看到这里，&lt;br /&gt;
我总有一种&lt;strong&gt;我要买最贵的食材，这样做出来的菜就不会太难吃&lt;/strong&gt;&lt;br /&gt;
的浪费的感觉&amp;hellip;&lt;br /&gt;
大厂毕竟是大厂啊&amp;hellip;（心酸地、嫉妒地&lt;/p&gt;

&lt;p&gt;作者还讲到了一个词，&lt;br /&gt;
叫 &lt;code&gt;Exploding Offer&lt;/code&gt;（会炸的录取通知书）  &lt;em&gt;依然是屎一样的翻译&lt;/em&gt;&lt;br /&gt;
说是他们会给来面试候选人发有最后期限的offer，&lt;br /&gt;
比如 *下周三之前，不接受我司offer就失效*。&lt;br /&gt;
这种发offer的方式，从公司、管理角度是非常棒的，&lt;br /&gt;
因为可控风险，防骑驴找马。&lt;br /&gt;
不过对于个人而言，&lt;br /&gt;
作者也觉得这种发offer的方式并不完美。&lt;br /&gt;
这里用“也”，&lt;br /&gt;
是因为我也觉得这种发offer的方式不完美。&lt;/p&gt;

&lt;p&gt;除了这些，&lt;br /&gt;
作者还讲到了一些好玩的点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;面试一定要保持恒定的标准，最好采用结构化的测试问题&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;没人喜欢现有的绩效考核制度，包括HR。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;更没人喜欢任何新的绩效考核制度。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在一个组织里，更多时候是幂律分布，而不是高斯分布。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总的来说，&lt;br /&gt;
这本书可以休闲的读一下。&lt;br /&gt;
里面有不少故事，&lt;br /&gt;
但是里面的方法论不一定学得来，&lt;br /&gt;
毕竟所有的这些构成了 Google 独特的文化，&lt;br /&gt;
就好像 &lt;a href=&#34;https://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf&#34;&gt;Valve员工手册&lt;/a&gt; 里独特的 Valve 文化一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hunter2是什么梗</title>
      <link>https://liriansu.com/posts/2017-03-26-hunter2-meme/</link>
      <pubDate>Sun, 26 Mar 2017 23:58:26 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-26-hunter2-meme/</guid>
      <description>&lt;p&gt;简单来说：&lt;br /&gt;
这是一个弱密码。&lt;/p&gt;

&lt;h2 id=&#34;hunter2&#34;&gt;hunter2&lt;/h2&gt;

&lt;p&gt;密码安全是个长盛不衰的话题，&lt;br /&gt;
前阵子又有人统计了&lt;a href=&#34;https://blog.keepersecurity.com/2017/01/13/most-common-passwords-of-2016-research-study/&#34;&gt;2016年最弱的密码&lt;/a&gt;。&lt;br /&gt;
每次明文存储密码的大网站数据库泄露，&lt;br /&gt;
也都&lt;a href=&#34;https://36kr.com/p/5038663.html&#34;&gt;有人统计弱密码排名&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;像&lt;code&gt;123456&lt;/code&gt;、&lt;code&gt;letmein&lt;/code&gt;、&lt;code&gt;password&lt;/code&gt;都是典型的弱密码。&lt;br /&gt;
&lt;code&gt;hunter2&lt;/code&gt;也是一个弱密码，&lt;br /&gt;
其中的梗&lt;a href=&#34;https://bash.org/?244321&#34;&gt;起源于2004年左右IRC上面的一段对话&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Cthon98&amp;gt; 在聊天框里输入你的密码，系统会自动地把它变成星号
&amp;lt;Cthon98&amp;gt; ********* 你看！
&amp;lt;AzureDiamond&amp;gt; hunter2
&amp;lt;AzureDiamond&amp;gt; 我看不到星号
&amp;lt;Cthon98&amp;gt; &amp;lt;AzureDiamond&amp;gt; *******
&amp;lt;Cthon98&amp;gt; 我看到你发的是上面这行
&amp;lt;AzureDiamond&amp;gt; 哇哦，真的？
&amp;lt;Cthon98&amp;gt; 没错
&amp;lt;AzureDiamond&amp;gt; 你用hunter2把我的hunter2给hunter2了
&amp;lt;AzureDiamond&amp;gt; 哈哈，你看这串是不是很有意思
&amp;lt;Cthon98&amp;gt; lol 是啊。所以说每次你输入hunter2，我看到的都是*******
&amp;lt;AzureDiamond&amp;gt; 真是酷炫，我以前都不知道IRC会自动屏蔽密码
&amp;lt;Cthon98&amp;gt; 是的，不管你在哪输如hunter2，别人看到的都是*******
&amp;lt;AzureDiamond&amp;gt; 屌爆啦！
&amp;lt;AzureDiamond&amp;gt; 等等，你怎么知道我密码的？
&amp;lt;Cthon98&amp;gt; 呃，我只是把你的*******给复制了一下，你看到的可能是它的原样hunter2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用表情图表示就是这样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/hunter2.jpg&#34; alt=&#34;hunter2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样的套路在新时代就是这样子的：&lt;br /&gt;
&lt;del&gt;（今天是马化腾的生日，转发你的密码到五个群，再看看你的头像）&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/hunter2-god.jpg&#34; alt=&#34;hunter2-god&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[XKCD 936]也是讲密码安全的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/password_strength.png&#34; alt=&#34;xkcd 936&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是某Redditor也发现了，&lt;br /&gt;
写教务处网站的那个同学，&lt;br /&gt;
&lt;a href=&#34;https://www.reddit.com/r/xkcd/comments/2f5xps/my_university_has_good_password_instructions/&#34;&gt;也看XKCD&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ElRxuGK.png&#34; alt=&#34;password&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以总的来说，&lt;br /&gt;
&lt;code&gt;hunter2&lt;/code&gt;就是一个关于弱密码的梗。&lt;br /&gt;
希望大伙的密码都很安全，&lt;br /&gt;
相关的虚拟财产什么也都很安全 :)&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;在如今，用一个好的密码管理软件是很好的选择。&lt;br /&gt;
假如你嫌密码管理软件太麻烦，&lt;br /&gt;
那么选一个有数字、大写字母、小写字母、特殊字符的10位以上的密码也是不错的选择。&lt;/p&gt;

&lt;p&gt;然而有很多网站不支持特殊字符ORZ&lt;br /&gt;
还有网站限制了很短的密码长度…&lt;br /&gt;
╮(╯▽╰)╭ 假如网站登录框旁边，&lt;br /&gt;
能把他们当初注册的密码条件写上就好了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建舒适的 Windows 开发环境</title>
      <link>https://liriansu.com/posts/2017-03-24-windows-dev-env/</link>
      <pubDate>Fri, 24 Mar 2017 02:00:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-24-windows-dev-env/</guid>
      <description>&lt;p&gt;假如你也不介意身处&lt;a href=&#34;https://www.zhihu.com/question/24270600&#34;&gt;鄙视链&lt;/a&gt;的最底端，&lt;br /&gt;
那来交流一下&lt;code&gt;怎么样搭建Windows的开发环境&lt;/code&gt;吧&lt;/p&gt;

&lt;h2 id=&#34;鄙视链-we-are-the-same-的最底端-windows&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/question/24270600&#34;&gt;鄙视链&lt;/a&gt;的最底端：Windows&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/24270600&#34;&gt;鄙视链&lt;/a&gt;是程序员日常生活中确实的一部分，&lt;br /&gt;
比如拿经典的编程语言来说，&lt;br /&gt;
有种说法是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C 语言工程师鄙视 C++ 工程师，&lt;br /&gt;
C++ 工程师鄙视 Java 和 C# 工程师，&lt;br /&gt;
Java 工程师和 C# 工程师则互相鄙视。&lt;br /&gt;
写静态语言的工程师鄙视写动态语言的工程师。&lt;br /&gt;
用 Python 3 的工程师鄙视还在用 Python 2 的工程师，&lt;br /&gt;
用 Python 2 的工程师鄙视遇到 UnicodeEncodeError 的工程师。&lt;/p&gt;

&lt;p&gt;所有的工程师都鄙视 PHP 工程师。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而在用的操作系统方面，&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/24270600&#34;&gt;鄙视链&lt;/a&gt;的说法基本是这样的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;用 Mac OS X 的工程师鄙视用 Linux 的工程师，&lt;br /&gt;
用 Linux 的工程师鄙视用 Windows 的工程师。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然是这么说，&lt;br /&gt;
但我还是很喜欢 Windows 的开发环境，&lt;br /&gt;
主要原因是：&lt;strong&gt;可以玩游戏&lt;/strong&gt;…&lt;br /&gt;
虽然目前我已经几乎不玩了，&lt;br /&gt;
但是这个&lt;strong&gt;可以玩游戏&lt;/strong&gt;的无限可能性深深地吸引着我&amp;hellip;&lt;/p&gt;

&lt;p&gt;o(〃&amp;rsquo;▽&amp;rsquo;〃)o&lt;br /&gt;
所以我们要通过一系列步骤，&lt;br /&gt;
搭建一个最舒服的 Windows 开发环境！&lt;del&gt;和游戏环境&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;必备软件&#34;&gt;必备软件&lt;/h2&gt;

&lt;p&gt;有几个软件我认为是 Windows 开发环境中必不可少的。&lt;/p&gt;

&lt;h3 id=&#34;chocolatey-chocolatey&#34;&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; 是 Windows 上的命令行包管理软件，&lt;br /&gt;
不是官方的，&lt;br /&gt;
但是非常好用。&lt;/p&gt;

&lt;p&gt;以管理员身份打开 &lt;code&gt;cmd.exe&lt;/code&gt; 后运行一行命令即可装成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;#34;iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))&amp;#34; &amp;amp;&amp;amp; SET &amp;#34;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;装好以后一行命令就可以装上常用软件，&lt;br /&gt;
以及把 Path 环境变量配好：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco install -y 7zip everything git jdk8 nodejs npm python2 putty vagrant virtualbox vim wox&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;唯一缺点是安装过程都是采用默认值静默安装的，&lt;br /&gt;
假如有些软件要取消掉右键菜单，&lt;br /&gt;
或者放在特定文件夹内则需要自己搞一下。&lt;/p&gt;

&lt;h3 id=&#34;wox-wox&#34;&gt;&lt;a href=&#34;https://www.getwox.com/&#34;&gt;Wox&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;就是上一条 &lt;code&gt;choco&lt;/code&gt; 命令最后要装的那个 &lt;a href=&#34;https://www.getwox.com/&#34;&gt;wox&lt;/a&gt; ，&lt;br /&gt;
一个快速启动应用的工具。&lt;/p&gt;

&lt;p&gt;假如你知道 Mac OS 系统上的 &lt;code&gt;Spotlight&lt;/code&gt; 或者 &lt;code&gt;Alfred&lt;/code&gt; 的话，&lt;br /&gt;
&lt;a href=&#34;https://www.getwox.com/&#34;&gt;wox&lt;/a&gt; 就是它们在 Windows 上的版本。&lt;/p&gt;

&lt;p&gt;比如我在任何界面，&lt;br /&gt;
敲下 &lt;code&gt;Alt + Space&lt;/code&gt; 的快捷键以后，&lt;br /&gt;
就弹出了白色的输入框。&lt;br /&gt;
我输入程序名后按下回车，&lt;br /&gt;
就会自动打开该程序。&lt;br /&gt;
&lt;a href=&#34;https://www.getwox.com/&#34;&gt;wox&lt;/a&gt;支持通配符，&lt;br /&gt;
支持搜索，&lt;br /&gt;
支持系统操作（比如锁屏、重启），&lt;br /&gt;
加上 &lt;a href=&#34;https://www.voidtools.com/&#34;&gt;everything&lt;/a&gt; 以后支持搜索文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/windows_wox.jpg&#34; alt=&#34;wox-sample&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;git-bash-git-scm&#34;&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git Bash&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;此处讲的不是 Git ，而是特指 &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git Bash&lt;/a&gt;。&lt;br /&gt;
&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git Bash&lt;/a&gt; 是装 Git 附带装的基于 &lt;a href=&#34;https://www.mingw.org/&#34;&gt;mingw (MINimal Gnu for Windows)&lt;/a&gt; 的一个终端软件。&lt;br /&gt;
自带 bash / ls / find / grep / wc 等 Linux 命令行工具，&lt;br /&gt;
支持 .profile 自定义环境变量，&lt;br /&gt;
支持 git 文件状态显示。&lt;br /&gt;
有了这个以后我基本没用 cmd 或者 powershell 了。&lt;/p&gt;

&lt;h2 id=&#34;我的偏好&#34;&gt;我的偏好&lt;/h2&gt;

&lt;p&gt;前文的三个软件我是强烈推荐使用的。&lt;br /&gt;
下面还有一些带有一定的，&lt;br /&gt;
或者是强烈的个人品味的软件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VirtualBox + Vagrant + Putty&lt;/code&gt;：平常开发的时候，我会用 &lt;code&gt;vagrant init ubuntu/trusty64 &amp;amp;&amp;amp; vagrant up&lt;/code&gt; 来起一个 Ubuntu 虚拟机，然后用 Putty 连上去，把这个虚拟机当一个完全体 Server 来用。&lt;a href=&#34;https://www.virtualbox.org/wiki/VirtualBox&#34;&gt;VirtualBox&lt;/a&gt; 是虚拟机载体，类似于 VMware ，但是版权协议更宽松。&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; 是虚拟机管理软件，提供主机与虚拟机的数据通讯，还有一些自动化的活。&lt;a href=&#34;https://www.putty.org/&#34;&gt;Putty&lt;/a&gt; 是老牌远程终端软件。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;&lt;code&gt;JetBrains全家桶，包括IntelliJ IDEA, PyCharm, Rider EAP, ReSharper&lt;/code&gt;&lt;/a&gt;：JetBrains 毕竟是做 IDE 的商业公司，还是比_一些_开源 IDE 要好的，比如他们家的 IDE 基本上不会出现&lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=76936&#34;&gt;10年都没解决的Issue&lt;/a&gt;&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;网易云音乐 + 有道词典 + 有道云笔记&lt;/code&gt;：呃，这个不知道怎么介绍，就大概是字面意义上的需要这些东西吧。咖啡和音乐是程序员的好伙伴，我不怎么喝咖啡，我就只有音乐了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.voidtools.com/&#34;&gt;&lt;code&gt;everything&lt;/code&gt;&lt;/a&gt;：巨快巨好用的 Windows 全局搜索软件，效率可比 Linux 上的 &lt;code&gt;locate&lt;/code&gt; 命令。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Editor_war&#34;&gt;&lt;code&gt;Vim, Windows 上的是 GVim&lt;/code&gt;：编辑器之神&lt;/a&gt;。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其它技巧&#34;&gt;其它技巧&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/9308.html&#34;&gt;左耳朵耗子的建议： 作环保的程序员，从不用百度开始&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;除了 &lt;code&gt;Alt + F4&lt;/code&gt;，Windows上的 &lt;code&gt;Win + E&lt;/code&gt;, &lt;code&gt;Win + R&lt;/code&gt;, &lt;code&gt;Win + D&lt;/code&gt;, &lt;code&gt;Win + L&lt;/code&gt;, &lt;code&gt;Win + Tab&lt;/code&gt; 也很有用。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;而可以用 &lt;code&gt;终端中左键选中&lt;/code&gt; 来复制，&lt;code&gt;Shift + Insert&lt;/code&gt; 来粘贴。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Windows 中与 &lt;code&gt;ln&lt;/code&gt; 类似的命令是 &lt;code&gt;mklink &amp;lt;dest&amp;gt; &amp;lt;source&amp;gt;&lt;/code&gt;。假如是目录则要加参数 &lt;code&gt;mklink /d &amp;lt;dest&amp;gt; &amp;lt;source&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;假如你用 Vim，把 &lt;code&gt;&amp;lt;Caps Lock&amp;gt; 大写锁定&lt;/code&gt; 键改成 &lt;code&gt;&amp;lt;Ctrl&amp;gt;&lt;/code&gt; 键吧。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;本文中用到的一些配置，也可以在&lt;a href=&#34;https://github.com/LKI/myconf&#34;&gt;我 GitHub 的配置项目&lt;/a&gt;中找到。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>HR与程序员的日常（一）： HRBP与Markdown</title>
      <link>https://liriansu.com/posts/2017-03-20-hrbp-and-markdown/</link>
      <pubDate>Mon, 20 Mar 2017 01:49:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-20-hrbp-and-markdown/</guid>
      <description>&lt;p&gt;简单来说，&lt;br /&gt;
HRBP是一种角色，&lt;br /&gt;
Markdown是一种语法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lirian是男程序员，&lt;br /&gt;
Mia是女HR。&lt;br /&gt;
他们经常会互相科普各种名词，&lt;br /&gt;
Lirian决定把谈话记下来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;hrbp&#34;&gt;HRBP&lt;/h2&gt;

&lt;p&gt;话说某一天Lirian问Mia：&lt;br /&gt;
“问个问题啊，HRBP究竟是什么？”&lt;/p&gt;

&lt;p&gt;Mia十分惊奇：&lt;br /&gt;
“怎么想起问这个了，贵司要招HRBP么？”&lt;/p&gt;

&lt;p&gt;“不是不是，我就是好奇一下。&lt;br /&gt;
比如先说HR吧，我在想，&lt;br /&gt;
HR的全称其实是Human Resources，&lt;br /&gt;
直译过来就是人力资源。&lt;br /&gt;
那假如说‘我是一个HR’，&lt;br /&gt;
直译过来岂不是‘我是一个人力资源’了么？&lt;br /&gt;
感觉怪怪的。”&lt;/p&gt;

&lt;p&gt;“哎呀，这个是习惯用法啦。”&lt;/p&gt;

&lt;p&gt;“那HRBP呢？HRBP全称是什么？”&lt;/p&gt;

&lt;p&gt;“HRBP的全称是&lt;strong&gt;Human Resources Business Partner&lt;/strong&gt;。&lt;br /&gt;
你首先得要有一个概念，&lt;br /&gt;
HRBP它广义上不是一个职位，&lt;br /&gt;
而是一种角色定义。”&lt;/p&gt;

&lt;p&gt;Lirian很困惑：“什么意思？”&lt;/p&gt;

&lt;p&gt;Mia并没有直接回答这个问题，&lt;br /&gt;
而是抛了另外一个问题：&lt;br /&gt;
“我从源头上跟你讲吧。&lt;br /&gt;
传统意义上人力资源的分类，&lt;br /&gt;
是分成了六大模块，&lt;br /&gt;
这个你知道吧？”&lt;/p&gt;

&lt;p&gt;Lirian表示知道：&lt;br /&gt;
“我想想啊，你别说啊，&lt;br /&gt;
六大模块应该有招聘，培训，薪资…呃…&lt;br /&gt;
呃…和其它三大模块！”&lt;/p&gt;

&lt;p&gt;“嗯，你前面的招聘、培训、薪资福利都说对了，&lt;br /&gt;
后面还有绩效、劳动关系，&lt;br /&gt;
和……人力资源规划~&lt;br /&gt;
但是呢，这种分类方式特别教条化，&lt;br /&gt;
怎么可能有人只做薪酬，&lt;br /&gt;
有人只做招聘呢？&lt;br /&gt;
比如你做招聘的，&lt;br /&gt;
肯定得了解候选人薪资呀，&lt;br /&gt;
也得了解绩效嘛。&lt;br /&gt;
所以后来就有人把六大模块这个理论完全抛开，&lt;br /&gt;
提出了全新的&lt;strong&gt;三支柱&lt;/strong&gt;理论。”&lt;/p&gt;

&lt;p&gt;“那是哪三个支柱呢？”&lt;/p&gt;

&lt;p&gt;“第一个就是HRBP。&lt;br /&gt;
第二个是SSC，Share Service Center，&lt;br /&gt;
SSC处理的都是一般性事务。&lt;br /&gt;
还有个叫做COE，Center Of Expert，&lt;br /&gt;
就人力资源专家，&lt;br /&gt;
你可以想像那些讲师，&lt;br /&gt;
专门做培训、招聘、绩效的。”&lt;/p&gt;

&lt;p&gt;Lirian好奇地问：&lt;br /&gt;
“那是不是说比如‘我去当个小HR’，&lt;br /&gt;
这里的小HR一般指的是SSC？”&lt;/p&gt;

&lt;p&gt;“嗯是的，世界上大部分HR都可以算是SSC。&lt;br /&gt;
在一个大的公司里面，&lt;br /&gt;
这部分HR就会专门来处理杂活，&lt;br /&gt;
这个类型的HR其实入门门槛很低。”&lt;/p&gt;

&lt;p&gt;“那假如我要当HRBP，&lt;br /&gt;
是不是我也得从SSC做起？”&lt;/p&gt;

&lt;p&gt;“这不一定。&lt;br /&gt;
假如你想当HRBP，&lt;br /&gt;
最有效的其实是你本来就是业务部门的人。&lt;br /&gt;
比如我以前是写代码的，&lt;br /&gt;
但我觉得哎呀写代码太吃力。&lt;br /&gt;
我会写，但是我写的不好，&lt;br /&gt;
于是我就去当HR。（Lirian笑）&lt;br /&gt;
然后我就去学了HR的课，&lt;br /&gt;
考了证书，&lt;br /&gt;
又做了几年招聘，&lt;br /&gt;
然后我再跑到一家公司去当研发部的HRBP了。&lt;br /&gt;
通常HRBP对资历要求比较高。&lt;br /&gt;
这种呢就是属于你从业务部门，&lt;br /&gt;
直接转去做HR，&lt;br /&gt;
那么你的优势会非常大，&lt;br /&gt;
但是事实上比较少的人会选择这么做。&lt;br /&gt;
我Manager Tina就是其中一个，&lt;br /&gt;
她以前是做销售卖ERP软件的，&lt;br /&gt;
所以她后来去当猎头做招聘就很有优势，&lt;br /&gt;
再后来她就当HR了。”&lt;/p&gt;

&lt;p&gt;Lirian对业务部门表示了疑惑：&lt;br /&gt;
“什么部门算业务部门啊？”&lt;/p&gt;

&lt;p&gt;Mia给出了定义：&lt;br /&gt;
“业务部门就是能给公司带来直接盈利的部门。”&lt;/p&gt;

&lt;p&gt;“喔！比如销售！”&lt;/p&gt;

&lt;p&gt;“对的，还有产品、售后支持部啊。&lt;br /&gt;
当然这种已经算有点偏的了。”&lt;/p&gt;

&lt;p&gt;“技术部呢？”&lt;/p&gt;

&lt;p&gt;“技术部也算啊~”&lt;/p&gt;

&lt;p&gt;Lirian想起他们经常采购手机什么的，&lt;br /&gt;
表示很惭愧：&lt;br /&gt;
“但我感觉我们净给公司花钱了……”&lt;/p&gt;

&lt;p&gt;“但是你们是生产出产品的人啊。&lt;br /&gt;
长远来看你们为公司生产了价值，&lt;br /&gt;
而盈利了。&lt;br /&gt;
像HR部门啊，行政啊，财务啊就不算业务部门。”&lt;/p&gt;

&lt;p&gt;Lirian感慨道：&lt;br /&gt;
“那感觉跨界的是有优势啊”&lt;/p&gt;

&lt;p&gt;“对，这种就是人力资源部门里不是科班出身的。&lt;br /&gt;
还有一种就是正正经经的，&lt;br /&gt;
大学也是学人力资源专业的，&lt;br /&gt;
然后从SSC，&lt;br /&gt;
做到了HR Specialist，&lt;br /&gt;
到HRBP，&lt;br /&gt;
一步一步往上做到Expert也是有的。”&lt;/p&gt;

&lt;p&gt;听完了这一段，&lt;br /&gt;
Lirian对HRBP是什么大概有了点了解，&lt;br /&gt;
他又问了：&lt;br /&gt;
“那HRBP究竟会做什么呢？”&lt;/p&gt;

&lt;p&gt;“这个呢，分很多种情况，&lt;br /&gt;
比如说十五年工作经验以上的HR吧。&lt;br /&gt;
就像我们老大，&lt;br /&gt;
他经常要开会，&lt;br /&gt;
那他都开些什么会呢？”&lt;/p&gt;

&lt;p&gt;“是啊，都开些什么呢？”&lt;/p&gt;

&lt;p&gt;“实际上这个层级的HR，&lt;br /&gt;
很多是和老板一起参与公司战略规划。&lt;br /&gt;
比如说Team Leader有一个目标，&lt;br /&gt;
然后HRBP就会说从人力资源的角度，&lt;br /&gt;
从人才配置的角度去帮助他实现这个目标。&lt;br /&gt;
特别是团队里出现了一些问题的情况，&lt;br /&gt;
就需要HRBP的建议，&lt;br /&gt;
像活特别多，干不完要招人；&lt;br /&gt;
或者是竞争对手一直在跟我们抢人这种。”&lt;/p&gt;

&lt;p&gt;“呃，等等。&lt;br /&gt;
这么听来我觉得HRBP也不是所有情况都适用的吧？&lt;br /&gt;
比如说万一有人不信这套理念，&lt;br /&gt;
万一Leader认为业务部门的事情，&lt;br /&gt;
就应该业务部门自己解决。&lt;br /&gt;
当然了从HR的角度来说，&lt;br /&gt;
肯定是他没认识到HR的重要性，&lt;br /&gt;
但感觉也会有很多公司都是这样没有HRBP的吧。”&lt;/p&gt;

&lt;p&gt;“会啊，初创型企业就是这样，&lt;br /&gt;
大公司里一般才有专门职位。&lt;br /&gt;
小规模的公司里这些活其实被经理啦，&lt;br /&gt;
主管啦，或者是部门的HR给分摊掉了。&lt;br /&gt;
但不要忘了，&lt;br /&gt;
这个时候业务部门的负责人，&lt;br /&gt;
他其实是自己在承担这一部分的角色。”&lt;/p&gt;

&lt;p&gt;“科学。&lt;br /&gt;
要这么定义的话，&lt;br /&gt;
的确是谁干这部分活，&lt;br /&gt;
谁就承担了HRBP的角色了。”&lt;/p&gt;

&lt;p&gt;“对的。”&lt;/p&gt;

&lt;p&gt;“那我来复述一下我对HRBP的理解吧？”&lt;/p&gt;

&lt;p&gt;Mia一摊手：&lt;br /&gt;
“请开始你的表演。”&lt;/p&gt;

&lt;p&gt;Lirian总结了三点：“&lt;br /&gt;
* 首先HRBP广义上是一个角色，狭义上也可以是个职位。&lt;br /&gt;
* 然后HRBP存在的作用就是帮业务部门处理战略上的事情。&lt;br /&gt;
* 其次因为要帮业务部门的忙，所以假如他是懂业务出身，他是有一定优势的。&lt;/p&gt;

&lt;p&gt;”&lt;/p&gt;

&lt;p&gt;Mia又补充了一下：&lt;br /&gt;
“HRBP就是帮业务部门解决痛点问题的，&lt;br /&gt;
假如他是业务部门出身会有非常大的优势。&lt;br /&gt;
因为部门的老板会很容易被他说服。&lt;br /&gt;
要不然假如说HRBP从来没写过代码，&lt;br /&gt;
技术部门的leader可能就会想：&lt;br /&gt;
‘你又不懂，凭什么指挥我啊’…”&lt;/p&gt;

&lt;p&gt;“嗯是啊。&lt;br /&gt;
那感觉HRBP做的厉害了以后，&lt;br /&gt;
下一步就直接当高层管理了？”&lt;/p&gt;

&lt;p&gt;“是有这个可能性，&lt;br /&gt;
但是其实很小。&lt;br /&gt;
基本上比起其他部门，&lt;br /&gt;
一个HRBP很难成为CEO，&lt;br /&gt;
顶多就当一个HR部门的头头算到顶了。”&lt;/p&gt;

&lt;p&gt;“喔，是这样啊。”&lt;/p&gt;

&lt;p&gt;Mia又想到了点什么，&lt;br /&gt;
补充道：&lt;br /&gt;
“我们刚才说的，&lt;br /&gt;
都是&lt;strong&gt;真正的&lt;/strong&gt;HRBP干的事情。&lt;br /&gt;
但事实是现在大多数公司HRBP都干的不是这个事情。&lt;br /&gt;
中国这套HR体系本来就是西方引入的嘛，&lt;br /&gt;
所以很多地方都变味了，&lt;br /&gt;
有些HRBP一开始又做招聘又做培训，&lt;br /&gt;
出了任何问题都要你解决。&lt;br /&gt;
这种HRBP就变成了每个团队的专用HR的感觉。”&lt;/p&gt;

&lt;p&gt;“噢，&lt;br /&gt;
所以正常来说就HRBP可以接活，&lt;br /&gt;
但是杂活呢，就分给SSC。&lt;br /&gt;
太专业的活，可以丢给Expert。”&lt;/p&gt;

&lt;p&gt;“没错，”&lt;br /&gt;
Mia通过了Lirian的答案，&lt;br /&gt;
突然又想考考他，&lt;br /&gt;
又问道：&lt;br /&gt;
“那你觉得HRM，就是HR经理和HRBP有什么区别呢？”&lt;/p&gt;

&lt;p&gt;Lirian想了想，说：&lt;br /&gt;
“我感觉这两个不是一个维度上的吧。&lt;br /&gt;
HRBP感觉是三支柱里的一个角色，&lt;br /&gt;
HRM感觉更多是职位高低的感觉，&lt;br /&gt;
比如小HR，普通HR和HR经理这种。”&lt;/p&gt;

&lt;p&gt;“差不多吧。&lt;br /&gt;
他们之间很大的差别是，&lt;br /&gt;
HRBP不会去制定公司的规章制度啊整套体系啊什么的，&lt;br /&gt;
因为他是针对特定的团队特定的业务。&lt;br /&gt;
但HRM就有这个责任，&lt;br /&gt;
去制定整套的规章制度。&lt;br /&gt;
比如假如公司要上市了，&lt;br /&gt;
老板需要有人来帮他制定完整的薪酬福利制度啊，&lt;br /&gt;
绩效考核制度啊，&lt;br /&gt;
这时候他需要的就是HRM，&lt;br /&gt;
而不是HRBP了。”&lt;/p&gt;

&lt;p&gt;Lirian学到了不少，&lt;br /&gt;
赶快表现出恍然大悟的样子：&lt;br /&gt;
“学到了！”&lt;/p&gt;

&lt;p&gt;Mia喝了口水，&lt;br /&gt;
总结了下陈词：&lt;br /&gt;
“反正我觉得最高级的HRBP，&lt;br /&gt;
就是站在老板的角度上想问题。&lt;br /&gt;
不过这样也满亏的，&lt;br /&gt;
拿着HR的钱，&lt;br /&gt;
做着老板的事情。”&lt;/p&gt;

&lt;p&gt;Lirian笑道：&lt;br /&gt;
“不过假如我是老板，&lt;br /&gt;
我肯定很喜欢你这样的员工。&lt;br /&gt;
假如我的每个员工都有ownership，&lt;br /&gt;
都像老板一样思考问题，&lt;br /&gt;
那我的公司一定是个伟大的公司。”&lt;/p&gt;

&lt;h2 id=&#34;markdown&#34;&gt;Markdown&lt;/h2&gt;

&lt;p&gt;喝了点水，&lt;br /&gt;
歇了歇以后，&lt;br /&gt;
Mia问Lirian：&lt;br /&gt;
“那你上次要跟我说的Markdown呢？&lt;br /&gt;
那是什么？”&lt;/p&gt;

&lt;p&gt;Lirian再次表示很惭愧：&lt;br /&gt;
“我感觉这个两三句话就说完了…”&lt;/p&gt;

&lt;p&gt;“说嘛说嘛~”&lt;/p&gt;

&lt;p&gt;“Markdown其实就是一种写文章的语法，&lt;br /&gt;
就像Word文件里指定了哪些字是标题，&lt;br /&gt;
哪些字是加粗的语法一样。&lt;br /&gt;
用Markdown来写文章可以让你更好地控制格式。”&lt;/p&gt;

&lt;p&gt;“啊？说完了？”&lt;/p&gt;

&lt;p&gt;“……说完了啊……”&lt;/p&gt;

&lt;p&gt;Mia感觉被两三句话就打发了，&lt;br /&gt;
很不服，于是继续问道：&lt;br /&gt;
“那上次看你用有道云笔记写东西，&lt;br /&gt;
为什么左右有一黑一白两个屏幕啊？”&lt;/p&gt;

&lt;p&gt;“喔，那个右边是预览页面。”&lt;br /&gt;
Lirian想了想，&lt;br /&gt;
详细地解释道：&lt;br /&gt;
“要讲Markdown，&lt;br /&gt;
我先来讲下Markup。&lt;br /&gt;
Markdown这个名字呢，&lt;br /&gt;
其实一开始是跟Markup针锋相对的。&lt;br /&gt;
Markup就是网页显示字体用的那种语法，&lt;br /&gt;
Microsoft Word用的也可以算是一种Markup。&lt;br /&gt;
Markup所宣扬的是WYSIWYG：&lt;br /&gt;
What You See Is What You Get，&lt;br /&gt;
中文翻译是所见即所得。&lt;br /&gt;
比如说我们要加粗一个字体，&lt;br /&gt;
我们就选中字体加粗一下。&lt;br /&gt;
但是这样有一个问题，&lt;br /&gt;
就是WYCSYCG：&lt;br /&gt;
What You Can&amp;rsquo;t See You Can&amp;rsquo;t Get，&lt;br /&gt;
格式的表现能力就一眼可见的那么多。&lt;br /&gt;
假如我想做到同样的文字，&lt;br /&gt;
在不同的环境下呈现不同的效果，&lt;br /&gt;
就不行了。&lt;br /&gt;
所以我们就有了Markdown。”&lt;/p&gt;

&lt;p&gt;Mia听得一脸懵逼，&lt;br /&gt;
Lirian就拿了台电脑开始展示起来了：&lt;br /&gt;
“比如说Markdown这种语法，&lt;br /&gt;
我们写文章可以这么写”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;# 这是大标题

&lt;span style=&#34;color:#75715e&#34;&gt;## 这是二标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
想**加粗**字体要在字体两边各加两个星号，*斜体两边就只加一个星号*。

引用别人的话可以加反引号，`像这样子`。

引用鲁迅的话就可以在行首加大于号：
&lt;span style=&#34;color:#66d9ef&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;网上的人都瞎编我的名言 —— 鲁迅
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; 可以用数字来表示序号
&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; 就像这样

&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt; 也可以表示列表
* 就像这样&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段Markdown呈现出来会长这个样子：&lt;/p&gt;

&lt;h1 id=&#34;这是大标题&#34;&gt;这是大标题&lt;/h1&gt;

&lt;h2 id=&#34;这是二标题&#34;&gt;这是二标题&lt;/h2&gt;

&lt;p&gt;想&lt;strong&gt;加粗&lt;/strong&gt;字体要在字体两边各加两个星号，*斜体两边就只加一个星号*。&lt;/p&gt;

&lt;p&gt;引用别人的话可以加反引号，&lt;code&gt;像这样子&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;引用鲁迅的话就可以在行首加大于号：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;网上的人都瞎编我的名言 —— 鲁迅&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;可以用数字来表示序号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;就像这样&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;也可以表示列表&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;就像这样&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看完这段展示以后，&lt;br /&gt;
Mia表示：&lt;br /&gt;
“我感觉这跟你们写程序很像啊，&lt;br /&gt;
要记很多种东西，&lt;br /&gt;
而且写出来还要渲染，&lt;br /&gt;
感觉很麻烦啊。”&lt;/p&gt;

&lt;p&gt;Lirian解释道：&lt;br /&gt;
“Markdown里，&lt;br /&gt;
常用的语法也就大概10种左右吧。&lt;br /&gt;
这个很容易学的。&lt;br /&gt;
而且用Markdown可以把所有的富文本转换成纯文本，&lt;br /&gt;
纯文本就没有在不同的电脑上，&lt;br /&gt;
呈现的效果不一样的问题啦。”&lt;/p&gt;

&lt;p&gt;Mia想了想，&lt;br /&gt;
最后问道：&lt;br /&gt;
“那为什么云笔记要专门支持Markdown啊？&lt;br /&gt;
感觉这个功能就是给程序员设计的…”&lt;/p&gt;

&lt;p&gt;Lirian：&lt;br /&gt;
“我也不知道…”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一种轻量级的Http加密方式：Hawk</title>
      <link>https://liriansu.com/posts/2017-03-18-hawk-authentication/</link>
      <pubDate>Sat, 18 Mar 2017 23:55:18 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-18-hawk-authentication/</guid>
      <description>&lt;p&gt;这是一篇关于&lt;a href=&#34;https://github.com/hueniverse/hawk1&#34;&gt;Hawk&lt;/a&gt;的简短介绍。&lt;/p&gt;

&lt;h2 id=&#34;什么是hawk&#34;&gt;什么是Hawk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hueniverse/hawk1&#34;&gt;Hawk&lt;/a&gt;是一种轻量级的Http加密方式，&lt;br /&gt;
这里的轻量级是针对于OAuth / Digest这种加密方式而言。&lt;br /&gt;
&lt;a href=&#34;https://github.com/hueniverse/hawk1&#34;&gt;Hawk&lt;/a&gt;主要防范的是中间人攻击，&lt;br /&gt;
它基于服务器和客户端共有的秘钥，&lt;br /&gt;
在时间戳的基础上对请求加密，&lt;br /&gt;
生成互相匹配的特征码。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hueniverse/hawk1&#34;&gt;Hawk&lt;/a&gt;的好处是整个加密的过程对计算能力要求不高，&lt;br /&gt;
用到的也是简单的sha256算法。&lt;br /&gt;
而且它可以只针对单个请求加密，&lt;br /&gt;
所以应用场景十分灵活。&lt;/p&gt;

&lt;p&gt;在一个典型的&lt;a href=&#34;https://github.com/hueniverse/hawk1&#34;&gt;Hawk&lt;/a&gt;应用场景中，&lt;br /&gt;
客户端首先通过某种方式跟服务端通信，&lt;br /&gt;
获取秘钥。&lt;br /&gt;
在之后的Http请求中，&lt;br /&gt;
客户端对请求采用Hawk加密，&lt;br /&gt;
并且把基本信息放在Http Header里。&lt;br /&gt;
服务器收到请求以后，&lt;br /&gt;
采用同样的方式进行加密比对，&lt;br /&gt;
假如两边都对上了，&lt;br /&gt;
则是一个合法请求。&lt;br /&gt;
否则返回&lt;code&gt;401 Unauthorized&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;加密算法&#34;&gt;加密算法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hueniverse/hawk1&#34;&gt;Hawk&lt;/a&gt;协议规定的加密方式如下：&lt;/p&gt;

&lt;p&gt;这是一个样例的HTTP GET请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET https://example.com:8000/resource/1?b=1&amp;amp;a=2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要通过Hawk验证，&lt;br /&gt;
我们会把请求的特征用换行符拼接成如下格式，&lt;br /&gt;
最后再用&lt;code&gt;HMAC sha256&lt;/code&gt;进行加密：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;hawk.1.header
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1353832234
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;j4h3g2
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/resource/1?b=1&amp;amp;a=2
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;example.com
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8000
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;some-app-ext-data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;hawk.1.header&lt;/code&gt;是表示用version为1的hawk来加密header，&lt;br /&gt;
&lt;code&gt;1353832234&lt;/code&gt;是unix timestamp，&lt;br /&gt;
&lt;code&gt;j4h3g2&lt;/code&gt;是客户端生成的随机字符串，&lt;br /&gt;
&lt;code&gt;GET&lt;/code&gt;是请求类型，&lt;br /&gt;
&lt;code&gt;/resource/1?b=1&amp;amp;a=2&lt;/code&gt;是请求的query，&lt;br /&gt;
&lt;code&gt;example.com&lt;/code&gt;和&lt;code&gt;8000&lt;/code&gt;分别是host和port，&lt;br /&gt;
而&lt;code&gt;some-app-ext-data&lt;/code&gt;是约定好要验证的额外内容（可为空）。&lt;br /&gt;
上面这段字符串是大小写敏感，空格敏感且换行敏感的。&lt;/p&gt;

&lt;p&gt;假如说我们的秘钥是&lt;code&gt;werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn&lt;/code&gt;，&lt;br /&gt;
则上面的样例请求经过&lt;code&gt;HMAC sha256&lt;/code&gt;加密后的特征码会是&lt;code&gt;6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后我们把基本信息加入Http Header里，&lt;br /&gt;
请求就会变成这样子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET https://example.com:8000/resource/1?b=1&amp;amp;a=2
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Authorization: Hawk id=&amp;#34;dh37fgj492je&amp;#34;, ts=&amp;#34;1353832234&amp;#34;, nonce=&amp;#34;j4h3g2&amp;#34;, ext=&amp;#34;some-app-ext-data&amp;#34;, mac=&amp;#34;6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务器端拿到&lt;code&gt;HttpHeader.Authorization&lt;/code&gt;以后进行加密比对即可。&lt;/p&gt;

&lt;h2 id=&#34;其它事项&#34;&gt;其它事项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hawk提供Payload Validation，协议中指定的加密方式是&lt;code&gt;sha256&lt;/code&gt;，与header的加密方式&lt;code&gt;HMAC sha256&lt;/code&gt;不一样。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;假如客户端和服务器的Timestamp不一样，服务器应当返回Timestamp，由客户端计算时间差后再次请求。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;具体使用中可恰当魔改Hawk请求，比如增加对id的验证等。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>HR就讨厌我们这样的技术，今年一个offer都没发</title>
      <link>https://liriansu.com/posts/2017-03-08-what-a-hard-backend-interview/</link>
      <pubDate>Wed, 08 Mar 2017 20:44:40 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-03-08-what-a-hard-backend-interview/</guid>
      <description>&lt;p&gt;还好我司HR人美心善，任劳任怨……&lt;/p&gt;

&lt;h2 id=&#34;面试套路&#34;&gt;面试套路&lt;/h2&gt;

&lt;p&gt;年后的求职市场逐渐活跃了起来，&lt;br /&gt;
直观感受就是收到的简历比年前要多不少，&lt;br /&gt;
于是最近基本上每天我们都有面试。&lt;/p&gt;

&lt;p&gt;我司目前一共有三个后端工程师：&lt;br /&gt;
津铭，周丞，我。&lt;/p&gt;

&lt;p&gt;我们面试的套路是&lt;code&gt;电话面试 - 到场面试（三轮） - 发offer&lt;/code&gt;。&lt;br /&gt;
这里的&lt;code&gt;到场面试（三轮）&lt;/code&gt;是指我们一共有三轮到面，&lt;br /&gt;
而不是提供三轮接送。&lt;/p&gt;

&lt;p&gt;不过前几天面了个广州的小兄弟，&lt;br /&gt;
觉得他还蛮不错的，&lt;br /&gt;
谢老板表示&lt;code&gt;只要人厉害的话，来回路费都可以报了。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;嗯，接下来就需要他证明自己是不是&lt;code&gt;厉害的人&lt;/code&gt;了。&lt;/p&gt;

&lt;h2 id=&#34;面试标准&#34;&gt;面试标准&lt;/h2&gt;

&lt;p&gt;其实我们的面试标准不高。&lt;br /&gt;
但因为上一句我用了&lt;code&gt;其实&lt;/code&gt;两个字，&lt;br /&gt;
说明我们的面试标准其实也不低。&lt;/p&gt;

&lt;p&gt;之前一次有一个前端工程师来面试，&lt;br /&gt;
算法题一题都没答出来，&lt;br /&gt;
实现题答得也不是特别好。&lt;br /&gt;
但是我们一致觉得这个候选人&lt;br /&gt;
&lt;code&gt;大学四年学的是物理，毕业以后才写前端的&lt;/code&gt;&lt;br /&gt;
能有这个水平很不错，&lt;br /&gt;
而且浑身散发着一种&lt;code&gt;学习技术使我快乐&lt;/code&gt;的光芒，&lt;br /&gt;
很让人喜欢。&lt;br /&gt;
于是我们发了offer，&lt;br /&gt;
候选人选择去了小红书&amp;hellip;/(ㄒoㄒ)/~~&lt;/p&gt;

&lt;p&gt;还有一次一个候选人来面试，&lt;br /&gt;
一路顺利地过到了我司CEO谢老板的当面面试。&lt;br /&gt;
谢老板是做技术的，&lt;br /&gt;
所以跟工程师很容易聊到一块去，&lt;br /&gt;
他跟候选人聊嗨了以后，&lt;br /&gt;
他问候选人：&lt;code&gt;你为什么想到创业公司工作啊？&lt;/code&gt;&lt;br /&gt;
候选人表示很激动，&lt;br /&gt;
回答道：&lt;code&gt;因为我的梦想就是创业啊，我想看看外面的创业公司是怎么做的，然后学了成套技术以后，我就可以自己去创业了！&lt;/code&gt;&lt;br /&gt;
当时谢老板就卧槽了。&lt;/p&gt;

&lt;h2 id=&#34;我司技术&#34;&gt;我司技术&lt;/h2&gt;

&lt;p&gt;我司技术邮箱组有两个，&lt;br /&gt;
一个是&lt;code&gt;yanfa@kezaihui.com&lt;/code&gt;，&lt;br /&gt;
研发部，很科学。&lt;br /&gt;
另外一个是&lt;code&gt;llk@kezaihui.com&lt;/code&gt;，&lt;br /&gt;
这个邮箱嘛，&lt;br /&gt;
御姐控表示很淡定。&lt;/p&gt;

&lt;p&gt;我司技术团队目前有10个人：&lt;br /&gt;
一个CEO，两个移动端，三个后端，四个前端。&lt;br /&gt;
类比于建筑行业就是：&lt;br /&gt;
一个包工头，两个推车工，三个水泥工，四个砌砖工。&lt;/p&gt;

&lt;p&gt;因为人少，所以虽然说是前后端分离，&lt;br /&gt;
但是干的活交叉性很强，&lt;br /&gt;
后端们也会热情地参与像&lt;a href=&#34;https://www.zhihu.com/question/53625757&#34;&gt;&amp;lt;如何评价真阿当的文章：《2016年前端技术观察》？&amp;gt;&lt;/a&gt;这样的热闹讨论中。&lt;br /&gt;
（主要是吃瓜）&lt;/p&gt;

&lt;p&gt;还有一次吃饭的时候，产品经理Allen来问问题，&lt;br /&gt;
说&lt;code&gt;数据库里我们主动营销的有效时间是哪个字段啊？&lt;/code&gt;&lt;br /&gt;
（没错我们产品经理也要知道数据库的表结构…）&lt;br /&gt;
津铭（后端）表示懵逼，有点忘了要看看代码，&lt;br /&gt;
然后靖哥哥（前端）说&lt;code&gt;主动营销是ManualActivity&lt;/code&gt;，&lt;br /&gt;
场面顿时有点尴尬…&lt;/p&gt;

&lt;h2 id=&#34;后端面试&#34;&gt;后端面试&lt;/h2&gt;

&lt;p&gt;年前谢老板表示我们今年工程师的quota是30个，&lt;br /&gt;
招满就不招了。&lt;br /&gt;
于是最近在&lt;code&gt;金三银四&lt;/code&gt;的招聘季里，&lt;br /&gt;
我们每天都在勤劳地面试…&lt;/p&gt;

&lt;p&gt;但是后端范围实在是太广了，&lt;br /&gt;
两个同为后端工程师的人，&lt;br /&gt;
工作内容不一定有很多交集。&lt;br /&gt;
前几天还面了个Oracle的兄弟，&lt;br /&gt;
我问他：&lt;code&gt;你们前后端怎么通讯的？&lt;/code&gt;&lt;br /&gt;
他说：&lt;code&gt;Oracle自己做的WebService&lt;/code&gt;&lt;br /&gt;
我：&lt;code&gt;……那，你们用的什么框架？&lt;/code&gt;&lt;br /&gt;
他说：&lt;code&gt;Java，我们Oracle自己写的一套…&lt;/code&gt;&lt;br /&gt;
我：&lt;code&gt;……那，数据库呢？呃，Oracle？&lt;/code&gt;&lt;br /&gt;
他：&lt;code&gt;对…&lt;/code&gt;&lt;br /&gt;
我不甘心：&lt;code&gt;MySQL和Redis用么？&lt;/code&gt;&lt;br /&gt;
他：&lt;code&gt;不用……&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我跟津铭前几天在地铁上还调侃道：&lt;br /&gt;
&lt;code&gt;假如我们面试是面写SQL语句的话，估计Allen能过，谢老板就会挂了……&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;于是种种原因综合在一起，&lt;br /&gt;
我们今年后端一个offer都没能发出去…&lt;br /&gt;
&lt;em&gt;叹气&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;面试是双向选择的事情，&lt;br /&gt;
双向选择都是看缘分的，&lt;br /&gt;
缘分需要等待，&lt;br /&gt;
我们就只好继续等待了。&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;我这篇文章是发在公众号和博客上的，&lt;br /&gt;
有可能你是在遥远的地方，&lt;br /&gt;
或者遥远的时间后看到的。&lt;br /&gt;
但是假如你对我司的岗位有兴趣，&lt;br /&gt;
非常欢迎直接投递简历，&lt;br /&gt;
或者跟我聊聊。&lt;/p&gt;

&lt;p&gt;作为一个工程师，&lt;br /&gt;
我十分喜欢现在的工作，&lt;br /&gt;
并且我想把这个机会介绍给你 :)&lt;br /&gt;
而且我司除了研发，&lt;br /&gt;
还有产品/运营/销售等很不错的岗位噢。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XYZ问题</title>
      <link>https://liriansu.com/posts/2017-02-22-x-y-z-question/</link>
      <pubDate>Wed, 22 Feb 2017 22:22:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-02-22-x-y-z-question/</guid>
      <description>&lt;p&gt;有的时候我们想解决的是X问题，&lt;br /&gt;
但是我们却纠结于Y问题，&lt;br /&gt;
最后却陷入了Z问题的陷阱里。&lt;/p&gt;

&lt;h2 id=&#34;简单的xyz问题&#34;&gt;简单的XYZ问题&lt;/h2&gt;

&lt;p&gt;大部分时候，&lt;br /&gt;
我们的大脑会线性地思考问题，&lt;br /&gt;
有的时候我们想的越多，&lt;br /&gt;
反而容易陷入问题的陷阱里。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;比如我需要一把指甲刀。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;前天指甲刀还在房间桌子上，但我妈昨天刚整理过桌子。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我记得我妈好像把东西都放书房抽屉里了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;但是书房有好几个抽屉，我想弄清楚指甲刀在哪。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;于是我问我妈：&lt;strong&gt;书房的抽屉里都有些什么啊?&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这个里，&lt;br /&gt;
用XYZ问题去归纳的话，&lt;br /&gt;
X问题就是&lt;strong&gt;指甲刀在哪&lt;/strong&gt;，&lt;br /&gt;
但我问出的Z问题却是&lt;strong&gt;抽屉里都有什么&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;当然了，&lt;br /&gt;
这个例子本身也浅显极端，&lt;br /&gt;
我妈很容易看出只要脑袋好用一些，&lt;br /&gt;
直接问&lt;strong&gt;指甲刀在哪&lt;/strong&gt;就行了。&lt;/p&gt;

&lt;p&gt;但很多时候问题都没那么简单。&lt;/p&gt;

&lt;h2 id=&#34;真实的xyz问题&#34;&gt;真实的XYZ问题&lt;/h2&gt;

&lt;p&gt;我不擅长写网页，&lt;br /&gt;
但是每次我都想试试写网页。&lt;br /&gt;
大概就像那种不能吃辣，&lt;br /&gt;
但还是要吃辣的人一样。&lt;br /&gt;
这种情况下，我就很容易陷入XYZ问题中。&lt;/p&gt;

&lt;p&gt;比如我需要写一个&lt;strong&gt;打字机效果&lt;/strong&gt;出来，&lt;br /&gt;
根据命令行编程的经验，&lt;br /&gt;
我就觉得打字机效果大概可以等同于&lt;strong&gt;每0.5秒更新一次内容&lt;/strong&gt;，&lt;br /&gt;
我又觉得这个大概就等同于&lt;strong&gt;更新内容，等0.5秒再更新&lt;/strong&gt;，&lt;br /&gt;
于是我搜索&lt;strong&gt;JavaScript sleep 0.5 second&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;/(ㄒoㄒ)/&lt;br /&gt;
很可惜，&lt;br /&gt;
这样得到的解决方案会跟我想要的相差很远。&lt;/p&gt;

&lt;p&gt;所以解决XYZ问题最好的办法就是：&lt;br /&gt;
&lt;strong&gt;理清思路，找到X问题，直接解决它。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在这个JavaScript的例子里，&lt;br /&gt;
我们的X问题其实是&lt;strong&gt;JavaScript typewriter effect&lt;/strong&gt;&lt;br /&gt;
（用这个去搜索就能找到很多现成方案了）&lt;/p&gt;

&lt;h2 id=&#34;语文老师说要写作文总结&#34;&gt;语文老师说要写作文总结&lt;/h2&gt;

&lt;p&gt;俗话说&lt;code&gt;话粗理不粗，理粗情意重&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;以后我们遇到问题的时候，&lt;br /&gt;
也可以想一想：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们的X问题是什么？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我们有没有陷入Y问题的坑里？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;解决Z问题有助于解决X问题吗？&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;:)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用GitHub托管静态HTML页面</title>
      <link>https://liriansu.com/posts/2017-02-03-hold-static-html-on-github/</link>
      <pubDate>Fri, 03 Feb 2017 21:59:54 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-02-03-hold-static-html-on-github/</guid>
      <description>&lt;p&gt;这是一篇入门级的技术文章，&lt;br /&gt;
教你怎么在GitHub上托管静态的HTML页面。&lt;/p&gt;

&lt;h2 id=&#34;github项目主页&#34;&gt;GitHub项目主页&lt;/h2&gt;

&lt;p&gt;GitHub有个设定，&lt;br /&gt;
就是&lt;strong&gt;每个项目的gh-pages分支可以通过&lt;code&gt;user-domain/项目名&lt;/code&gt;来访问&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;比如以前我把一些常用的js/css库放到&lt;a href=&#34;https://github.com/LKI/static&#34;&gt;我的static项目下(LKI/static)&lt;/a&gt;，&lt;br /&gt;
该项目下&lt;code&gt;gh-pages&lt;/code&gt;分支的index.html就可以直接通过&lt;a href=&#34;https://liriansu.com/static/&#34;&gt;lki.github.io/static&lt;/a&gt;访问。&lt;/p&gt;

&lt;p&gt;GitHub的这个设定本意是&lt;a href=&#34;https://pages.github.com/&#34;&gt;让每个项目都有自己的主页来展示&lt;/a&gt;，&lt;br /&gt;
不过我们也可以借用这个设定来托管静态HTML页面。&lt;/p&gt;

&lt;h2 id=&#34;托管静态页面&#34;&gt;托管静态页面&lt;/h2&gt;

&lt;p&gt;托管页面的大概步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;拥有自己的GitHub账号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在GitHub上建立一个目录&lt;a href=&#34;https://github.com/new&#34;&gt;(Create new repository)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用git创造该项目下建立&lt;code&gt;gh-pages&lt;/code&gt;分支，提交一个index.html文件&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第3步的命令行版本大概如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /Users/liriansu/new-repo
$ git init                        # 初始化git目录
$ git checkout -b gh-pages        # 新建gh-pages分支，并切换过去
# 跑完上一条命令后，把你的index.html文件放到new-repo文件夹里
$ git add index.html              # 告诉git说index.html要提交了
$ git commit -m &amp;#34;add index.html&amp;#34;  # 提交index.html
$ git remote add origin https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repository&amp;gt;
$ git push -u origin gh-pages     # 推到GitHub服务器上&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后我们就可以在&lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt;上看到刚提交上去的index.html了。&lt;br /&gt;
最后假如你希望在GitHub上搭建个人博客，&lt;br /&gt;
可以参照&lt;a href=&#34;https://liriansu.com/how-this-blog-was-built&#34;&gt;我的搭建方案&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最精简的程序语言：Iota</title>
      <link>https://liriansu.com/posts/2017-01-24-iota-language/</link>
      <pubDate>Tue, 24 Jan 2017 13:07:50 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2017-01-24-iota-language/</guid>
      <description>&lt;p&gt;这门语言，只有两个保留字&lt;a href=&#34;https://en.wikipedia.org/wiki/Reserved_word&#34;&gt;(reserved keyword)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;各种语言的reserved-keyword&#34;&gt;各种语言的reserved keyword&lt;/h2&gt;

&lt;p&gt;今天逛SO的时候发现了这样一个问题：&lt;br /&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/4980766/reserved-keywords-count-by-programming-language&#34;&gt;Reserved keywords count by programming language?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;各语言的保留字数目按从大到小的量大概如下：&lt;/p&gt;

&lt;p&gt;| ANSI COBOL 85 | 357   |&lt;br /&gt;
| JavaScript    | 180   |&lt;br /&gt;
| C#            | 102   |&lt;br /&gt;
| Java          | 50    |&lt;br /&gt;
| Python 3.x    | 33    |&lt;br /&gt;
| C             | 32    |&lt;br /&gt;
| Go            | 25    |&lt;br /&gt;
| Brainfuck     | 8     |&lt;br /&gt;
| iota          | &lt;strong&gt;2&lt;/strong&gt; |&lt;/p&gt;

&lt;p&gt;嗯，Python的保留字果然是少，&lt;br /&gt;
怪不得&lt;a href=&#34;https://news.ycombinator.com/item?id=8241308&#34;&gt;有个笑话是说Python其实是“可执行的伪代码”&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;python is executable pseudocode, while perl is executable line noise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过等等，这个iota是什么语言？&lt;br /&gt;
居然只要两个保留字就可以实现图灵完备了？&lt;/p&gt;

&lt;h2 id=&#34;iota-程序语言&#34;&gt;Iota 程序语言&lt;/h2&gt;

&lt;p&gt;虽然这里我们说Iota是程序语言，&lt;br /&gt;
但其实真要用Iota写可执行的脚本程序还是没那么简单的。&lt;br /&gt;
这里的“程序语言”更大意义上是计算机科学里的图灵完备的解决可计算问题的概念，&lt;br /&gt;
那么首先我们来看Iota的设计概念：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Iota&#34;&gt;Iota on wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;呃，上面那个页面其实是希腊字母里的Iota &lt;code&gt;ι&lt;/code&gt;&lt;br /&gt;
下面这才是iota程序语言：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Iota_and_Jot&#34;&gt;Iota and Jot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wiki上很好地介绍了iota，大概意思（也就是我消化过以后）：&lt;br /&gt;
相对于知名的&lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_calculus&#34;&gt;lambda calculus&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/SKI_combinator_calculus&#34;&gt;SKI combinator calculus&lt;/a&gt;来说，&lt;br /&gt;
Iota和Jot是非常精简的&lt;a href=&#34;https://en.wikipedia.org/wiki/Formal_system&#34;&gt;Formal System&lt;/a&gt;，&lt;br /&gt;
它们的设计初衷就是用尽量少的算子来完成图灵完备的语言。&lt;br /&gt;
简单来说iota只有两个保留字，一个是 &lt;code&gt;*&lt;/code&gt;, 一个是&lt;code&gt;i&lt;/code&gt;，&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt;会结合后面两个iota表达式，而&lt;code&gt;i&lt;/code&gt;会接受表达式&lt;code&gt;x&lt;/code&gt;，返回&lt;code&gt;xSK&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;看完上面一大段可能已经有点晕乎了，&lt;br /&gt;
那么换个角度，我们想象一下iota是怎么被创造出来的吧。&lt;/p&gt;

&lt;p&gt;一群人聚在一起，&lt;br /&gt;
当时已经有了图灵理论，&lt;br /&gt;
有了lambda算子，&lt;br /&gt;
有了functional programming，&lt;br /&gt;
于是有人提了个问题：&lt;br /&gt;
最精简的图灵完备的语言是什么？&lt;br /&gt;
于是&lt;a href=&#34;https://en.wikipedia.org/wiki/Chris_Barker_(linguist)&#34;&gt;Chris Barker&lt;/a&gt;站在一系列已有理论的基础上，&lt;br /&gt;
发明了&lt;a href=&#34;https://en.wikipedia.org/wiki/Iota_and_Jot&#34;&gt;iota&lt;/a&gt;这门语言。&lt;/p&gt;

&lt;h2 id=&#34;ski-算子&#34;&gt;SKI 算子&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SKI_combinator_calculus&#34;&gt;SKI&lt;/a&gt;就是iota发明路上一个很重要的巨人肩膀。&lt;br /&gt;
SKI一共定义了三个算子，分别是&lt;code&gt;S&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt;&lt;br /&gt;
:) 这名字听起来十分简单粗暴，我很喜欢。&lt;br /&gt;
规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SKI以带括号表达式的形式呈现，可以把&lt;code&gt;xy = z&lt;/code&gt;简单理解为&lt;code&gt;函数x接受参数y返回值z&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt;接受一个参数，并返回它，即有&lt;code&gt;Ix = x&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K&lt;/code&gt;接受两个参数，并返回第一个参数，即有&lt;code&gt;Kxy = x&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt;接受三个参数，返回一三参数对二三参数的操作结果，即有&lt;code&gt;Sxyz = xz(yz)&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据以上*玄妙*的定义，神奇的事情发生了 :)&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;SKI&lt;/code&gt;实际上只需要&lt;code&gt;S&lt;/code&gt;和&lt;code&gt;K&lt;/code&gt;算子，&lt;code&gt;I&lt;/code&gt;算子可以用&lt;code&gt;SKK&lt;/code&gt;表示&lt;/strong&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SKKx
= Kx(Kx)      # 根据Sxyz = xz(yz)
= x           # 根据Kxy  = x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而通过SKI，我们可以做很多的事情：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;递归&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;取反&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;布尔逻辑&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上例子可以&lt;a href=&#34;https://en.wikipedia.org/wiki/SKI_combinator_calculus&#34;&gt;去维基看原文: SKI combinator calculus&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;回到iota&#34;&gt;回到iota&lt;/h2&gt;

&lt;p&gt;在SKI之后，&lt;a href=&#34;https://en.wikipedia.org/wiki/Chris_Barker_(linguist)&#34;&gt;Chris Barker&lt;/a&gt;提出了iota算子，&lt;br /&gt;
有 &lt;code&gt;ix = xSK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;所以可以推出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ii
= iSK
= SSKK
= SK(KK)
= SKK &amp;lt;=&amp;gt; I

  i(iI)
= i(ISK)
= i(SK)
= SKSK
= KK(SK)
= K

  iK
= KSK
= S&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:) 瞧，这就是逻辑的魅力。&lt;br /&gt;
我们通过定义一系列很小的基石，&lt;br /&gt;
就能处理整个大厦。&lt;/p&gt;

&lt;p&gt;总而言之，iota在SKI的基础上定义了一个关键的算子，&lt;br /&gt;
再加上&lt;code&gt;*&lt;/code&gt;字符做到程序化地表示，&lt;br /&gt;
从而实现了最精简的程序语言这一目标。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在Mac OSX中用Finder打开特定Path</title>
      <link>https://liriansu.com/posts/2016-12-26-go-to-path-in-osx/</link>
      <pubDate>Mon, 26 Dec 2016 17:01:38 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-26-go-to-path-in-osx/</guid>
      <description>&lt;p&gt;今天终于学到了这个很有用的知识，&lt;br /&gt;
感觉有必要记下来…&lt;/p&gt;

&lt;p&gt;两个方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Terminal中输入&lt;code&gt;open /Users&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Finder中敲&lt;code&gt;Command + Shift + G&lt;/code&gt;，然后输入&lt;code&gt;/Users&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对Mac系统不熟悉的乡下人伤不起啊…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>disqus不稳定，于是我开始用commentit了</title>
      <link>https://liriansu.com/posts/2016-12-22-use-commentit/</link>
      <pubDate>Thu, 22 Dec 2016 20:20:07 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-22-use-commentit/</guid>
      <description>&lt;p&gt;挂在GitHub Pages上的静态博客的评论总是个蛋疼的问题，&lt;br /&gt;
我以前一直都是用&lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt;的，&lt;br /&gt;
但是它总是处于墙于被墙的边缘…&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://liriansu.com/how-this-blog-was-built&#34;&gt;因为&lt;del&gt;自己感觉没那个必要从头搭建博客服务器&lt;/del&gt;懒，于是我直接采用了GitHub Pages。&lt;/a&gt;&lt;br /&gt;
但是由于GitHub Pages是静态页面，所以评论系统就成了问题。&lt;br /&gt;
于是研究了一番以后我用了&lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt;的第三方评论。&lt;/p&gt;

&lt;p&gt;disqus的便利之处在于构建简单，&lt;br /&gt;
我只要去注册一下，加一个&lt;a href=&#34;https://github.com/LKI/lki.github.io/blob/b1c59b15a83fe0e0c9c2af55b15e1d3fa107c551/_includes/comments.html&#34;&gt;comments.template&lt;/a&gt;就可以自动展开成评论页面了。&lt;br /&gt;
但是出于种种原因&lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt;对墙内用户支持的不好。&lt;/p&gt;

&lt;p&gt;而且我又不想用&lt;a href=&#34;https://duoshuo.com/&#34;&gt;多说&lt;/a&gt;，那个看起来无比蠢……&lt;/p&gt;

&lt;p&gt;直到我最近发现了一款黑科技：&lt;a href=&#34;https://commentit.io/getting-started&#34;&gt;Comm(ent|it)&lt;/a&gt;。&lt;br /&gt;
一句话概括它静态评论的原理是：&lt;code&gt;所有的评论会变成Git Commit，push到你的Repository里面去&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;雾草！&lt;br /&gt;
感觉很爽！&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;补充：我们还要在&lt;a href=&#34;https://commentit.io/settings?master=true&amp;amp;group=true&#34;&gt;commentit的配置页面&lt;/a&gt;配一下允许直接提交到master :)&lt;br /&gt;
&lt;br /&gt;&lt;/dt&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;mmentit的配置页面]&lt;a href=&#34;https://commentit.io/settings?master=true&amp;amp;group=true&#34;&gt;commentit-config&lt;/a&gt;配一下允许直接提交到master :)&lt;br /&gt;
&lt;br /&gt;&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:) 所以是时候在本页面下面评论，&lt;br /&gt;
以成为&lt;a href=&#34;https://github.com/LKI/lki.github.io/graphs/contributors&#34;&gt;本博客GitHub项目的Contributor啦~&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用vundle来管理vim插件</title>
      <link>https://liriansu.com/posts/2016-12-18-use-vundle-for-dotvim/</link>
      <pubDate>Sun, 18 Dec 2016 02:22:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-18-use-vundle-for-dotvim/</guid>
      <description>&lt;p&gt;今天把vim插件管理器换成了&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;，&lt;br /&gt;
之前我一直用的是&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;pathogen&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;vim配置&#34;&gt;Vim配置&lt;/h2&gt;

&lt;p&gt;其实我是在实习以后才开始用Vim的，&lt;br /&gt;
当时Justin直接把&lt;a href=&#34;https://github.com/LKI/dotvim&#34;&gt;他的vim配置&lt;/a&gt;给我clone了一份。&lt;br /&gt;
直接用现成的配置大大减缓了Vim的学习曲线，&lt;br /&gt;
而且很快就可以上手用起来了。&lt;br /&gt;
直到现在，我也觉得上手Vim的正确姿势就是找个大腿的配置。&lt;/p&gt;

&lt;p&gt;后来Vim稍微用的多了一些以后，&lt;br /&gt;
我开始尝试自己手动改vimrc来改设置。&lt;br /&gt;
改代码的基础就是看代码/学习代码，&lt;br /&gt;
于是我了解到了&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;pathogen&lt;/a&gt;，&lt;br /&gt;
一个快速添加插件的Vim插件&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;pathogen&#34;&gt;pathogen&lt;/h2&gt;

&lt;p&gt;pathogen的优点就是小巧和直白：&lt;/p&gt;

&lt;p&gt;你只需要添加autoload文件夹，&lt;br /&gt;
配置pathogen的载入，&lt;br /&gt;
就可以自己在预设好的插件目录下任意增删插件了。&lt;/p&gt;

&lt;p&gt;然而实际使用中有几个蛋疼之处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为了方便，我一般会用git submodule来添加插件。&lt;br /&gt;
git submodule不仅有着屎一样的用法，&lt;br /&gt;
它的commit还是固定的，&lt;br /&gt;
于是我经常要手动去更新插件版本。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;因为用了git submodule，删除插件也变得麻烦了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;pathogen&lt;/a&gt;主要是&lt;a href=&#34;https://github.com/tpope&#34;&gt;Tim Pope&lt;/a&gt;写的，&lt;br /&gt;
而这个项目一年内只有三次更新…&lt;br /&gt;
一点也不活跃。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出于灵活度/便携度/活跃度的考虑，&lt;br /&gt;
我决定换个包管理器。&lt;/p&gt;

&lt;h2 id=&#34;vundle&#34;&gt;Vundle&lt;/h2&gt;

&lt;p&gt;于是我就想到了&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;，&lt;br /&gt;
一个看起来很正式的Vim插件管理器。&lt;br /&gt;
它的配置其实也比较简单：&lt;/p&gt;

&lt;p&gt;本地克隆&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;包（可用git submodule），&lt;br /&gt;
配置vimrc，然后在vimrc内写入插件名。&lt;/p&gt;

&lt;p&gt;不过第一次用命令&lt;code&gt;vim +PluginInstall +qall&lt;/code&gt;加载插件的过程可能比较慢。&lt;/p&gt;

&lt;h2 id=&#34;现在的配置&#34;&gt;现在的配置&lt;/h2&gt;

&lt;p&gt;于是鼓捣了一下，&lt;br /&gt;
成功从pathogen换成了vundle。&lt;br /&gt;
dotvim地址在&lt;a href=&#34;https://github.com/LKI/dotvim&#34;&gt;github上&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;题外话：&lt;br /&gt;
第一次了解到&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;的时候，&lt;br /&gt;
我总感觉这有种浓浓的Emacs包管理山寨风，&lt;br /&gt;
于是当时我根本没考虑&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;…&lt;br /&gt;
所以说&lt;strong&gt;技术品味不能充当唯一技术评判标准呀~&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>后端工程师技能树</title>
      <link>https://liriansu.com/posts/2016-12-16-backend-skill-tree/</link>
      <pubDate>Fri, 16 Dec 2016 23:33:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-12-16-backend-skill-tree/</guid>
      <description>&lt;p&gt;我最近打算点专精天赋&lt;code&gt;后端工程师&lt;/code&gt;，&lt;br /&gt;
于是先整理一份后端的技能树，&lt;br /&gt;
然后努力攒天赋点把它给点满。&lt;/p&gt;

&lt;h2 id=&#34;全栈&#34;&gt;全栈&lt;/h2&gt;

&lt;p&gt;前几天我和Joyce聊天讲到“我想写个后端技能树/练级攻略”，&lt;br /&gt;
她疑惑地问我：“你觉得各个端之间要分那么开么？”&lt;br /&gt;
我想了想，说：“呃。。。”（其实也不知道说什么）&lt;/p&gt;

&lt;p&gt;其实关于全栈的争论一直都有，每种意见都有科学之处：&lt;/p&gt;

&lt;p&gt;有人认为&lt;strong&gt;全栈适合小团队，大团队更需要细化分工。&lt;/strong&gt;&lt;br /&gt;
又或者&lt;strong&gt;全栈是个伪命题，因为光一样技术学精学通就要花很大功夫了。&lt;/strong&gt;&lt;br /&gt;
的确，在分工明确的情况下，各项全能的人才反倒是被浪费了，&lt;br /&gt;
更不用说这样的人本来就少。&lt;/p&gt;

&lt;p&gt;也有支持向全栈发展的人认为&lt;strong&gt;新人适合专精一门，牛人始终是全能的。&lt;/strong&gt;&lt;br /&gt;
以及&lt;strong&gt;全栈指的不是语言，而是更基础的知识体系和综合能力。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我其实是蛮羡慕全栈们的，而且我也希望以后某日化身为全栈。&lt;br /&gt;
但我总觉得目前的自己还是太菜了，连一门技艺也不精通，更别提全栈了。&lt;br /&gt;
而且武侠小说里面说得好：&lt;strong&gt;大道相通&lt;/strong&gt;。&lt;br /&gt;
也就是说我学好了一门技艺，想再去理解别的会更有经验，&lt;br /&gt;
即使达不到各项全能，说不定也能做到一精多专呢 :wink:&lt;/p&gt;

&lt;p&gt;嘿嘿，这么说来，写代码学技术和练武还是蛮像的。&lt;br /&gt;
就好像&lt;a href=&#34;https://coolshell.cn/articles/4990.html&#34;&gt;程序员练级攻略&lt;/a&gt;一样，打怪升级穿女装嘛~&lt;/p&gt;

&lt;h2 id=&#34;后端技能树&#34;&gt;后端技能树&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;程序基础&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;算法和数据结构&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;语言基础&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;框架和库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;抽象逻辑能力&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;英语能力&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;代码风格&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;debug&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;计算机网络&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;网络协议&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;代理服务器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;网络安全&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;权限&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;RESTful&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数据与数据库&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;关系型数据库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;非关系型数据库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;性能优化&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;数据挖掘&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CAP&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;团队协作&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;沟通能力&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;版本控制&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;任务管理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;项目管理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;开源项目&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;装逼与装菜逼&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;架构设计&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;高拓展&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;高并发&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;高可用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;高血压（并不）&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;价值观&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;学习意愿&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;热爱技术&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;心态开放&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是我心中的技能树，最后一节严格意义上不是技能树，&lt;br /&gt;
但我也觉得这些品质对一个后端工程师是有益的。&lt;br /&gt;
欢迎各种建议/评论 :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git新手教程</title>
      <link>https://liriansu.com/posts/2016-09-19-git-first-lesson/</link>
      <pubDate>Mon, 19 Sep 2016 16:04:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-09-19-git-first-lesson/</guid>
      <description>&lt;p&gt;这是一篇针对技术小白们的Git科普文章。&lt;br /&gt;
本文主要介绍版本控制工具Git的基本概念，&lt;br /&gt;
以及init,status,add,commit,reset,log几个基本命令。&lt;/p&gt;

&lt;h2 id=&#34;什么是git&#34;&gt;什么是Git&lt;/h2&gt;

&lt;p&gt;在十多年前，有好多程序员一起开发Linux系统。&lt;br /&gt;
这么多人一起写一个软件，他们就需要一个好的软件来&lt;br /&gt;
控制代码的版本/回滚代码/并行开发。&lt;br /&gt;
最开始他们是用的一个现成的软件叫*BitKeeper*，&lt;br /&gt;
但是&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git&#34;&gt;后来BitKeeper居然想收费！于是他们就开发出了Git…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;没错，Git就是一个由程序员自己写的，&lt;br /&gt;
写给程序员自己用的，用来管理写程序的工具。&lt;br /&gt;
本文想做的就是把&lt;a href=&#34;https://en.wikipedia.org/wiki/Git&#34;&gt;Git&lt;/a&gt;这个*程序员用的*工具&lt;br /&gt;
介绍给不懂写代码，但是要写文档，改文档的同学。&lt;/p&gt;

&lt;p&gt;（所以本文的具体栗子是在Windows系统下进行）&lt;/p&gt;

&lt;h2 id=&#34;什么是版本控制&#34;&gt;什么是版本控制&lt;/h2&gt;

&lt;p&gt;举个栗子：&lt;br /&gt;
今天要写毕业论文，我打开了Microsoft Word， 写完了第一章。&lt;br /&gt;
但我突然有一个更好的想法，我决定重写第一章。&lt;br /&gt;
于是我按下了&lt;strong&gt;撤销&lt;/strong&gt;按钮，Word文档&lt;strong&gt;回滚&lt;/strong&gt;到了最开始的地方。&lt;br /&gt;
我坐了三分钟，我发现其实还是我之前的第一章写的比较好。&lt;br /&gt;
于是我按下了&lt;strong&gt;重复&lt;/strong&gt;按钮，Word文档又&lt;strong&gt;回滚&lt;/strong&gt;到了我写完第一章的时候了。&lt;/p&gt;

&lt;p&gt;上面的栗子，其实就是一个典型的*版本控制*场景。&lt;br /&gt;
而Git作为版本控制的工具，做的就是文件级别的*版本控制*。&lt;/p&gt;

&lt;p&gt;接下来我们直接来试用Git。&lt;/p&gt;

&lt;h2 id=&#34;安装git&#34;&gt;安装Git&lt;/h2&gt;

&lt;p&gt;首先我们到&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git的官方网站（英文）&lt;/a&gt;&lt;br /&gt;
去下载最新的windows版本的git：&lt;br /&gt;
（当你用浏览器打开这个网站的时候，就应该有下载框弹出来了）&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;https://git-scm.com/download/win&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载完毕以后打开，大部分设定用默认的就行了，&lt;br /&gt;
几个关键选项图示如下：&lt;/p&gt;

&lt;p&gt;安装选项：&lt;br /&gt;
&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/inst_opt.jpg&#34; alt=&#34;options&#34; /&gt;&lt;/p&gt;

&lt;p&gt;安装命令：&lt;br /&gt;
&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/inst_cmd.jpg&#34; alt=&#34;commands&#34; /&gt;&lt;/p&gt;

&lt;p&gt;换行符操作：&lt;br /&gt;
&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/inst_le.jpg&#34; alt=&#34;line-endings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;安装完毕后我们在任意菜单右键，&lt;br /&gt;
应该就可以看到“Git Bash Here”的选项。&lt;br /&gt;
并且打开以后我们输入&lt;code&gt;git version&lt;/code&gt;&lt;br /&gt;
可以查看到git版本号信息，&lt;br /&gt;
这就说明我们安装成功了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git version
git version 2.9.0.windows.1
（具体版本可能会随时间变化，但这并不重要）&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;新手上路&#34;&gt;新手上路&lt;/h2&gt;

&lt;h3 id=&#34;打开git-bash&#34;&gt;打开Git Bash&lt;/h3&gt;

&lt;p&gt;git是一个命令行工具。&lt;br /&gt;
（虽然也有图形界面，但那个太蠢了，&lt;br /&gt;
我们还是学习更好用的敲命令吧）&lt;/p&gt;

&lt;p&gt;首先我们打开一个文件夹，&lt;br /&gt;
比如我打开的是D:\git-first-lesson\XML这个文件夹，&lt;br /&gt;
然后&lt;code&gt;右键菜单 -&amp;gt; Git Bash Here&lt;/code&gt;，&lt;br /&gt;
就打开了一个这样的Git Bash：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_version.jpg&#34; alt=&#34;hint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再顺便说一下几个基本的命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: list的简写，可以&lt;strong&gt;查看当前文件夹下有哪些文件（夹）&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: ChangeDirectory，可以&lt;strong&gt;更换目录&lt;/strong&gt;。&lt;code&gt;cd ..&lt;/code&gt;就是回到上一层目录&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git目录&#34;&gt;Git目录&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;想了解一个目录的状态，就使用&lt;code&gt;git status&lt;/code&gt;命令&lt;/strong&gt;。&lt;br /&gt;
我们可以试着跑一下这个命令，但是Git会报这样的错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status
fatal: Not a git repository (or any of the parent directories): .git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个错误的字面意思是“错误：你并没有把当前目录（或者任何父目录纳入git版本控制）”。&lt;/p&gt;

&lt;p&gt;所以&lt;strong&gt;为了将一个文件夹纳入版本控制，我们要使用&lt;code&gt;git init&lt;/code&gt;命令&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git init
Initialized empty Git repository in D:/git-first-lesson/XML/.git/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示信息表示git已经初始化完成。&lt;br /&gt;
这个过程实际上是git在&lt;strong&gt;当前目录&lt;/strong&gt;新建了一个&lt;strong&gt;.git&lt;/strong&gt;文件夹：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/dot_git.jpg&#34; alt=&#34;dotgit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后我们再跑&lt;code&gt;git status&lt;/code&gt;就可以查看到当前目录状态了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_status.jpg&#34; alt=&#34;git-st&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;控制文件&#34;&gt;控制文件&lt;/h3&gt;

&lt;p&gt;在我们初始化完git以后，git默认是把所有文件帮我们找出来的。&lt;br /&gt;
但是假如我们并不希望修改.wmv音频文件，.bak备份文件，Data数据文件夹怎么办？&lt;br /&gt;
或者假如我们只想版本控制.xml文件该怎么做呢？&lt;/p&gt;

&lt;p&gt;git在这里给我们留了一个控制文件，叫&lt;strong&gt;.gitignore&lt;/strong&gt;文件。&lt;br /&gt;
我们可以&lt;code&gt;右键 -&amp;gt; 新建文本文件 -&amp;gt; 重命名为.gitignore&lt;/code&gt;或者直接在git-bash里面跑&lt;code&gt;touch .gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/touch.jpg&#34; alt=&#34;touch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;假如我们想无视wmv文件，bak文件和Data文件夹，我们修改.gitignore内容为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*.wmv
*.bak
Data\&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假如我们只想控制xml文件，我们可以修改为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*
!*/
!.gitignore
!*.xml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后我们可以再跑一次&lt;code&gt;git status&lt;/code&gt;查看文件夹状态：&lt;br /&gt;
（在本例中我的.gitignore只控制了xml文件）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_ignore.jpg&#34; alt=&#34;ignore&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;设置-查看断点&#34;&gt;设置/查看断点&lt;/h3&gt;

&lt;p&gt;Git最激动人心的地方到了：&lt;br /&gt;
有了前面的准备工作，&lt;br /&gt;
我们现在已经可以设置断点，&lt;br /&gt;
并且再未来随时回滚到任意断点了！&lt;/p&gt;

&lt;p&gt;我们直接看看怎么设置断点（Commit）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;git add .&lt;/code&gt;来记录当前目录的改动。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git commit -m &amp;lt;commit_message&amp;gt;&lt;/code&gt;来设置断点。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如我们输入&lt;code&gt;git add .&lt;/code&gt;和&lt;code&gt;git commit -m &amp;quot;My First Commit&amp;quot;&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_commit.jpg&#34; alt=&#34;commit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好了！断点设置成功！接下来我们可以查看我们设置的断点：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们可以使用&lt;code&gt;git log&lt;/code&gt;来查看断点，或者是&lt;code&gt;git log --oneline&lt;/code&gt;来查看断点的简略信息。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如这样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_log.jpg&#34; alt=&#34;log&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看修改内容与回滚&#34;&gt;查看修改内容与回滚&lt;/h3&gt;

&lt;p&gt;到目前为止，我们所做的操作都不会修改当前文件夹。&lt;br /&gt;
我们只是将*整个文件夹当前的状态*纳入了版本控制。&lt;/p&gt;

&lt;p&gt;接下来我们要做的就是改动文件了。&lt;br /&gt;
比如我们稍微改动了&lt;code&gt;Struture\recurse.xml&lt;/code&gt;这个文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;git diff&lt;/code&gt;可以查看当前文本和上一版本的区别。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_diff.jpg&#34; alt=&#34;diff&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;git reset --hard HEAD&lt;/code&gt;可以回到上一个断点。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/git_first_lesson/git_reset.jpg&#34; alt=&#34;reset&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;在本篇新手教程中，我们稍微介绍了版本控制和Git。&lt;br /&gt;
在安装完Git以后，我们接触到了以下命令：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示Git版本&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列出当前文件夹内文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd data&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;更改目录（进入data目录）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;回到上一层目录&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看Git状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初始化（使当前文件夹纳入版本控制）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;touch .gitignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新建.gitignore文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使所有未被ignore的文件加入版本控制&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git commit -m &amp;quot;My first commit&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置断点（准确的说是生成一个提交）(commit)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看历史&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看简单历史&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看当前文件夹状态与最近断点的区别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reset --hard HEAD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;回滚至上一断点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在之后的教程中，我们会更加深入地接触Git。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>You can live your dream</title>
      <link>https://liriansu.com/posts/2016-06-27-you-can-live-your-dream/</link>
      <pubDate>Mon, 27 Jun 2016 23:06:13 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-06-27-you-can-live-your-dream/</guid>
      <description>&lt;p&gt;前阵子我偶然看到了一个非常棒的关于&lt;strong&gt;梦想&lt;/strong&gt;的视频&lt;/p&gt;

&lt;p&gt;视频地址在&lt;a href=&#34;https://www.youtube.com/watch?v=N5NF01Rpepo&#34;&gt;Youtube&lt;/a&gt;上 （需翻墙）&lt;/p&gt;

&lt;p&gt;总之各种意义上都是很正能量的一个视频，&lt;br /&gt;
台词如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don’t know what that dream is that you have. I don’t care how disappointing it might have been, as you’ve been working toward that dream. But that dream your holding in your mind that it’s possible that some of you already know that it’s hard. It’s not easy. It’s hard changing your life. That in the process working on your dreams you are going to incur a lot of disappointment, a lot of failure, a lot of pain. At moments when you‘re going to doubt yourself and say God why is this happening to me. I’m just trying to take care of my children, and my mother. I’m not trying to steal or rob from anybody. How does this have to happen to me?&lt;br /&gt;
For those of you all that have experienced some hardships don’t give up on your dream. The rough times are going to come, but they are not going to stay. They have come to pass.&lt;/p&gt;

&lt;p&gt;Greatness is not this wonderful, esoteric, illusive god-like feature that only the special among us will ever taste. It’s something that truly exists in all of us.&lt;/p&gt;

&lt;p&gt;It’s very important for you to believe that you are the one.&lt;br /&gt;
Most people they raise a family, they earn a living and then they die. They stop growing, they stop working on themselves, they stop stretching, and they stop pushing themselves. Then a lot of people like to complain but they don’t want to do anything about their situation. And most people don’t work on their dreams, why? One is because of fear, that they have fear of failure. What if things are worked out? And the fear of success, what if they do and i can’t handle it. These are not risk-takers.&lt;/p&gt;

&lt;p&gt;You spend so much time with other people, you spend so much time trying to get people to like you. You know other people more than you know yourself. You studied them you know about them, you want to hang out like them, you want to be just like them. And you know what you’ve invested so much time on them, you don’t know who you are. I challenge you to spend time by yourself.&lt;/p&gt;

&lt;p&gt;It’s necessary, that you get the losers out of your life, if you want to live your dream. But people who are running towards their dreams, life has a special kind of meaning.&lt;/p&gt;

&lt;p&gt;When you become the right person, what you do is start separating yourself from other people. You begin to have a sudden uniqueness. As long as you follow on other people, as long as your being a copycat you will never ever be the best copycat in the world. But you will be the best you could be. I challenge you to define your value.&lt;/p&gt;

&lt;p&gt;That everybody won’t see it, that everybody won’t join you, that everybody won’t have the vision. It is necessary to know that. That you are an uncommon breed.&lt;br /&gt;
It is necessary that you align yourself with people and attract people into your business, who are hungry. People who are unstoppable and unreasonable, people who are refusing to live life just as it is and who want more. The people that are living their dreams. are seeking winners to attach themselves to. The people that are living their dreams, are the people that know that if it’s gonna happen it’s up to them.&lt;/p&gt;

&lt;p&gt;If you want to be more successful. If you want to have and do stuff you’ve never done before, I’m asking you to invest in you. To invest in you!&lt;/p&gt;

&lt;p&gt;Someone’s opinion of you, does not have to become your reality. That you don’t have to go through life being a victim. And even though you face disappointments, you have to know within yourself, that I can do this, even if no one else sees it for me, I must see it for myself.&lt;/p&gt;

&lt;p&gt;This is what I believe and I am willing to die for it. Period.&lt;/p&gt;

&lt;p&gt;No matter how bad it is or how bad it gets, I’m going to make it.&lt;/p&gt;

&lt;p&gt;I want to represent an idea. I want to represent possibilities.&lt;/p&gt;

&lt;p&gt;Some of you right now, you want to go to the next level. I want a council, I want to be an Engineer, I want to be a Doctor. Listen to me. You can’t get to that level. You can’t get to that level economically where you want to be, until you start investing in your mind. You’re not reading books. I’m challenging you all to go to conference. I dare you to invest time. I dare you to be alone. I dare you to spend an hour to get to know yourself.&lt;/p&gt;

&lt;p&gt;When you become who you are, when you become the person you are created to be, designed to be who you were designed to be. When you become an individual. What you do is take yourself and start separating yourself from other people.&lt;/p&gt;

&lt;p&gt;I’m challenging you to get to a place where people do not like you or do not even bother you anymore. Why? Because you are not concerned about trying to make them happy. Because your trying to blow it, you’re trying to get to the next level. I need you to invest in your mind.&lt;/p&gt;

&lt;p&gt;If you’re still talking about your dreams. If you’re still talking about your goals. But you have not done anything yet, just take the first step.&lt;/p&gt;

&lt;p&gt;You can make your parents proud. You can make your school proud. You can touch millions of lives and the world will never be the same again because you came this way. Don’t let anybody steal your dream. Don’t let nobody steal your dream! After we face rejection and a “NO”, we have a meeting and no one shows up, or somebody said you can count on me, and they don’t come through. What if we had that type of attitude that cause repossess, nobody believes in you, you’ve lost again and again and again. The lights are cut off, but you still are looking at your dream, reviewing it everyday and saying to yourself, IT’S NOT OVER UNTIL I WIN!&lt;/p&gt;

&lt;p&gt;You can live your dream.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>URL中参数编码不正确的解决方案</title>
      <link>https://liriansu.com/posts/2016-06-07-encoding-in-url/</link>
      <pubDate>Tue, 07 Jun 2016 21:29:39 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-06-07-encoding-in-url/</guid>
      <description>&lt;p&gt;说是说解决方案，其实并没有解决这个问题 :wink:&lt;/p&gt;

&lt;h2 id=&#34;url中参数编码不正确&#34;&gt;URL中参数编码不正确&lt;/h2&gt;

&lt;p&gt;最近在做Python-Scrapy的爬虫，用Tornado写了一个服务器程序，&lt;br /&gt;
但是遇到的问题是&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tornado无法解析URL的中文&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如说样例小程序如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tornado.ioloop &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; IOLoop
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tornado.web &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; tw

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SampleHandler&lt;/span&gt;(tw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RequestHandler):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self, path):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(path)

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Application([(&lt;span style=&#34;color:#e6db74&#34;&gt;ur&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/(.*)&amp;#39;&lt;/span&gt;, SampleHandler)])
app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listen(&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;)
IOLoop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是访问&lt;code&gt;https://localhost:8080/浮云计算&lt;/code&gt;却只能得到&lt;code&gt;æµ®äº�è®¡ç®�&lt;/code&gt;这样一坨东西&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;长话短说，这是因为&lt;code&gt;URL中文解码不正确&lt;/code&gt;的原因导致的。&lt;br /&gt;
所以我们利用&lt;a href=&#34;https://tool.chinaz.com/tools/urlencode.aspx&#34;&gt;站长工具url编码&lt;/a&gt;手动替换中文访问即可：&lt;/p&gt;

&lt;p&gt;访问&lt;code&gt;https://localhost:8080/%e6%b5%ae%e4%ba%91%e8%ae%a1%e7%ae%97&lt;/code&gt;就可以得到&lt;code&gt;浮云计算&lt;/code&gt;啦。&lt;/p&gt;

&lt;h2 id=&#34;详细原因&#34;&gt;详细原因&lt;/h2&gt;

&lt;p&gt;一开始我怀疑是因为字符串没用utf8编码，&lt;br /&gt;
于是尝试了不同的转换方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;self.write(str(path))
self.write(unicode(path))
self.write(path.encode(&amp;#39;utf8&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些常识不是报错，就是根本没变化。&lt;/p&gt;

&lt;p&gt;最终我找到了&lt;a href=&#34;https://ju.outofmemory.cn/entry/62161&#34;&gt;一个前人的经验&lt;/a&gt;，里面是这么讲的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;看来你是不知道在浏览器地址栏手动输入中文和在页面上一个的链接的编码处理方式是不同的。。。。&lt;br /&gt;
打个比方，在windows系统上，你在FF地址栏输入&amp;rdquo;&lt;a href=&#34;https://localhost/中文.html?m=汉语&amp;quot;，这里的“中文”两字的编码是utf8（这一点应该是跟浏览器设置相关），而“汉语”则是gbk，跟操作系统相关（大部分中国人的windows应该都是cp936，也就是gbk）。&#34;&gt;https://localhost/中文.html?m=汉语&amp;quot;，这里的“中文”两字的编码是utf8（这一点应该是跟浏览器设置相关），而“汉语”则是gbk，跟操作系统相关（大部分中国人的windows应该都是cp936，也就是gbk）。&lt;/a&gt;&lt;br /&gt;
如果你是通过某个页面访问这个链接的，则所有字符的编码都是跟页面的编码相关。&lt;br /&gt;
在IE上也是一样。&lt;br /&gt;
所以，我觉得还是打消在浏览器地址栏输入中文这个想法吧，要不然你要解码两次，而且还要保证页面上的编码跟系统一样，不然无法保证手动输入和页面点击的兼容性。。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;喔，原来是因为&lt;code&gt;URL解码方式完全取决于浏览器和操作系统&lt;/code&gt;，也就是说&lt;code&gt;中文有可能以GBK来编码&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;怪不得Python/Tornado认不出来了！&lt;/p&gt;

&lt;p&gt;所以解决方案就是我们手动去解码一次啦~&lt;/p&gt;

&lt;p&gt;（或者Python3 XD）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Windows上安装pip</title>
      <link>https://liriansu.com/posts/2016-05-18-install-pip-on-windows/</link>
      <pubDate>Wed, 18 May 2016 21:39:29 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-05-18-install-pip-on-windows/</guid>
      <description>&lt;p&gt;pip是python的包管理工具，在Linux上安装比较简单，&lt;br /&gt;
但是在Windows上安装就稍微麻烦些。&lt;/p&gt;

&lt;h2 id=&#34;安装python&#34;&gt;安装Python&lt;/h2&gt;

&lt;p&gt;首先我们到Python的官网&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;下载Python&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;值得注意的是Python2和Python3非常不同，&lt;br /&gt;
里面的差别可能有半个Java和JavaScript的差别之大。&lt;br /&gt;
我习惯使用的版本是Python2.7。&lt;/p&gt;

&lt;p&gt;下载安装完以后，打开&lt;br /&gt;
&lt;code&gt;我的电脑右键菜单&amp;gt;属性&amp;gt;高级系统设置&amp;gt;环境变量&lt;/code&gt;&lt;br /&gt;
设置好Path：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/python_path.jpg&#34; alt=&#34;Python Path&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后我们打开命令提示符，就可以进python的shell啦：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; python
Python 2.7.11 on win32
Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.
&amp;gt;&amp;gt;&amp;gt; exit()&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装pip&#34;&gt;安装pip&lt;/h2&gt;

&lt;p&gt;我们使用&lt;a href=&#34;https://bootstrap.pypa.io/get-pip.py&#34;&gt;get-pip.py&lt;/a&gt;一键安装pip，&lt;br /&gt;
先把它右键另存为下载到某个地方。&lt;/p&gt;

&lt;p&gt;然后我们以管理员身份打开命令提示符，&lt;br /&gt;
直接用python运行该文件就可以安装pip了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python get-pip.py&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Windows上运行pip的方式是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m pip

Usage:
  C:\CodeEn\Python27\python.exe -m pip &amp;lt;command&amp;gt; [options]

Commands:
  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  list                        List installed packages.
  show                        Show information about installed packages.
  search                      Search PyPI for packages.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion
  help                        Show help for commands.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装c-for-python&#34;&gt;安装C++ for Python&lt;/h2&gt;

&lt;p&gt;Windows上很多Python库都依赖于C++ 9.0，&lt;br /&gt;
点击下面链接下载并安装：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=44266&#34;&gt;Microsoft Visual C++ Compiler for Python 2.7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后我们就可以使用&lt;code&gt;python -m pip install&lt;/code&gt;来安装新的module啦&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://pip.pypa.io/en/stable/installing/&#34;&gt;PyPA网站的Python安装指引&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4750806/how-do-i-install-pip-on-windows&#34;&gt;StackOverflow - How do I install pip on windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>如何用Windows命令行统计文件行数</title>
      <link>https://liriansu.com/posts/2016-04-15-how-to-calculate-file-lines-in-windows/</link>
      <pubDate>Fri, 15 Apr 2016 22:13:15 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-04-15-how-to-calculate-file-lines-in-windows/</guid>
      <description>&lt;p&gt;今天要统计文件行数，可是手边恰好没有Linux环境。&lt;/p&gt;

&lt;h2 id=&#34;linux-统计代码行数&#34;&gt;Linux 统计代码行数&lt;/h2&gt;

&lt;p&gt;在 Linux 下这是一件很简单的事情：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.py&amp;#34;&lt;/span&gt; | wc -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这行语句就可以很简单地统计出当前目录下所有py后缀文件的行数了。&lt;/p&gt;

&lt;h2 id=&#34;windows-统计代码行数&#34;&gt;Windows 统计代码行数&lt;/h2&gt;

&lt;p&gt;这时我们就不能用cmd而是应当用PowerShell啦。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_PowerShell&#34;&gt;Powershell&lt;/a&gt;是Windows基于.NET开发的一个自动化配置框架。&lt;br /&gt;
（其实就是新版命令行）&lt;/p&gt;

&lt;p&gt;然后我们可以输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;    dir .\ -Recurse *.py | Get-Content | Measure-Object&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们就可以看到输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Count : 1253&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示当前目录下py后缀文件一共有1253行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么我讨厌吸烟</title>
      <link>https://liriansu.com/posts/2016-03-31-why-i-hate-smoking/</link>
      <pubDate>Thu, 31 Mar 2016 16:27:34 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-31-why-i-hate-smoking/</guid>
      <description>&lt;p&gt;这两周读完了&lt;a href=&#34;https://www.pubu.com.tw/ebook/-%E4%B8%AD%E5%9C%8B%E7%85%99%E8%8D%89%E7%9A%84%E6%94%BF%E6%B2%BB%E7%89%88%E5%9C%96-23518&#34;&gt;《中国烟草的政治版图》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;烟和毒品&#34;&gt;烟和毒品&lt;/h2&gt;

&lt;p&gt;上周的某一天，跟往常一样，上班路上全是吸烟的年轻男性。&lt;br /&gt;
捂着鼻子走到了公司，我觉得非常不能理解：&lt;br /&gt;
为什么烟不算是毒品呢？&lt;/p&gt;

&lt;p&gt;大部分吸烟的人是做不到想戒烟就戒烟的，&lt;br /&gt;
而且就算是外力阻挠的情况下（家人反对，公共场合禁止），&lt;br /&gt;
这些烟民还是找机会吸烟。&lt;br /&gt;
既然这种精神上的依赖已经算得上是成瘾，&lt;br /&gt;
那么为什么我们不会认为香烟是毒品呢？&lt;/p&gt;

&lt;p&gt;于是我稍微地去搜了一下，主流的观点是这样子的：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;知乎上的回答&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/smoking_zhihu.jpg&#34; alt=&#34;zhihu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reddit上的回答&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/smoking_reddit.jpg&#34; alt=&#34;reddit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看来香烟的问题中外都有，总结下来有三点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;毒品这个词更大意义上是法律用词，在英文里drug也有药品的意思。&lt;br /&gt;
所以“香烟是毒品”这个说法本身不够严谨。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从久远的时候，烟草就是一个行业了，到了现在烟草行业更是发展壮大。&lt;br /&gt;
作为国家的一大经济来源，而且为了照顾烟民的情绪，全面禁烟是不现实的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;个人角度来看，烟瘾仅仅会伤害个人身体，不会危害社会。&lt;br /&gt;
酗酒会撞车，大麻会致幻，吸烟只会死得早。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;中国烟草的政治版图&#34;&gt;中国烟草的政治版图&lt;/h2&gt;

&lt;p&gt;为了更严谨地看问题，以及努力完成&lt;a href=&#34;https://liriansu.com/my-reading-list-2016&#34;&gt;今年的读书计划&lt;/a&gt;，&lt;br /&gt;
我去读了李成写的&lt;a href=&#34;https://www.pubu.com.tw/ebook/-%E4%B8%AD%E5%9C%8B%E7%85%99%E8%8D%89%E7%9A%84%E6%94%BF%E6%B2%BB%E7%89%88%E5%9C%96-23518&#34;&gt;《中國煙草的政治版圖》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这本偏论文向的书里面主要讲述了中国烟草的现状，&lt;br /&gt;
国家角度上吸烟可能带来的健康影响，&lt;br /&gt;
对中国香烟从上到下的分析，&lt;br /&gt;
以及从政治角度治理这些问题的建议。&lt;/p&gt;

&lt;p&gt;整本书学术意味很浓厚，&lt;br /&gt;
基本没有小说性（也不应该有），&lt;br /&gt;
不过读起来还是津津有味，&lt;br /&gt;
比如里面有些数据非常引人深思：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/smoke_to_death.jpg&#34; alt=&#34;smoke to death&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;我们都要多运动&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;正如作者所说，&lt;br /&gt;
一方面情况在变得更好，&lt;br /&gt;
中国烟民的比例在下降，&lt;br /&gt;
而且民众也自下而上地觉醒了健康的意识。&lt;br /&gt;
但一方面情况也不是那么好……&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/smoking_bad.jpg&#34; alt=&#34;bad&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;作者说&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;我的愿景&#34;&gt;我的愿景&lt;/h2&gt;

&lt;p&gt;我一开始讨厌烟，完全是觉得烟味太呛人。&lt;/p&gt;

&lt;p&gt;在庆幸家里没有人吸烟的同时，&lt;br /&gt;
我也逐渐觉得香烟更是一个社会问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于国家，香烟产业是税收大户。&lt;br /&gt;
但是从公众健康来说，禁烟可以提高国民身体素质，&lt;br /&gt;
避免吸烟所带来的医疗支出。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于中国社会，吸上等烟是身份的体现，而且烟本身作为礼品是普适性的。&lt;br /&gt;
（假如我们在所有香烟包装上印很吓人的肺癌图片…）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于低收入烟民，一包香烟就能在精神层面上让他们满足。&lt;br /&gt;
（所付出的仅仅是金钱和一点点寿命。）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以理性地说，吸烟的确有害健康，但是总有人会不在意自己的或是他人的健康。&lt;br /&gt;
随着社会的发展，烟草带来的问题也会逐渐暴露，&lt;br /&gt;
但这也为解决烟草问题提供了一个契机。&lt;/p&gt;

&lt;p&gt;总的来说，我讨厌烟味，讨厌吸烟带来的健康问题，&lt;br /&gt;
我希望大家都可以活得更久。&lt;/p&gt;

&lt;p&gt;希望世界越来越好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu系统X packages can be updated的解决方案</title>
      <link>https://liriansu.com/posts/2016-03-16-ubuntu-package-can-be-updated-solution/</link>
      <pubDate>Wed, 16 Mar 2016 16:14:19 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-16-ubuntu-package-can-be-updated-solution/</guid>
      <description>&lt;p&gt;一个关于Ubuntu系统的小技巧。&lt;/p&gt;

&lt;h2 id=&#34;x-package-can-be-updated&#34;&gt;x package can be updated&lt;/h2&gt;

&lt;p&gt;最近登录系统的时候，&lt;br /&gt;
系统老是提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    x packages can be updated.
    y updates are security updates.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;噢，就像AppStore上面的小红点一样，&lt;br /&gt;
更新一下就好了，&lt;br /&gt;
于是敲下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    apt-get update
    apt-get upgrade&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是更新完以后，系统还是提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    x packages can be updated.
    y updates are security updates.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=1222909&#34;&gt;在查阅了资料以后&lt;/a&gt;才知道，&lt;br /&gt;
&lt;code&gt;update&lt;/code&gt; + &lt;code&gt;upgrade&lt;/code&gt;不能更新完所有的软件包，&lt;br /&gt;
还要跑一条命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    apt-get dist-upgrade&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个有一点点小烦人的提示就不见了。&lt;/p&gt;

&lt;h2 id=&#34;motd&#34;&gt;MOTD&lt;/h2&gt;

&lt;p&gt;ubuntu开机时显示的这个Message叫&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Motd_(Unix)&#34;&gt;MOTD(Message of the day)&lt;/a&gt;，&lt;br /&gt;
很多公司会让系统管理员定制自己服务器的MOTD。&lt;/p&gt;

&lt;p&gt;Ubuntu系统里，MOTD的脚本默认放在&lt;code&gt;/etc/update-motd.d&lt;/code&gt;下，&lt;br /&gt;
我们所看到的&lt;code&gt;x packages can be updated&lt;/code&gt;就是由&lt;br /&gt;
&lt;code&gt;/etc/update-motd.d/90-updates-available&lt;/code&gt;这个脚本提示的。&lt;/p&gt;

&lt;p&gt;所以我们想彻底去掉这个提示的话，&lt;br /&gt;
可以把&lt;code&gt;/etc/update-motd.d/90-updates-available&lt;/code&gt;这个文件删掉（不推荐）。&lt;/p&gt;

&lt;p&gt;同理，我们也可以定制一下自己的MOTD。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ubuntu下更新全部包命令为&lt;code&gt;aptget update &amp;amp;&amp;amp; apt-get upgrade &amp;amp;&amp;amp; apt-get dist-upgrade&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;系统一开始显示的Message叫&lt;a href=&#34;https://en.wikipedia.org/wiki/Motd_(Unix)&#34;&gt;MOTD&lt;/a&gt;，默认放在&lt;code&gt;/etc/update-motd.d&lt;/code&gt;下。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>创建GitHub项目主页</title>
      <link>https://liriansu.com/posts/2016-03-15-create-github-repository-page/</link>
      <pubDate>Tue, 15 Mar 2016 21:19:53 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-15-create-github-repository-page/</guid>
      <description>&lt;p&gt;最近终于偶然了解了怎么给GitHub项目建主页。&lt;/p&gt;

&lt;h2 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h2&gt;

&lt;p&gt;GitHub Pages是一个让用户很方便托管项目网页在GitHub的服务。&lt;br /&gt;
比如&lt;a href=&#34;https://liriansu.com/how-this-blog-was-built&#34;&gt;我这个博客就是GitHub Pages建成的&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但是这样只能托管一个名为&lt;br /&gt;
&lt;a href=&#34;https://github.com/LKI/lki.github.io&#34;&gt;GitHub用户名 + &amp;ldquo;.github.com&amp;rdquo;的项目(lki.github.io)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;假如我还有一个项目也想用域名访问怎么办呢？&lt;/p&gt;

&lt;p&gt;于是我机智的我&lt;a href=&#34;https://github.com/LKI/lki.github.io/commit/86d73353e4b8f93ea7e759fb0d2f47b5d9ad8904&#34;&gt;用&lt;code&gt;git submodule&lt;/code&gt;来解决了这个问题&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;git-submodule&#34;&gt;Git Submodule&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt;其实是一个很蠢的解决方案：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为了保证最新的内容，父项目要随着子项目更新而更新。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这个做法其实是hack了jekyll build，感觉不是特别靠谱。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule&#34;&gt;remove a git submodule&lt;/a&gt;实在是太痛苦了！&lt;br /&gt;
所以没有必要就不要加git submodule啦。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;更好的解决方案&#34;&gt;更好的解决方案&lt;/h2&gt;

&lt;p&gt;前几天在逛&lt;a href=&#34;https://zhangwenli.com/&#34;&gt;羡辙学姐&lt;/a&gt;的GitHub的时候发现了&lt;a href=&#34;https://github.com/Ovilia/cv/issues/3&#34;&gt;这么一条Issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;里面这么说道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;主页用 CNAME 指向 zhangwenli.com 后，ovilia.github.io 将跳转到 zhangwenli.com&lt;br /&gt;
其他项目 xxx 的 gh-pages 分支将会自动对应到 ovilia.github.io/xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;喔！原来GitHub会默认地把some-repo项目的“gh-pages”分支映射到some-one.github.com/some-repo下面去。&lt;/p&gt;

&lt;p&gt;所以我们就可以用新建分支把&lt;a href=&#34;https://github.com/LKI/mymenu&#34;&gt;菜谱&lt;/a&gt;映射到&lt;a href=&#34;https://liriansu.com/mymenu&#34;&gt;/mymenu&lt;/a&gt;了。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GitHub项目可以建一个&lt;code&gt;gh-pages&lt;/code&gt;分支来映射到github.com下面的github.com/repository-name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多看多学多试.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如不是绝妙的hack就要追求best practice.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>为什么我不招你当我的员工</title>
      <link>https://liriansu.com/posts/2016-03-02-this-is-why-i-dont-give-you-a-job-zh-cn/</link>
      <pubDate>Wed, 02 Mar 2016 13:41:04 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-03-02-this-is-why-i-dont-give-you-a-job-zh-cn/</guid>
      <description>&lt;p&gt;匈牙利有一个叫Andor Jakab的人写了一篇很犀利的文章，&lt;br /&gt;
然后匈牙利网络评论就炸了。&lt;/p&gt;

&lt;h2 id=&#34;译者说&#34;&gt;译者说&lt;/h2&gt;

&lt;p&gt;在2011年，匈牙利有个叫Andor Jakab的人发了篇文章，&lt;br /&gt;
叫&lt;a href=&#34;https://jakabandor.blog.hu/2011/07/27/tolem_ezert_nem_kapsz_munkat&#34;&gt;Tőlem ezért nem kapsz munkát&lt;/a&gt;（现在链接已失效）。&lt;/p&gt;

&lt;p&gt;后来由于这篇文章影响太大，在Facebook上有上万个赞，&lt;br /&gt;
他就自己把文章翻译成英文，在这里：&lt;br /&gt;
&lt;a href=&#34;https://andorjakab.blog.hu/2012/01/06/this_is_why_i_don_t_give_you_a_job&#34;&gt;This is why I don&amp;rsquo;t give you a job&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;虽然离Andor Jakab发这篇文章的时候已经有好几年了，&lt;br /&gt;
&lt;em&gt;而且文章可能比较偏激…&lt;/em&gt;&lt;br /&gt;
但是其中讲的道理还是令人深思的。&lt;br /&gt;
译文如下：&lt;/p&gt;

&lt;h2 id=&#34;为什么我不招你当我的员工&#34;&gt;为什么我不招你当我的员工&lt;/h2&gt;

&lt;p&gt;我能雇12个员工，给每个人税后760欧的工资，但是我偏不。&lt;br /&gt;
首先你能在我公司里的一间很棒的办公室里工作。&lt;br /&gt;
其次我们不做电话营销，也不是诈骗公司。&lt;br /&gt;
你的工作是正经活，也要求你有很高的职业素养。&lt;br /&gt;
你将会每天工作八小时，每周干五天。&lt;br /&gt;
我会合法地雇用你，帮你交足税和社保。&lt;br /&gt;
这样的工作我能雇12个人，但是我偏不。&lt;br /&gt;
我来解释为什么。&lt;/p&gt;

&lt;h3 id=&#34;我不会雇女员工&#34;&gt;我不会雇女员工&lt;/h3&gt;

&lt;p&gt;原因很简单：女人生小孩。&lt;br /&gt;
另外我也没有权利问她想不想生小孩。&lt;br /&gt;
假如我能问，而且她回答了，&lt;br /&gt;
理论上她也可以欺骗我，或是后来改主意了。&lt;/p&gt;

&lt;p&gt;别理解错了，我对*女人生小孩*没有任何意见。&lt;br /&gt;
我也是这么出生的，我的小孩也是这么出生的。&lt;br /&gt;
我不会招女员工是因为：当她怀孕以后，&lt;br /&gt;
她就有三年产假，而且我不能解雇她。&lt;br /&gt;
假如她要生二胎，就一共有六年的假期了。&lt;/p&gt;

&lt;p&gt;当然，工作还是要做的，&lt;br /&gt;
所以在这长长的产假里，我得再招一个人替她干活。&lt;br /&gt;
但是我不能在她产假的时候解雇她，我也不能在她回来以后解雇她。&lt;br /&gt;
所以我只能把那个一直在替她干活的人给解雇掉。&lt;br /&gt;
而且当一个女员工度完产假以后，&lt;br /&gt;
法律要求我得把她的工资提升到她现在职位应有的数目上。&lt;br /&gt;
我还得把她产假那几年的的年假给她补上。&lt;br /&gt;
于是等她回来工作的时候，她还会有2到4个月的带薪年假。&lt;/p&gt;

&lt;h3 id=&#34;我也不会雇50岁以上的员工&#34;&gt;我也不会雇50岁以上的员工&lt;/h3&gt;

&lt;p&gt;并不是因为我对这些最有经验的员工有意见。&lt;br /&gt;
我不雇他们，是因为他们很快就到了&lt;a href=&#34;https://en.wikipedia.org/wiki/Protected_class&#34;&gt;保护年龄&lt;/a&gt;。&lt;br /&gt;
然后我就被他们套住了，就像我被女员工套住了一样。&lt;br /&gt;
在保护年龄里，你不能解雇他们。&lt;br /&gt;
所以我还是得给足薪水，即使他们干的不怎么样或者马马虎虎。&lt;br /&gt;
我不能解雇这些被法律保护的员工，但总得有个人来把事情做好，&lt;br /&gt;
所以我还是得再雇一个人。&lt;br /&gt;
我对法律保护他们没有任何意见，但是我不会雇佣他们。&lt;/p&gt;

&lt;h3 id=&#34;我只会雇佣25到30岁的男员工&#34;&gt;我只会雇佣25到30岁的男员工&lt;/h3&gt;

&lt;p&gt;雇佣他们其实也是很冒险的。&lt;br /&gt;
因为没有正当理由的话（比如我自己收入不足，或者我不喜欢他们的工作态度这些都不是正当理由），我是没有权利解雇他们的。&lt;br /&gt;
我直接解雇他们的话很有可能要上法庭，也很有可能是他们胜诉。&lt;br /&gt;
不过这个风险我能接受。&lt;/p&gt;

&lt;h3 id=&#34;你拿到的是730欧-我却要出1572欧&#34;&gt;你拿到的是730欧，我却要出1572欧&lt;/h3&gt;

&lt;p&gt;| 你的税后收入 ||| 你的税前收入 ||| 我要出的钱 ||| 比值 |&lt;br /&gt;
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|||&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|||&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|||&amp;mdash;&amp;mdash;|&lt;br /&gt;
| € 185        |||  € 238       |||  € 306     ||| 165%   |&lt;br /&gt;
| € 227        |||  € 306       |||  € 393     ||| 173%   |&lt;br /&gt;
| € 322        |||  € 458       |||  € 589     ||| 183%   |&lt;br /&gt;
| € 408        |||  € 612       |||  € 786     ||| 193%   |&lt;br /&gt;
| € 479        |||  € 765       |||  € 982     ||| 205%   |&lt;br /&gt;
| € 570        |||  € 917       |||  € 1178    ||| 207%   |&lt;br /&gt;
| &lt;strong&gt;€ 760&lt;/strong&gt;    |||&lt;strong&gt;€ 1223&lt;/strong&gt;    |||&lt;strong&gt;€ 1572&lt;/strong&gt;  |||&lt;strong&gt;207%&lt;/strong&gt;|&lt;br /&gt;
| € 950        |||  € 1529      |||  € 1965    ||| 207%   |&lt;/p&gt;

&lt;p&gt;这是根据www.nettober.com 薪水计算器得来的2011年最新的数据。&lt;br /&gt;
如你所见，我的公司要出1572欧才能付得起你760欧的收入。&lt;br /&gt;
要把这个接近两倍的比值给降下来的唯一方法是：&lt;br /&gt;
我付你更少的薪水。&lt;br /&gt;
不过我不会用更少的薪水来雇用你，&lt;br /&gt;
因为我觉得少于760欧的薪水很难让你活的体面。&lt;br /&gt;
你会感到压抑，不开心，然后影响你自己、我的公司、甚至我。&lt;br /&gt;
所以我不会以低于这个价格的薪水来雇佣任何人的。&lt;/p&gt;

&lt;h3 id=&#34;只有匈牙利的法律这么蠢&#34;&gt;只有匈牙利的法律这么蠢&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/hungary_tax.jpg&#34; alt=&#34;tax-chart&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上面那张图出自Deloitte。&lt;br /&gt;
如你所见，国家拿走了你一半多的薪水。&lt;br /&gt;
我付了一千五百多欧，你却只能拿到不到一半，这也太蠢了吧。&lt;br /&gt;
更别提那些拿着基本工资的人却跟你享受着一样好的医保。&lt;/p&gt;

&lt;p&gt;我也认为一个35岁的员工每年应该有25天的年假。&lt;br /&gt;
这意味着这年假对应的一个月的工作还需要有个人来完成。&lt;br /&gt;
所以假如我需要12个员工的劳动的话，我得雇佣13个人来抵消假期。&lt;/p&gt;

&lt;h3 id=&#34;尽管困难重重-我还是愿意雇佣你的&#34;&gt;尽管困难重重，我还是愿意雇佣你的&lt;/h3&gt;

&lt;p&gt;我是一个勇敢的企业家。企业家都要拥抱风险。&lt;br /&gt;
所以我会把我的房子卖了，住到一个租的房间里。&lt;br /&gt;
我希望我的房子能卖到90000欧的高价，&lt;br /&gt;
然后我就可以勇敢地创业。&lt;br /&gt;
假如最终我创业失败的话（创业好像基本上都会失败），&lt;br /&gt;
嗯，我会坚强地不哭的 :)&lt;/p&gt;

&lt;p&gt;我的公司会提供让客户满意的服务，一个好的办公场所是必需的。&lt;br /&gt;
我会雇13个人，因为我需要12个人的劳动力（有一个是来顶年假的）。&lt;br /&gt;
我们14个人（算上我）将会在158平米装修良好的办公室里工作。&lt;br /&gt;
因为租金大概是10欧每平米，再算上每平米3.5欧的设备支出，&lt;br /&gt;
在办公场地上的支出就是每个月2133欧。&lt;/p&gt;

&lt;h3 id=&#34;根据计算-我每个月的支出如下&#34;&gt;根据计算，我每个月的支出如下&lt;/h3&gt;

&lt;p&gt;|办公场地|2133欧|&lt;br /&gt;
|薪水|13 x 1572欧 = 20436欧|&lt;br /&gt;
|其他支出（会计、营销之类的）| 3058欧|&lt;br /&gt;
|共计|25627欧|&lt;/p&gt;

&lt;p&gt;每个月支出这么大，听起来蛮吓人的对吧？&lt;br /&gt;
无论是淡季、旺季，夏天没什么生意的时候、圣诞节不用干什么活的时候，&lt;br /&gt;
无论我们盈利多少，我每个月的支出就是这么多。&lt;/p&gt;

&lt;p&gt;平均来看，我们公司每个月顶多提供1000小时的服务。&lt;br /&gt;
所以为了收支平衡，我需要把服务的价格定在：&lt;br /&gt;
25627欧 / 1000小时 = 25欧/小时。&lt;br /&gt;
但收支平衡是不够的，我也需要盈利。&lt;/p&gt;

&lt;p&gt;我不是个很贪心的人，毕竟挣钱很难。&lt;br /&gt;
为了保持20%左右的盈利率，我的定价将会是30欧/小时。&lt;br /&gt;
这意味着算上增值税就是37.5欧元每小时。&lt;br /&gt;
我不在乎那点零头，所以买我们服务的客户每小时要付37欧。&lt;/p&gt;

&lt;p&gt;这37欧里面，7欧直接给了国家，剩下的30才是我们的收入。&lt;br /&gt;
我是个乐观的人。&lt;br /&gt;
我们的营销将会引爆市场，我的计划天衣无缝。&lt;br /&gt;
我们每个月肯定能卖掉1000小时的服务。&lt;br /&gt;
生意兴隆，员工们全部都努力工作，我也很满意。&lt;/p&gt;

&lt;p&gt;这样我的公司每个月的收入就会有 1000 x 30欧 = 30000欧。&lt;/p&gt;

&lt;p&gt;除去支出，公司的利润会有4373欧。&lt;br /&gt;
我会给自己发2446欧的税前工资，算上其他部分公司就要支出3144欧。&lt;br /&gt;
税后我能拿到1521欧，基本上是我员工的两倍。&lt;br /&gt;
所以再除去我的工资，公司的利润（税前）就是1229欧。&lt;br /&gt;
此外，公司税还要122欧，本地经营税要600欧（按公司总收入的2%收）。&lt;br /&gt;
最后，公司账上每个月就只剩507欧了。&lt;/p&gt;

&lt;p&gt;这么看来我自己每个月能赚1521欧，但是别忘了，&lt;br /&gt;
为了开公司我把我90000欧的房子给卖了。&lt;br /&gt;
我还得租间房（每个月租金至少要300欧），&lt;br /&gt;
要不我就没地方住了…&lt;br /&gt;
我平时也会比较节约，不乱花钱，&lt;br /&gt;
我夫人也会工作赚钱。&lt;br /&gt;
我甚至没什么时间去花钱，&lt;br /&gt;
因为我会比我的员工更努力工作，&lt;br /&gt;
每天工作12小时，包括周末。&lt;/p&gt;

&lt;p&gt;这样子我每个月就能存900欧，&lt;br /&gt;
100个月以后我就能再买个90000欧的房子。&lt;br /&gt;
所以我大概需要9年来回本。&lt;br /&gt;
9年以后我就不需要勒紧裤腰带来过日子了，&lt;br /&gt;
不需要付租金，也不需要存很多钱。&lt;br /&gt;
我可以过欧洲人的生活了。&lt;/p&gt;

&lt;p&gt;处于这样的考虑——我希望你能理解——我并不是很想把我的房子卖了然后创业开公司。&lt;/p&gt;

&lt;h3 id=&#34;但出于4个原因-我绝对不会这么创业&#34;&gt;但出于4个原因，我绝对不会这么创业&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有些在小房间里非法竞争的对手提供同样的服务，但他们每小时只收9欧。&lt;br /&gt;
他们只收钱不记账，更别提交什么增值税了。&lt;br /&gt;
他们也不用负责。没有担保人，名义上他们不做任何事情，名义上他们甚至还不是一间公司。&lt;br /&gt;
他们不需要租办公室，请会计。&lt;br /&gt;
他们只需要每天工作5小时，然后就可以赚1000欧。&lt;br /&gt;
他们还会嘲笑我这月薪760欧的工作，因为我这的员工还得准时上班，按时按质按量完成工作，&lt;br /&gt;
还不能欺骗顾客（假如我的员工欺骗了顾客，就会被炒鱿鱼）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;竞争对手还会污蔑我的公司。&lt;br /&gt;
我将会背上贪得无厌、黑心商人的骂名，&lt;br /&gt;
毕竟看起来别人定价9欧的服务，我却要37欧。&lt;br /&gt;
我会成为善良的匈牙利人民的敌人，&lt;br /&gt;
而我“诚实”的竞争对手，要价只不过我要价的四分之一。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;很多员工来我的公司只是为了学习商业机密和抢走客户。&lt;br /&gt;
他们会信誓旦旦地保证“同样的服务，四分之一的价格”。&lt;br /&gt;
在抢走了足够多的客户资源以后，他们还会故意搞砸他们的工作，好让我提出解雇他们。&lt;br /&gt;
于是他们就把我告上法庭，说我非法解雇他们，然后他们就胜诉了。&lt;br /&gt;
同时，他们还在赚我以前辛苦谈好的客户的钱。&lt;br /&gt;
而且，他们还会在各大论坛注册小号，说自己以前在XX公司工作过，&lt;br /&gt;
那公司不仅服务很贵，而且质量也很差。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上面这些所有诉苦都没任何实际作用，没人会关心我究竟怎么样。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基本上这就是我不招员工的原因了。&lt;br /&gt;
而且我认为那些创业经验丰富的企业家，&lt;br /&gt;
也会因为这样的原因不招员工。&lt;br /&gt;
所以这就是为什么越来越多的人找不到工作，&lt;br /&gt;
于是经济越来越低迷，税收也会变少。&lt;br /&gt;
好的工作越来越少，社会福利越来越差。&lt;br /&gt;
最终我们的社会救济就会变得跟集中营一样糟糕。&lt;/p&gt;

&lt;h3 id=&#34;只有满足这些条件-我才会招你当员工&#34;&gt;只有满足这些条件，我才会招你当员工&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只要我想，我随时随刻都能解雇你&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如增值税低一些，只收20%，最好是只收15%&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如国家“只”收30%的个人所得税&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如高收入不再意味着高税收&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假如国家反腐有力，而不是惩罚正经公司&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除非满足了这些条件，否则我是不会招你当员工的。&lt;br /&gt;
除非国家在各方面都剔除了腐败，我是不会创业的，也就不会提供工作机会了。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>读博客和写博客</title>
      <link>https://liriansu.com/posts/2016-02-29-read-blogs-to-write-blogs/</link>
      <pubDate>Mon, 29 Feb 2016 13:27:52 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-29-read-blogs-to-write-blogs/</guid>
      <description>&lt;p&gt;我最近把&lt;a href=&#34;https://www.raychase.net/category/recommended&#34;&gt;四火的唠叨&lt;/a&gt;里的推荐文章都看完了。&lt;/p&gt;

&lt;h2 id=&#34;读博客&#34;&gt;读博客&lt;/h2&gt;

&lt;p&gt;我很喜欢读别人的博客，&lt;br /&gt;
尤其是跟着timeline一篇一篇地往下读。&lt;/p&gt;

&lt;p&gt;读博客的时候不仅了解到&lt;a href=&#34;https://www.raychase.net/aboutme&#34;&gt;四火&lt;/a&gt;一开始是一个华为的软件工程师，&lt;br /&gt;
后来到了亚马逊。&lt;br /&gt;
更是看到了&lt;a href=&#34;https://www.raychase.net/3196&#34;&gt;他在刚工作时的苦逼生活，还有办公室政治&lt;/a&gt;。&lt;br /&gt;
不长的几篇博文，&lt;br /&gt;
可以学习到前辈们几年的经验浓缩。&lt;/p&gt;

&lt;p&gt;就像前阵子把&lt;a href=&#34;https://shell909090.org/blog/%E7%AE%80%E5%8E%86&#34;&gt;shell909090&lt;/a&gt;的博客给读完了。&lt;br /&gt;
&lt;em&gt;吐槽一句：shell909090的“简历”页面倒更加像“关于”页面&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;看着比自己更早&lt;del&gt;出道&lt;/del&gt;工作也更厉害的前辈，&lt;br /&gt;
就会有种类似鸣人看着自来也的感觉：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/cest_tama_la_vie.jpg&#34; alt=&#34;some-thoughts&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;写博客&#34;&gt;写博客&lt;/h2&gt;

&lt;p&gt;以前我也写博客，不过更多是儿女情长的事情。&lt;br /&gt;
没有技术博客的积攒（当初自己也并不想积攒）。&lt;/p&gt;

&lt;p&gt;直到去年某一天看博客的时候，看到&lt;a href=&#34;https://en.wikipedia.org/wiki/Jeff_Atwood&#34;&gt;Jeff Atwood&lt;/a&gt;写的一句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In 2004 I began this blog. I don&amp;rsquo;t mean to be overly dramatic, but it changed my life. Everything that comes after was made possible by this blog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;听起来很感慨的样子，于是顺着链接读完了&lt;a href=&#34;https://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/&#34;&gt;他的感慨&lt;/a&gt;。&lt;br /&gt;
Jeff觉得“虽然每篇博客都不长，但是持之以恒就改变了写博客的人”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877707709970c-pi.png&#34; alt=&#34;me-on-web&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;一些链接&#34;&gt;一些链接&lt;/h2&gt;

&lt;p&gt;最后推荐几个我觉得很不错的博客：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.codinghorror.com/&#34;&gt;StackOverFlow创始人Jeff Atwood的博客 codinghorror.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/&#34;&gt;陈皓的博客 coolshell.cn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://taosay.net&#34;&gt;道哥的blog taosay.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://shell909090.org/blog/&#34;&gt;shell909090.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.raychase.net/category/recommended&#34;&gt;四火的唠叨 raychase.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lucida.me/&#34;&gt;lucida.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.qiukeke.com/&#34;&gt;大舒&amp;rsquo;s wiki qiukeke.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;希望有一天我也能出现在别人的推荐链接里 :D&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的VR初体验</title>
      <link>https://liriansu.com/posts/2016-02-27-my-first-vr-experience/</link>
      <pubDate>Sat, 27 Feb 2016 21:08:19 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-27-my-first-vr-experience/</guid>
      <description>&lt;p&gt;前阵子手机更新成了Android 6.0，&lt;br /&gt;
我照常到Gplay上看看有什么新App，&lt;br /&gt;
于是看到了一个Google Cardboard。&lt;/p&gt;

&lt;h2 id=&#34;vr&#34;&gt;VR&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;VR&lt;/strong&gt;，即&lt;strong&gt;Virtual Reality&lt;/strong&gt;，&lt;strong&gt;虚拟现实&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在一些科幻电影里面，我们会看到主角头戴头盔，&lt;br /&gt;
进入了虚拟的却栩栩如生的世界。&lt;br /&gt;
又或者是主角脑后插管，&lt;br /&gt;
通过电流刺激脑部，&lt;br /&gt;
进入了虚拟的却栩栩如生的世界。&lt;/p&gt;

&lt;p&gt;这就是&lt;strong&gt;VR虚拟现实&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;因为本身概念上就带着一点娱乐性质，&lt;br /&gt;
&lt;strong&gt;VR&lt;/strong&gt;这个概念近几年都在游戏界很火。&lt;br /&gt;
就比如前几年的体感游戏这个概念，&lt;br /&gt;
其实就带有半VR的性质。&lt;/p&gt;

&lt;h2 id=&#34;google-cardboard&#34;&gt;Google Cardboard&lt;/h2&gt;

&lt;p&gt;[Google Cardboard][wiki-cardboard]是Google推出的VR平台。&lt;br /&gt;
它的神奇之处就是理论上只需要硬纸板、透镜，&lt;br /&gt;
就可以自行组装一个VR眼镜。&lt;/p&gt;

&lt;p&gt;当然这是理论上，&lt;br /&gt;
不过实际上一副Cardboard眼镜也只要几十RMB。&lt;/p&gt;

&lt;p&gt;这是我前几天在某宝上买的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/vr_glasses.jpg&#34; alt=&#34;vr&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在放入手机以后打开VR apps，&lt;br /&gt;
或者是3D电影就可以直接观看了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/vr_with_phone.jpg&#34; alt=&#34;vr-phone&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vr感想&#34;&gt;VR感想&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;廉价。&lt;br /&gt;
廉价意味着普及，普及就可以改变生活方式。&lt;br /&gt;
可以想象以后的饭桌上家长就会斥责小孩：&lt;br /&gt;
“吃饭就别带头盔了…”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;改变。&lt;br /&gt;
世界上每一项新的技术都会带来改变，&lt;br /&gt;
从铁器到蒸汽到互联网。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VR技术还有很大的提升空间。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;相关推荐&#34;&gt;相关推荐&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.samples.apps.cardboarddemo&#34;&gt;Google Cardboard的App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.nivalvr.inmind&#34;&gt;App: InMind VR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.hihill.link&#34;&gt;App: Lost Kismet&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《1984》读后感</title>
      <link>https://liriansu.com/posts/2016-02-18-thoughts-on-1984/</link>
      <pubDate>Thu, 18 Feb 2016 22:12:54 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-18-thoughts-on-1984/</guid>
      <description>&lt;p&gt;看完了《1984》的第一感想就是：这本书比我想象中要短不少。&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;《1984》的故事发生在架空的20世纪，&lt;br /&gt;
一个普通的男主Winston在一个政治高压的国家里发生的故事。&lt;/p&gt;

&lt;p&gt;在一段动荡以后，世界分成了三个国家。&lt;br /&gt;
Winston所在的国家叫Oceania，Oceania是由the Party领导的。（原文）&lt;/p&gt;

&lt;p&gt;the Party的领导人叫Big Brother，&lt;br /&gt;
整个国家到处都贴着Big Brother的大幅照片，&lt;br /&gt;
照片下面是一行大字：&lt;br /&gt;
Big Brother is watching you.&lt;/p&gt;

&lt;h2 id=&#34;关于书的感想&#34;&gt;关于书的感想&lt;/h2&gt;

&lt;p&gt;看这本书实在是太有即视感了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Big Brother.&lt;br /&gt;
书里面Big Brother是一个虚构的人物，他是the Party统治权力的化身。&lt;br /&gt;
我脑海中想象的Big Brother海报是类似于美国征兵的Sam大叔那样的，&lt;br /&gt;
虽然笑容和善，但是充满压迫感。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;政治高压。&lt;br /&gt;
跟Mia介绍完这本书的简介以后，Mia很敏锐地问我：&lt;br /&gt;
“很像在讽刺苏联诶，这书是冷战时候出版的么？”&lt;br /&gt;
的确，这本书是1949年出版，&lt;a href=&#34;https://en.wikipedia.org/wiki/Cold_War&#34;&gt;冷战&lt;/a&gt;是1947~1991年。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;合成词。&lt;br /&gt;
《1984》里面用了大量的合成词（至少我认为是合成的），&lt;br /&gt;
比如the Party对人民的三个要求：&lt;br /&gt;
crimestop, blackwhite, doublethink.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;三个词&#34;&gt;三个词&lt;/h2&gt;

&lt;p&gt;书里解释了一下这三个词的意思：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;crimestop: 国家公民所想的应该都是美好的事物，不能有任何不好的思想。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;blackwhite: 我们的敌人指鹿为马就是错的，但是我们的组织指鹿为马肯定是为了我们好。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;doublethink: 有的时候一件事情是对的，但是这件事情的反面也是对的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在书里，the Party就主要依据着这三个原则统治人民。&lt;/p&gt;

&lt;p&gt;我觉得这是作者非常有意思的一个想法：&lt;br /&gt;
做到这三点，人民就不会存在不可控的想法了，&lt;br /&gt;
而the Party希望大家的想法都是可控的。&lt;/p&gt;

&lt;p&gt;就像书里主角问他一个朋友：&lt;br /&gt;
“把大家的想法都抹杀掉，对组织有什么好处呢？”&lt;/p&gt;

&lt;p&gt;他的朋友回答他：&lt;br /&gt;
“你是一个人，你会死，但是当你成为了组织的一部分时，你就永生了。&lt;br /&gt;
道理跟剪头发一样，虽然人失去了一部分，但是总体还是活着。&lt;br /&gt;
这就是权力，永生的权力。”&lt;/p&gt;

&lt;p&gt;看到这里，我不禁想到《辛德勒的名单》里面的一段对话：&lt;br /&gt;
“你可以轻而易举地处决一个集中营的人，但这不是权力。&lt;br /&gt;
真正的权力，是你把刀架在别人脖子上时，可以说：‘我宽恕你’。&lt;br /&gt;
这才是真正的权力。”&lt;/p&gt;

&lt;h2 id=&#34;最后&#34;&gt;最后&lt;/h2&gt;

&lt;p&gt;不知道这本书的中译是怎么翻译的呢，有机会得去看一看。ツ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的2016书单</title>
      <link>https://liriansu.com/posts/2016-02-15-my-reading-list-2016/</link>
      <pubDate>Mon, 15 Feb 2016 11:07:57 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-02-15-my-reading-list-2016/</guid>
      <description>&lt;p&gt;过年的时候有一个小契机，让我可以督促自己定下一个比往年要长的书单。&lt;/p&gt;

&lt;h2 id=&#34;小契机&#34;&gt;小契机&lt;/h2&gt;

&lt;p&gt;年后我在朋友圈里看到了这么一幅图：&lt;/p&gt;

&lt;p&gt;“一个赞一本书，一年读完。”&lt;/p&gt;

&lt;p&gt;这很棒嘛，于是我也发了这么一条状态：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/book_per_like.jpg&#34; alt=&#34;book per like&#34; /&gt;&lt;/p&gt;

&lt;p&gt;很好，今年要读73本书。&lt;/p&gt;

&lt;p&gt;这怎么可能嘛！&lt;/p&gt;

&lt;h2 id=&#34;我的书单&#34;&gt;我的书单&lt;/h2&gt;

&lt;p&gt;其实也不是不可能，&lt;br /&gt;
比如把天龙八部算成八部……&lt;/p&gt;

&lt;p&gt;毕竟不积跬步无以至千里，&lt;br /&gt;
我先整理了一个书单，&lt;br /&gt;
打算按顺序这么读下来：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1984&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ANSI Common Lisp&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;阿加莎克里斯蒂&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;悲惨世界&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;白板编程浅谈&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;编程珠玑&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Code Complete 2 (Eng. Edition)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Computer System Engineering&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;创业时，我们在知乎聊什么&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;触动人心 - 设计优秀的iphone应用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重新定义团队：谷歌如何工作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重构&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Docker - 从入门到实践&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Make me Think&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Dune&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;代码整洁之道&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;芙蓉镇&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;鬼吹灯&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Head First设计模式&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;红楼梦&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Java核心技术&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Java编程思想&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;金瓶梅&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Learn Vimscript the Hard Way&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Linux Fundamentals - A Practical Guide to Learning Linux&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Lolita&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;龙枪传奇&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;龙枪编年史&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;穆斯林的葬礼&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;你一生的故事&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;男人来自火星女人来自金星&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Programming Perl&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;平江&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;飘&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;算法导论&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;This is why i don&amp;rsquo;t give you a job&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;天龙八部&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;托马斯微积分&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;UTF-8: The Secret of Character Encoding&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;幽灵代笔&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;隐杀&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Jekyll build fail的解决办法</title>
      <link>https://liriansu.com/posts/2016-01-29-jekyll-build-fail-solution/</link>
      <pubDate>Fri, 29 Jan 2016 23:24:45 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-01-29-jekyll-build-fail-solution/</guid>
      <description>&lt;p&gt;我一直觉得笔记本和台式机&lt;code&gt;jekyll build&lt;/code&gt;出来的结果不一样，&lt;br /&gt;
我猜想是Jekyll的版本不一致。&lt;br /&gt;
结果后来&lt;code&gt;gem update&lt;/code&gt;以后，&lt;br /&gt;
反而&lt;code&gt;jekyll build&lt;/code&gt;还失败了…&lt;/p&gt;

&lt;h2 id=&#34;jekyll-build&#34;&gt;Jekyll build&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jekyll build&lt;/code&gt;的结果不稳定是很难受的，&lt;br /&gt;
尤其每次build完以后&lt;code&gt;git status&lt;/code&gt;看到的一大堆红色文件名。&lt;br /&gt;
而其实大部分都是各种HTML tag位置的差别。&lt;/p&gt;

&lt;p&gt;我怀疑这有可能是两台机器上Jekyll的版本不同导致的，&lt;br /&gt;
于是我就跑了&lt;code&gt;gem update&lt;/code&gt;以同步到最新版本。&lt;/p&gt;

&lt;p&gt;等这个命令跑完以后，我跑&lt;code&gt;jekyll build&lt;/code&gt;遇到的都是&lt;br /&gt;
&lt;code&gt;jekyll build fail&lt;/code&gt;这样的ruby错误了。&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;搜了一下其实很简单，这是因为机子内同时装了多个版本的jekyll，&lt;br /&gt;
而他们又互相冲突所导致的错误。&lt;/p&gt;

&lt;p&gt;（我不禁想问&lt;code&gt;gem update&lt;/code&gt;为什么不会自动卸载旧版本？）&lt;/p&gt;

&lt;p&gt;没错，解决方案就是我们跑一条&lt;code&gt;gem cleanup&lt;/code&gt;卸载旧版本就可以了。&lt;br /&gt;
至少这个解决方案对我的问题是起效的。&lt;/p&gt;

&lt;h2 id=&#34;gem-sources&#34;&gt;Gem sources&lt;/h2&gt;

&lt;p&gt;另：有的时候gem官方源很慢，可以选择用&lt;code&gt;gem sources&lt;/code&gt;命令更换淘宝源。&lt;br /&gt;
（不过淘宝源未必更新那么频繁）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem sources -l
*** CURRENT SOURCES ***

https://rubygems.org/

$ gem sources -r https://rubygems.org/
https://rubygems.org/ removed from sources

$ gem sources -a https://rubygems.org/
https://rubygems.org/ added to sources&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Jekyll-assume demo</title>
      <link>https://liriansu.com/posts/2016-01-28-jekyll-assume-demo/</link>
      <pubDate>Thu, 28 Jan 2016 11:06:56 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2016-01-28-jekyll-assume-demo/</guid>
      <description>&lt;p&gt;For own interest, I extend a markdown rule using Jekyll.&lt;/p&gt;

&lt;h2 id=&#34;grammar&#34;&gt;Grammar&lt;/h2&gt;

&lt;p&gt;If a circle has a radius of {c-r} (20)cm, its circumference would be {c-c} (#c-r * 6.28)cm and its area would be {c-s} (#c-r * #c-r * 3.14)cm².&lt;/p&gt;

&lt;p&gt;Note: For demostrating the grammer I have to add a space between &amp;lsquo;}&amp;rsquo; and &amp;lsquo;(&amp;rsquo;.&lt;br /&gt;
There should be no space between &amp;lsquo;}&amp;rsquo; and &amp;lsquo;(&amp;rsquo;.&lt;/p&gt;

&lt;h2 id=&#34;quick-show&#34;&gt;Quick Show&lt;/h2&gt;

&lt;p&gt;If a circle has a radius of {c-r}(20)cm, its circumference would be {c-c}(#c-r * 6.28)cm and its area would be {c-s}(#c-r * #c-r * 3.14)cm².&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript之路</title>
      <link>https://liriansu.com/posts/2015-12-21-learning-javascript/</link>
      <pubDate>Mon, 21 Dec 2015 17:26:52 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-12-21-learning-javascript/</guid>
      <description>&lt;p&gt;上大学的时候，有一门课是教各种Java的。&lt;br /&gt;
到了布置期末大作业的时候，老师大手一挥：“你们写个电商交易网站就可以了。”&lt;br /&gt;
我们满怀期待地问：“只要写后端？”&lt;br /&gt;
老师说道：“没有前端怎么叫网站？HTML, CSS, JS是每个程序员的基本素养。”&lt;/p&gt;

&lt;h2 id=&#34;痛苦的自学之路&#34;&gt;痛苦的自学之路&lt;/h2&gt;

&lt;p&gt;相对于美术，大部分程序员都更擅长数学。&lt;br /&gt;
我也一样。&lt;/p&gt;

&lt;p&gt;老师布下作业以后，班里大部分人（包括我）都是看W3School自学的。&lt;br /&gt;
于是我们在屏幕上数格子画&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;很快我们意识到，假如每个人都这么折腾的话，作业就完成不了了。&lt;br /&gt;
于是我们组成了小团队，一部分人专门研究前端，一部分人先把逻辑给实现了。&lt;/p&gt;

&lt;p&gt;最终在简陋的Ajax + jQuery下做完了&lt;a href=&#34;https://github.com/Water-Drop/iprs&#34;&gt;那个项目&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h2&gt;

&lt;p&gt;虽然一直是网页苦手，但是由于网页其实是最简单而且最方便的展示手段（比PPT要强）&lt;br /&gt;
于是我默默地&lt;a href=&#34;https://liriansu.com/teampicker&#34;&gt;写些小东西练手&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;对于库的利用使我_暂时_脱离了画&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的束缚，&lt;br /&gt;
可以专注于内容了。&lt;br /&gt;
（于是我又了解了&lt;a href=&#34;https://en.wikipedia.org/wiki/Lorem_ipsum&#34;&gt;Lorem ipsum&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;free-code-camp&#34;&gt;Free Code Camp&lt;/h2&gt;

&lt;p&gt;最近偶然发现了&lt;a href=&#34;https://www.freecodecamp.com/&#34;&gt;这个JS入门网站&lt;/a&gt;&lt;br /&gt;
不禁感慨当时为什么遇上合适的入门指南。&lt;/p&gt;

&lt;p&gt;不过男人四十尚少年嘛，&lt;br /&gt;
就好像关谷说的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;活到老 学到老&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就是这么个道理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>石头剪刀布中的求输策略</title>
      <link>https://liriansu.com/posts/2015-11-08-how-to-lose-in-rock-papar-scissors/</link>
      <pubDate>Sun, 08 Nov 2015 21:01:28 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-11-08-how-to-lose-in-rock-papar-scissors/</guid>
      <description>&lt;p&gt;小时候七八岁，那时候还在看《读者》。&lt;br /&gt;
里面有篇文章讲了一下石头剪刀布中的求胜策略。&lt;/p&gt;

&lt;h2 id=&#34;石头剪刀布&#34;&gt;石头剪刀布&lt;/h2&gt;

&lt;p&gt;先讲一段有用的废话吧。&lt;br /&gt;
一般的博弈情况下，问题都会简化成一个容易判断的模型。&lt;br /&gt;
也就是说虽然反应快的人可以把&lt;code&gt;后手出招&lt;/code&gt;当作必胜策略，&lt;br /&gt;
但是数学模型中一般都会摈弃掉这种可能性。&lt;/p&gt;

&lt;p&gt;（所以看起来数学家会不太喜欢社会学家？）&lt;/p&gt;

&lt;p&gt;在石头剪刀布这个模型里，规则基本上是三点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;双方同时出招，在石头、剪刀、布三个里面选一个。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;石头赢剪刀，剪刀赢布，布赢石头。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;假如平手就再战一局。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种三选一循环互克的游戏，国外也有，叫&lt;a href=&#34;https://en.wikipedia.org/wiki/Rock-paper-scissors&#34;&gt;Rock-Paper-Scissors&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;求胜策略&#34;&gt;求胜策略&lt;/h2&gt;

&lt;p&gt;数学模型往往会假定对局双方都是聪明人，&lt;br /&gt;
显然地，在石头剪刀布中聪明人的策略就是乱出，&lt;br /&gt;
这样双方获胜的概率都是50%。&lt;/p&gt;

&lt;p&gt;不过在真实情况中，两边都是普通人。&lt;br /&gt;
&lt;em&gt;(明明刚才说过要简化模型的=_=)&lt;/em&gt;&lt;br /&gt;
所以我们需要做一个假设：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一般人不会连续两下都做出相同的选择&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也就是说当他这次出的是剪刀的话，下次较大可能不会出剪刀。&lt;br /&gt;
所以只要下局出布就可以不输。&lt;br /&gt;
同理，对方出石头，下局就出剪刀；对方出布，下局就出石头。&lt;/p&gt;

&lt;p&gt;概括地说，这样的假设条件下：&lt;br /&gt;
&lt;strong&gt;对手出什么，下局就出被它克制的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然了，题设本身也是这个策略的弱点。&lt;br /&gt;
假如你的对手头很硬，一直不改变出招，&lt;br /&gt;
那么这个策略就会一败涂地。&lt;/p&gt;

&lt;h2 id=&#34;实战案例&#34;&gt;实战案例&lt;/h2&gt;

&lt;p&gt;和女朋友下楼梯的时候玩起了&lt;code&gt;谁猜拳赢了就走一步&lt;/code&gt;的游戏，&lt;br /&gt;
玩之前火速地想了一下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;女朋友输了不开心，赢了才开心，而且她不开心我也不能开心。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;女朋友在逻辑上不会跟我计较，所以应该不会头很硬地和我勾心斗角。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;女朋友她第一下喜欢出布。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;嗯，于是我采取了&lt;code&gt;先出石头，再出被她克制的选项&lt;/code&gt;&lt;br /&gt;
成功连败了五六局。&lt;/p&gt;

&lt;p&gt;嗯，毕竟求胜策略这种东西，也可以&lt;strong&gt;反着来用&lt;/strong&gt;嘛。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用AUFS和Docker搭建多个私有开发环境</title>
      <link>https://liriansu.com/posts/2015-10-21-build-seperate-env-using-aufs-and-docker/</link>
      <pubDate>Wed, 21 Oct 2015 14:55:24 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-10-21-build-seperate-env-using-aufs-and-docker/</guid>
      <description>&lt;p&gt;文章的开头先提个问题：&lt;br /&gt;
我们平常的工作中，一般都是怎样让每个人都拿到独立开发环境的呢？&lt;/p&gt;

&lt;h2 id=&#34;八仙过海&#34;&gt;八仙过海&lt;/h2&gt;

&lt;p&gt;比如最常见的做法：每人都有自己的电脑，爱怎么弄怎么弄，同步代码就用Git之类的。&lt;br /&gt;
但是这样初始化的过程很慢，要装各种软件各种配置。&lt;/p&gt;

&lt;p&gt;于是也有的是建一个中心服务器，大家用Putty这类软件SSH上去，每个人都有自己的账号。&lt;br /&gt;
但是这样环境不独立，而且权限控制很麻烦（毕竟每个人都想sudo）&lt;/p&gt;

&lt;p&gt;后来就直接分发虚拟机镜像了，每个人拿到一个10G的镜像文件，&lt;br /&gt;
直接Load一下，环境就起来了。&lt;br /&gt;
但是这样每次修改环境就要更新近10G…&lt;/p&gt;

&lt;p&gt;反正就是八仙过海，各有神通了。&lt;br /&gt;
利用&lt;a href=&#34;https://coolshell.cn/articles/17061.html&#34;&gt;AUFS&lt;/a&gt;和&lt;a href=&#34;https://liriansu.com/virtual-machine-vs-vagrant-vs-docker&#34;&gt;Docker&lt;/a&gt;也可以做到给每个人独立开发环境。&lt;/p&gt;

&lt;h2 id=&#34;aufs&#34;&gt;AUFS&lt;/h2&gt;

&lt;p&gt;根据Google:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AuFS stands for Another Union File System. AuFS started as an implementation of UnionFS Union File System. An union filesystem takes an existing filesystem and transparently overlays it on a newer filesystem. It allows files and directories of separate filesystem to co-exist under a single roof.May 8, 2013&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假设我们有一个目录如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree
.
└── public
    ├── database
    │   ├── dbfile1
    │   └── dbfile2
    └── src
        ├── helloworld.lisp
        └── sudoku.lisp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们希望以public目录为基础，给每个人创建一个private环境&lt;br /&gt;
于是我们跑几条命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir change private
$ mount -t aufs -o dirs=./change:./public none ./private
$ tree
.
├── change
├── private
│   ├── database
│   │   ├── dbfile1
│   │   └── dbfile2
│   └── src
│       ├── helloworld.lisp
│       └── sudoku.lisp
└── public
    ├── database
    │   ├── dbfile1
    │   └── dbfile2
    └── src
        ├── helloworld.lisp
        └── sudoku.lisp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mount命令中，-t指定了type是aufs，-o是option&lt;br /&gt;
把change命令以读写权限，public目录以只读权限mount到了private里面&lt;/p&gt;

&lt;p&gt;假设我们在private命令中新增，修改了一个文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd private/
$ touch newfile
$ echo &amp;#34;Changes&amp;#34; &amp;gt; src/sudoku.lisp
$ cd ..
$ tree
.
├── change
│   ├── newfile
│   └── src
│       └── sudoku.lisp
├── private
│   ├── database
│   │   ├── dbfile1
│   │   └── dbfile2
│   ├── newfile
│   └── src
│       ├── helloworld.lisp
│       └── sudoku.lisp
└── public
    ├── database
    │   ├── dbfile1
    │   └── dbfile2
    └── src
        ├── helloworld.lisp
        └── sudoku.lisp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到我们在private环境中所做的所有改动都在change中发生了！&lt;/p&gt;

&lt;p&gt;这就相当于图层（Layer）的叠加，我们往只读的public层上叠加了一层可写的change层。&lt;br /&gt;
&lt;em&gt;不过对于删除文件的情况要进行额外的检测&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;与docker的叠加&#34;&gt;与Docker的叠加&lt;/h2&gt;

&lt;p&gt;有了上例中的mount，那和Docker就很好叠加了&lt;br /&gt;
利用&lt;a href=&#34;https://docs.docker.com/userguide/dockervolumes/&#34;&gt;Docker的Volume&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -ti -v /tmp/docker/private:/work ubuntu /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就可以把private目录作为volume映射到docker container里面的/work目录了。&lt;br /&gt;
剩下的就是&lt;a href=&#34;https://docs.docker.com/userguide/dockerimages/&#34;&gt;Get good use of docker images&lt;/a&gt;了~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Virtual Machine, Vagrant, Docker的区别</title>
      <link>https://liriansu.com/posts/2015-10-12-virtual-machine-vs-vagrant-vs-docker/</link>
      <pubDate>Mon, 12 Oct 2015 12:49:55 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-10-12-virtual-machine-vs-vagrant-vs-docker/</guid>
      <description>&lt;p&gt;Virtualization——虚拟化技术一直是计算机世界里面很重要的东西。&lt;br /&gt;
一般程序员听到这个词首先浮现出的就是Windows下面开着装着Linux系统的VMware。&lt;br /&gt;
而这个“装着Linux系统的VMware”就是我们口中的虚拟机（Virtual Machine）&lt;/p&gt;

&lt;p&gt;虚拟机的主要好处是可以创建一个与主机操作系统不同的开发环境&lt;br /&gt;
（比如说一般的办公室都是Windows系统电脑）&lt;/p&gt;

&lt;p&gt;但是开发的便利也会导致初始化一个这样的环境比较麻烦&lt;br /&gt;
而且当项目进行到一定程度，对环境本身一些变化有依赖的时候&lt;br /&gt;
从零开始创建虚拟机的开发环境会很繁琐&lt;br /&gt;
Vagrant就是一种用来解决这种繁琐的工具&lt;/p&gt;

&lt;h2 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;根据&lt;a href=&#34;https://docs.vagrantup.com/v2/why-vagrant/index.html&#34;&gt;官方的说法&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vagrant本身不做虚拟机的工作，而是允许用户用VMware|VirtualBox|AWS来启动虚拟机镜像，他们管这叫Provider&lt;br /&gt;
当然了，镜像在Vagrant这里叫Box，而且很多公司已经做好了初始化的Box&lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;在这里&lt;/a&gt;可以直接用&lt;br /&gt;
Vagrant还提供了对Box的初始化脚本（Provisioning），这些初始化脚本可以用更多的脚本工具来完成对Box的配置&lt;/p&gt;

&lt;p&gt;所以其实相比于传统的虚拟机，Vagrant是站在巨人的肩膀上，完成了自动化。&lt;/p&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker项目的目标是实现轻量级的虚拟化方案，它和Virtual Machine最大的不同是Docker容器共享操作系统的内核&lt;br /&gt;
&lt;img src=&#34;https://dockerpool.com/static/books/docker_practice/_images/virtualization.png&#34; alt=&#34;vm&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://dockerpool.com/static/books/docker_practice/_images/docker.png&#34; alt=&#34;docker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以Docker和传统虚拟机的对比是明显的：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;Docker&lt;/th&gt;
&lt;th&gt;Virtual Machine&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;启动&lt;/td&gt;
&lt;td&gt;秒级&lt;/td&gt;
&lt;td&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;大小&lt;/td&gt;
&lt;td&gt;一般为MB&lt;/td&gt;
&lt;td&gt;一般为GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;近原生&lt;/td&gt;
&lt;td&gt;弱于原生&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;单机支持量&lt;/td&gt;
&lt;td&gt;上千个&lt;/td&gt;
&lt;td&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;内核&lt;/td&gt;
&lt;td&gt;共享&lt;/td&gt;
&lt;td&gt;独立&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;vagrant-vs-docker&#34;&gt;Vagrant vs Docker&lt;/h2&gt;

&lt;p&gt;讲道理的话，这两个不应该放在一起比较， 这两者的虚拟化级别并不是一个量级上的&lt;br /&gt;
而且这两者并不矛盾，假如你需要在Windows系统上搭载数个特定发行版的Linux系统，完全可以先用Vagrant + Virtual Machine再嵌数个Docker&lt;/p&gt;

&lt;p&gt;硬要比较的话，假如你需要运行跨平台的虚拟，那就用Vagrant，*否则*，用Docker&lt;/p&gt;

&lt;p&gt;最后再来张表对比一下吧：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;Virtual Machine&lt;/th&gt;
&lt;th&gt;Vagrant&lt;/th&gt;
&lt;th&gt;Docker&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;虚拟化&lt;/td&gt;
&lt;td&gt;完全虚拟化&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;系统虚拟化&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;镜像管理&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;有，一般为GB&lt;/td&gt;
&lt;td&gt;有，一般为MB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;弱于原生系统&lt;/td&gt;
&lt;td&gt;弱于原生系统&lt;/td&gt;
&lt;td&gt;接近原生系统&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;内核&lt;/td&gt;
&lt;td&gt;独立&lt;/td&gt;
&lt;td&gt;独立&lt;/td&gt;
&lt;td&gt;共享&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://dockerpool.com/static/books/docker_practice/index.html&#34;&gt;《Docker —— 从入门到实践》&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.vagrantup.com/v2/why-vagrant/index.html&#34;&gt;Why Vagrant&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shell909090/slides/blob/master/md/docker.md&#34;&gt;Docker不是虚拟机&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/16647069/should-i-use-vagrant-or-docker-io-for-creating-an-isolated-environment&#34;&gt;Shoud I use vagrant or docker&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>VIM中小键盘失灵的解决方案(Putty)</title>
      <link>https://liriansu.com/posts/2015-10-09-use-keypad-with-vim-and-putty/</link>
      <pubDate>Fri, 09 Oct 2015 15:34:16 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-10-09-use-keypad-with-vim-and-putty/</guid>
      <description>&lt;p&gt;我目前的开发环境是用&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;起一个虚拟机，然后用&lt;a href=&#34;https://www.putty.org/&#34;&gt;Putty&lt;/a&gt;连上去，用VIM做日常的开发工作。&lt;/p&gt;

&lt;p&gt;但某一天更新了一些配置以后，我在VIM里用小键盘输入1的时候，VIM就会在前一行加了一个q字符，让我很是困惑。&lt;/p&gt;

&lt;p&gt;后来&lt;a href=&#34;https://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings&#34;&gt;谷歌了一下这个问题&lt;/a&gt;，得知只要把Putty的Application keypad mode给关了就行了。&lt;/p&gt;

&lt;h2 id=&#34;奇怪的错误&#34;&gt;奇怪的错误&lt;/h2&gt;

&lt;p&gt;当刚开始小键盘的输入和预期有差别的时候，其实我是很困惑的。&lt;/p&gt;

&lt;p&gt;首先我在Bash里面小键盘一切正常，这说明我键盘没问题，应该是VIM哪里不对。&lt;/p&gt;

&lt;p&gt;其次我按的是1，结果出来的是前一行的q，我再按一下2，出来的是前一行的r。&lt;br /&gt;
假如键盘没有问题，要自己在VIM里面实现一个这种“功能”，那也要加一行配置：&lt;br /&gt;
&lt;code&gt;inoremap &amp;lt;Num1&amp;gt; &amp;lt;Esc&amp;gt;Oq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是这也太奇怪了吧，VIM里面怎么可能把&lt;code&gt;&amp;lt;Num1&amp;gt;&lt;/code&gt;给替换成&lt;code&gt;&amp;lt;Esc&amp;gt;Oq&lt;/code&gt;这么奇怪的东西？&lt;/p&gt;

&lt;h2 id=&#34;寻求答案&#34;&gt;寻求答案&lt;/h2&gt;

&lt;p&gt;于是我找到了&lt;a href=&#34;https://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings&#34;&gt;VIM wiki上的一篇解答&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;根据这篇解答，问题是出在Putty上。&lt;br /&gt;
Putty会默认启用“Application Keypad Mode”，这个选项被启用以后&lt;br /&gt;
所有小键盘上的按键（包括&lt;NumLock&gt;）都会输出一串按键序列：&lt;/p&gt;

&lt;p&gt;| 原按键    | 生成序列  |&lt;br /&gt;
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num1&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Oq&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num2&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Or&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num3&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Os&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num4&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Ot&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num5&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Ou&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num6&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Ov&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num7&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Ow&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num8&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Ox&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num9&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Oy&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Num0&amp;gt;&lt;/code&gt;  | &lt;code&gt;&amp;lt;Esc&amp;gt;Op&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;.&lt;/code&gt;       | &lt;code&gt;&amp;lt;Esc&amp;gt;On&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;/&lt;/code&gt;       | &lt;code&gt;&amp;lt;Esc&amp;gt;OQ&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;*&lt;/code&gt;       | &lt;code&gt;&amp;lt;Esc&amp;gt;OR&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;+&lt;/code&gt;       | &lt;code&gt;&amp;lt;Esc&amp;gt;Ol&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;-&lt;/code&gt;       | &lt;code&gt;&amp;lt;Esc&amp;gt;OS&lt;/code&gt; |&lt;br /&gt;
| &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; | &lt;code&gt;&amp;lt;Esc&amp;gt;OM&lt;/code&gt; |&lt;/p&gt;

&lt;p&gt;居然&lt;code&gt;&amp;lt;Num1&amp;gt;&lt;/code&gt;真的变成了&lt;code&gt;&amp;lt;Esc&amp;gt;Oq&lt;/code&gt;！&lt;/p&gt;

&lt;p&gt;再去翻&lt;a href=&#34;https://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter4.html#config-appkeypad&#34;&gt;Putty关于Application keypad mode的说明&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Application Keypad mode is a way for the server to change the behaviour of the numeric keypad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;唔，好吧，是服务器端决定的配置。&lt;/p&gt;

&lt;p&gt;所以在Putty下简单的解决方案就是关掉这个模式了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打开Putty配置&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;选中左边的Terminal -&amp;gt; Features&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在&amp;rdquo;Disable application keypad mode&amp;rdquo;处打钩&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;选中左边的Session&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保存Putty配置&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://liriansu.com/assets/putty_application_keypad_mode.jpg&#34; alt=&#34;关闭application keypad mode&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;更多奇怪的答案&#34;&gt;更多奇怪的答案&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&#34;https://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings#Comments&#34;&gt;VIM wiki页面的讨论板块&lt;/a&gt;，有人给出了一个看起来很蠢的解决方案：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:inoremap &amp;lt;Esc&amp;gt;Oq 1
:inoremap &amp;lt;Esc&amp;gt;Or 2
:inoremap &amp;lt;Esc&amp;gt;Os 3
:inoremap &amp;lt;Esc&amp;gt;Ot 4
:inoremap &amp;lt;Esc&amp;gt;Ou 5
:inoremap &amp;lt;Esc&amp;gt;Ov 6
:inoremap &amp;lt;Esc&amp;gt;Ow 7
:inoremap &amp;lt;Esc&amp;gt;Ox 8
:inoremap &amp;lt;Esc&amp;gt;Oy 9
:inoremap &amp;lt;Esc&amp;gt;Op 0
:inoremap &amp;lt;Esc&amp;gt;On .
:inoremap &amp;lt;Esc&amp;gt;OQ /
:inoremap &amp;lt;Esc&amp;gt;OR *
:inoremap &amp;lt;Esc&amp;gt;Ol +
:inoremap &amp;lt;Esc&amp;gt;OS -
:inoremap &amp;lt;Esc&amp;gt;OM &amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;刚开始看到这个答案我立刻想到了这张XKCD&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/workflow.png&#34; alt=&#34;workflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我认为mapping不应该是一个合适的解决方案，但是下面又有人讲了他自己苦逼的故事：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After a while struggling with this very problem with vnc viewer 4.1.3 under XP with a Debian lenny vnc4server 4.1.1+X4.3.0-31, this vim remapping is the only solution which work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，至少他找到了解决方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png&#34; alt=&#34;solution&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>这篇博客是怎么建成的</title>
      <link>https://liriansu.com/posts/2015-09-24-how-this-blog-was-built/</link>
      <pubDate>Thu, 24 Sep 2015 20:26:17 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-09-24-how-this-blog-was-built/</guid>
      <description>&lt;p&gt;其实最开始的时候我是用&lt;a href=&#34;https://en.wikipedia.org/wiki/LAMP_(software_bundle)&#34;&gt;LAMP&lt;/a&gt;在学校的IP上搭了一个个人博客，当时这么搭博客有几个很蠢的问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;晚上11点断网，早上6点才恢复网络，所以这个“个人博客”会断网&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;学校把对外的80端口给封了，而域名访问默认就是80，所以校外访问博客要变成 &lt;code&gt;https://cloudisdream:8080&lt;/code&gt;这种奇怪的模式&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;由于是自己的电脑做服务器，还得保证一直开着，这样始终不太好&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;java-servlet-structs-spring-hibernate&#34;&gt;JAVA / Servlet / Structs + Spring + Hibernate&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在收了可观的小费以后，旅店老板悄悄地告诉你： 每个大学的软件工程专业都会教JAVA+SSH&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实在LAMP之前，我曾经试过用课程里的Java+Servlet写过一个类微博的（个人？）网站&lt;/p&gt;

&lt;p&gt;大概长这样子:&lt;br /&gt;
&lt;img src=&#34;https://liriansu.com/assets/thatsMoonPage.jpg&#34; alt=&#34;First site&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一边写我就一边感慨网页设计真是艰难，而且其实这个主页也是模仿当时的网易微博的&lt;/p&gt;

&lt;h2 id=&#34;lamp-wordpress&#34;&gt;LAMP + WordPress&lt;/h2&gt;

&lt;p&gt;在前台HTML CSS JS到后台JAVA SQL都写过一遍以后，我开始意识到全栈工程师虽然听起来很美好，但是写起来实在是心太累了&lt;/p&gt;

&lt;p&gt;那个时候和ED聊天，刚好聊到&lt;a href=&#34;https://edward-mj.com/&#34;&gt;他的博客&lt;/a&gt;是用WordPress搭的，于是我就在自己的电脑上搭了一个服务器&lt;/p&gt;

&lt;p&gt;虽然文章开头说了这么搭建服务器的缺点，但是其实学校还是给我们提供了一个便利：&lt;strong&gt;固定IP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;于是我就去万网买了个域名，CNAME一下到学校IP。&lt;/p&gt;

&lt;p&gt;但是因为实在遭不住一直开机，还要断网，后来还是抛弃掉了这个方式。&lt;/p&gt;

&lt;h2 id=&#34;github-pages-jekyll&#34;&gt;Github Pages + Jekyll&lt;/h2&gt;

&lt;p&gt;现在的博客就是最简单的&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网页放在GitHub上可以享受版本控制这个得天独厚的优势，Jekyll用的是Ruby，简单易用好上手。&lt;/p&gt;

&lt;p&gt;从无到有搭建博客基本上就这么几步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注册Github账号，并创建 account.github.com 这个目录&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;跑&lt;code&gt;gem install jekyll&lt;/code&gt;，然后&lt;code&gt;gem new my-site&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;_config.yml&lt;/code&gt;到自己的配置，然后在&lt;code&gt;_post&lt;/code&gt;文件夹里面新增博客即可&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;

&lt;p&gt;博客少了评论总感觉哪里不对，因为是GitHub上的静态页面，基本上解决方案有：用&lt;a href=&#34;https://duoshuo.com/&#34;&gt;多说评论&lt;/a&gt;，&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;，或者是用GitHub issue来定制化评论&lt;br /&gt;
（我一开始还以为disqus == disquz）&lt;/p&gt;

&lt;p&gt;综合各方面，我采用了Disqus，根据&lt;a href=&#34;https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions&#34;&gt;官方的说明文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接在Page里面插入一段Comment Code就可以了。&lt;/p&gt;

&lt;h2 id=&#34;enhancement&#34;&gt;Enhancement&lt;/h2&gt;

&lt;p&gt;至此，基本主题的博客已全部搭建完毕&lt;/p&gt;

&lt;p&gt;但是还有几点不足的地方：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;页面最下方的Twitter图标最好要改成Weibo的（但是我还没搞懂怎么画）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;要补完About界面&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用Kramdown的GFM render方式感觉还是不够好，尤其是界面上，还是&lt;a href=&#34;https://github.com/LKI/blogs/issues/3&#34;&gt;GitHub Issue的Render方式&lt;/a&gt;看起来比较舒服&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看来以后在写博客的同时，也要对网站持续进行优化才可以呀！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么我要写博客</title>
      <link>https://liriansu.com/posts/2015-09-23-why-im-blogging/</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-09-23-why-im-blogging/</guid>
      <description>&lt;p&gt;我其实很喜欢看别人写的东西，&lt;a href=&#34;https://coolshell.cn/articles/4758.html&#34;&gt;技术类的&lt;/a&gt;、&lt;a href=&#34;https://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html&#34;&gt;非技术类的&lt;/a&gt;，&lt;a href=&#34;https://blog.csdn.net/redguardtoo/article/details/7222501&#34;&gt;中文的&lt;/a&gt;、&lt;a href=&#34;https://blog.codinghorror.com/show-dont-tell/&#34;&gt;英文的&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很多人写文章的时候总喜欢说一句&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我先抛砖引玉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是往往&lt;a href=&#34;https://coolshell.cn/articles/11312.html&#34;&gt;他们写的都非常好&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这样的文章看的我特手痒，想也写博客，但是问题就来了&lt;/p&gt;

&lt;h2 id=&#34;博客的主题是什么&#34;&gt;博客的主题是什么？&lt;/h2&gt;

&lt;p&gt;我一直有着写点什么的习惯，以前总是休闲散文写的比较多，更多是偏向于一种日记类的文章。&lt;br /&gt;
自从看了&lt;a href=&#34;https://coolshell.cn/haoel&#34;&gt;陈皓&lt;/a&gt;和&lt;a href=&#34;https://blog.codinghorror.com/about-me/&#34;&gt;Jeff Atwood&lt;/a&gt;的技术类博客以后，总有种写*好的*技术博客的冲动。&lt;br /&gt;
因为我对逻辑、语言、思考都感兴趣，而我又不能准确描述我这些兴趣，那我就把它们都写出来好了。&lt;/p&gt;

&lt;p&gt;XKCD的自我描述是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A webcomic of romance, sarcasm, math and language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/standards.png&#34; alt=&#34;XKCD-927&#34; /&gt;&lt;/p&gt;

&lt;p&gt;希望我也能写出这种主题鲜明，又有趣又妙不可言的文章&lt;/p&gt;

&lt;h2 id=&#34;我有什么能写出来的&#34;&gt;我有什么能写出来的?&lt;/h2&gt;

&lt;p&gt;作为一个菜鸟，我最熟练的VIM水平其实放在网络上也只是一般&lt;br /&gt;
同时根据&lt;code&gt;三人行必有我师焉&lt;/code&gt;，也意味着来到这个博客的人中每三个里就有一个比我厉害&lt;/p&gt;

&lt;p&gt;（我是不是应该放一个博客访问计数器？然后每到三个倍数就alert(&amp;ldquo;Congratulations&amp;rdquo;)一下&amp;hellip;&lt;/p&gt;

&lt;p&gt;不过既然大家都比我懂的多，那我也就不怕献丑了。&lt;br /&gt;
好玩的，要费脑子的问题，或者对人生的杂念都会被我写下来。&lt;/p&gt;

&lt;h2 id=&#34;中文博客还是英文博客&#34;&gt;中文博客还是英文博客？&lt;/h2&gt;

&lt;p&gt;讲道理的话，这个问题我想了很久。&lt;br /&gt;
以至于我都快走火入魔了，同样的文章写了&lt;a href=&#34;https://liriansu.com/vagrant-up-but-mount-no-device-zh&#34;&gt;一份中文的&lt;/a&gt;和&lt;a href=&#34;https://liriansu.com/vagrant-up-but-mount-no-device-en&#34;&gt;一份英文的&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后来想了想，主要基于几个观点：&lt;br /&gt;
1. 母语是中文，所以中文写的会比英文写的更顺畅&lt;br /&gt;
2. 语言的选择决定了受众的范围，而外国受众大部分不了解中国的亚文化&lt;br /&gt;
3. 个人而言，以后认识的国内朋友可能会更多，这本身是一个不错的名片&lt;/p&gt;

&lt;p&gt;于是，我便踏上了博客之路。&lt;/p&gt;

&lt;p&gt;现阶段目标是每周一篇吧，就像&lt;a href=&#34;https://discourse.codinghorror.com/t/how-to-achieve-ultimate-blog-success-in-one-easy-step/445/27&#34;&gt;Jeff说的一样&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pick whatever schedule works for you. And be realistic. I think starting with one post a month, like Catto, is a fine goal. Try to slowly ramp it up a bit over time as you get into the groove, and you&amp;rsquo;re on your way.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>我和女权的我打起来了</title>
      <link>https://liriansu.com/posts/2015-08-27-fight-with-the-feminist-me/</link>
      <pubDate>Thu, 27 Aug 2015 20:28:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-08-27-fight-with-the-feminist-me/</guid>
      <description>&lt;p&gt;一直以来我都自以为是一个大男子主义的人，&lt;br /&gt;
但我和女权的我相处的都比较和谐。&lt;br /&gt;
但是今晚我和女权的我打起来了。&lt;/p&gt;

&lt;p&gt;（一）&lt;/p&gt;

&lt;p&gt;一直以来我都自以为是一个大男子主义的人，&lt;br /&gt;
但我和女权的我相处的都比较和谐。&lt;/p&gt;

&lt;p&gt;但是今晚我和女权的我打起来了。&lt;/p&gt;

&lt;p&gt;（二）&lt;/p&gt;

&lt;p&gt;做完饭以后，我把每个菜都尝了一遍。&lt;/p&gt;

&lt;p&gt;自我感觉还是挺不错的，只是菜的扮相不是特别好。&lt;/p&gt;

&lt;p&gt;我忧伤的想道：&lt;br /&gt;
“假如我是个女的就好了，以后就找个有钱的，天天研究怎么做菜。”&lt;/p&gt;

&lt;p&gt;这时，女权的我突然跳了出来：“你这样想是不对的！”&lt;/p&gt;

&lt;p&gt;我在吓了一跳的同时意识到了我话里隐含的逻辑漏洞，&lt;br /&gt;
赶快心虚地解释道：“不不不，假如我是个男的我也找个有钱的&amp;hellip;”&lt;/p&gt;

&lt;p&gt;女权的我看出了我的心虚，一针见血地说道：“你潜意识并不这么想。”&lt;/p&gt;

&lt;p&gt;男人嘴巴上的尊严让我让步不能，我于是反问：&lt;br /&gt;
“那就我找一个会做饭的，我去挣钱养家，可以伐？”&lt;/p&gt;

&lt;p&gt;女权的我立刻就回答道：&lt;br /&gt;
“你不能这么想。只有女性在自己选择了想做饭以后，你才可以这么想。”&lt;/p&gt;

&lt;p&gt;我眼神里充满了怀疑（别问我自己怎么知道的，真男人从来不照镜子）&lt;br /&gt;
“也就是说我是男的，依据女权的观点，我不能希望女的会做饭，但是假如我是女的，希望自己会做饭，这是可以的，而且是女权的？”&lt;/p&gt;

&lt;p&gt;女权的我盯着我，想了一下：“对的。”&lt;/p&gt;

&lt;p&gt;我退了一步，先使出一招&amp;lt;以退为进&amp;gt;：“所以其实女权是提倡平等？”&lt;/p&gt;

&lt;p&gt;女权的我紧跟着，使出了一招&amp;lt;海阔天空&amp;gt;：“是的，女权其实就是平权，你微博读的不错。”&lt;/p&gt;

&lt;p&gt;我立马使出连招&amp;lt;车五进一&amp;gt;&amp;lt;猴子捞月&amp;gt;：“那所以根据平权的观点，我也可以希望自己的配偶是醉心于为我做饭的？”&lt;/p&gt;

&lt;p&gt;没想到女权的我只用了一招&amp;lt;不动如山&amp;gt;就化解掉了我的所有言语：&lt;br /&gt;
“你个人可以这么想，但是有这个想法，你基本上就孤独终老了。”&lt;/p&gt;

&lt;p&gt;（三）&lt;/p&gt;

&lt;p&gt;可能是因为招数太华丽，有可能是因为无懈太可击，也可能是蚍蜉撼大树是两个好朋友，一走神我就发现自己出于了下风。&lt;/p&gt;

&lt;p&gt;于是我放下了筷子，重新开始了游戏：&lt;br /&gt;
“假如说我是女的，而且我是男权的，我就希望老公棒棒的，我差差的，何如？”&lt;/p&gt;

&lt;p&gt;“假如你是女的…”&lt;br /&gt;
女权的我一开口，我就松了一口气，还好女权的我没有反驳说“你不可能是个女的”。&lt;/p&gt;

&lt;p&gt;在这个问题上我可真争不过，&lt;br /&gt;
毕竟我前几周才知道我一直爱慕的丝袜其实囊括了打底裤。&lt;/p&gt;

&lt;p&gt;那一瞬间，我从“喜欢丝袜”的变态，变成了“喜欢打底裤”的傻逼。&lt;/p&gt;

&lt;p&gt;不过话说回来，打底裤看起来其实也不错，关键还是要看腿。&lt;/p&gt;

&lt;p&gt;“假如你是女的，你就不会这么想了。”女权的我简明扼要地告诉我。&lt;/p&gt;

&lt;p&gt;这个问题我也争不过。&lt;br /&gt;
因为这个问题讲下去，就会变成“你又不是庄子，你又不知道惠子眼中的鱼知不知道自己是怎么想的”了，&lt;/p&gt;

&lt;p&gt;而且最终还会变成“庄子//转发本条锦鲤”这样的东西。&lt;/p&gt;

&lt;p&gt;我看了看渐渐变凉的饭和渐渐消失的饿，意识到我要先去收剩菜了&lt;br /&gt;
“我先去下厨房”&lt;/p&gt;

&lt;p&gt;“哦”女权的我答应道。&lt;/p&gt;

&lt;p&gt;（五）&lt;/p&gt;

&lt;p&gt;“你咋去了这么久？”女权的我看我回来得比较迟&lt;/p&gt;

&lt;p&gt;“没办法，一个人老做两人份的饭，收起来累，刚说到哪了。”我挺着肚子坐了下来。&lt;/p&gt;

&lt;p&gt;“刚说到假如你这样的女生，肯定也是支持女权的。”&lt;/p&gt;

&lt;p&gt;我有点不服气：“难道所有女的都是女权的？比如我有个儿子，那我也希望将来的媳妇要对他好给他做饭好好照顾他，这也不行？”&lt;/p&gt;

&lt;p&gt;“的确，现实生活中有很多这样的婆婆，所以女权运动任重道远啊。”女权的我叹了口气，看起来很忧郁的样子。&lt;/p&gt;

&lt;p&gt;我还是不服气：“就算按女权的观点，也不是万事平等的吧。扛东西肯定是男的来吧？万一打仗征兵呢？肯定是男的吧，可是会死人的。”&lt;/p&gt;

&lt;p&gt;女权的我立刻指出了我题设的漏洞：“女权反对战争，不止女权，人权都反对战争。文明越发达，战争的可能性越少。”&lt;/p&gt;

&lt;p&gt;想了想，女权的我估计是没有玩过《文明》的，就没有整下去了。&lt;/p&gt;

&lt;p&gt;而且“可能性应该用小，而不是少”这句话也犹豫了一下，没有说出来。&lt;/p&gt;

&lt;p&gt;看我有点踌躇的感觉，女权的我使出了终极武器：&lt;br /&gt;
“你刚才讲的的确是男性弱势的地方，但是那些发生机会都少，而女性，还要生育呢。”&lt;/p&gt;

&lt;p&gt;听了这句话，虽然我心里有很多“不是说生小孩是自己选的吗？说好的选择了生育就选择了责任呢？”“说好的女性不是生育机器呢？”“男的也可以生小孩以后就不用女权了吗？”一系列问题，但最终还是没有说出口，点了点头表示了赞成。&lt;/p&gt;

&lt;p&gt;因为突然想到了我妈，假如她也比较女权的话那她肯定活的比较自由，不用这么在意我了。&lt;/p&gt;

&lt;p&gt;（六）&lt;/p&gt;

&lt;p&gt;安静了一阵子，我问女权的我：&lt;br /&gt;
“其实我们讲话还是挺科学的啊，为啥我一直觉得我要和你打起来了？”&lt;/p&gt;

&lt;p&gt;女权的我深了个呼吸，叹道：&lt;br /&gt;
“我也不想的。大概是整个社群比较激进，很多人的观点就是叫的越大声醒来的人才越多，我也不赞成这样的观点。但是没办法，毕竟辛德勒是在战乱结束以后才被拍成电影的，所以很多事情都要慢慢看的。”&lt;/p&gt;

&lt;p&gt;我不禁赞同：“嗯，基督山伯爵也说嘛，等待，和希望。”&lt;/p&gt;

&lt;p&gt;在气氛缓和了以后，男人残留在嘴巴上的尊严马上又让我跳了出来：&lt;br /&gt;
“不过我还是不赞同女权，我还是很大男子主义的。我觉得女性就应该柔弱一些，这样子不同性别的人都能发挥自己的特长到最好。其实女权和男权就应该像猪和驴在年货里的关系一样，反正我是不赞同男权的。说不定我还有处女情结呢！”&lt;/p&gt;

&lt;p&gt;女权的我看了看我，笑道：“ツ 没事，我也有处男情结。”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何优雅地使用Perl的常量模块</title>
      <link>https://liriansu.com/posts/2015-07-25-how-to-set-perl-constant-module/</link>
      <pubDate>Sat, 25 Jul 2015 20:56:06 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-07-25-how-to-set-perl-constant-module/</guid>
      <description>&lt;p&gt;最近的Perl Coding遇到了一个问题：需要对一系列常量进行合法性检测。&lt;/p&gt;

&lt;p&gt;在Research&amp;amp;Develop后，有一些心得。&lt;/p&gt;

&lt;p&gt;本文从Perl的常量定义上，给出一个_自认为_优雅的解决方案。&lt;/p&gt;

&lt;h2 id=&#34;perl中一般的常量定义&#34;&gt;Perl中一般的常量定义&lt;/h2&gt;

&lt;p&gt;在写项目的时候为了避免Magic Number的情况，我们经常需要定义常量。&lt;/p&gt;

&lt;p&gt;当然了，根据&lt;a href=&#34;https://coolshell.cn/articles/4758.html&#34;&gt;如何写出无法维护的代码&lt;/a&gt;的指导我们不应当定义常量，Number越Magic越好。&lt;/p&gt;

&lt;p&gt;一般来说，Perl中的常量如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant CONST_PI &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1416&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在模块化的编码过程中，随着常量的增多，我们会需要把这些常量放到一个常量模块(Perl Module)里面：&lt;/p&gt;

&lt;p&gt;这样的做法也符合DRY(Don&amp;rsquo;t Repeat Yourself)的原则。#DRYBestPractice?&lt;/p&gt;

&lt;p&gt;比如说在哼哧哼哧地写了一阵子以后，我们有下面这个常量模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Lirian::Constants;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

    &lt;span style=&#34;color:#75715e&#34;&gt;#Math Const&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant CONST_PI &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1416&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant CONST_E  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.718&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;#Default Config Parm Name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant PARM_DB_NAME  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbName&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant PARM_DB_HOST  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbHost&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant PARM_GIT_USER &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gitUser&amp;#39;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Exporter;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; @ISA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(Exporter)&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; @EXPORT_OK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        CONST_PI
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        CONST_E
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        PARM_DB_NAME
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        PARM_DB_HOST
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        PARM_GIT_USER
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    )&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; %EXPORT_TAGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
        all  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@EXPORT_OK,
        math &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;qw(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            CONST_PI
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            CONST_E
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        )&lt;/span&gt;],
        parm &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;qw(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            PARM_DB_NAME
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            PARM_DB_HOST
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            PARM_GIT_USER
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        )&lt;/span&gt;],
    );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段代码简单粗暴地展示了Perl中的常量模块。&lt;/p&gt;

&lt;p&gt;其中的&lt;code&gt;our @ISA = qw(Exporter);&lt;/code&gt;是表示本模块继承了&lt;a href=&#34;https://perldoc.perl.org/Exporter.html&#34;&gt;Exporter&lt;/a&gt;这个模块。&lt;/p&gt;

&lt;p&gt;通过这样的定义，我们便有了一个常量的“中心仓库”了。&lt;/p&gt;

&lt;p&gt;至于怎么使用，我们就来看下一节。&lt;/p&gt;

&lt;h2 id=&#34;使用常量模块&#34;&gt;使用常量模块&lt;/h2&gt;

&lt;p&gt;在上一节中，通过对Exporter的继承，我们有了一个Lirian::Constants模块。&lt;/p&gt;

&lt;p&gt;而一般地，我们会这么使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Lirian::Math;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Lirian::Constants &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:all)&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_circum&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($r) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; CONST_PI &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $r;
    }

    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在正常的情况下，常量的使用方法比较简单，但假如需求有些绕：&lt;/p&gt;

&lt;p&gt;在程序的开始时，我们需要检验用户的配置文件，确保每个条目用户都是有效的。&lt;/p&gt;

&lt;p&gt;比如说需求文件如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;    dbName=github
    dbHost=localhost
    gitUser=LKI&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然地，一种简单但稍微蠢了点的方法是这么做：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate_config_dumb&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($conf) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

        validate_parm($conf, PARM_DB_NAME);
        validate_parm($conf, PARM_DB_HOST);
        validate_parm($conf, PARM_GIT_USER);
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做有几个问题：&lt;/p&gt;

&lt;p&gt;1.config parameter一多，代码就很长，丑&lt;br /&gt;
2.增加config constant时，不仅要改常量模块，这里也要加，累&lt;br /&gt;
3.这样的代码提交上去感觉好丢脸，蠢&lt;br /&gt;
4.以上三点在&lt;a href=&#34;https://coolshell.cn/articles/2058.html&#34;&gt;撞大运编程&lt;/a&gt;里都不是问题&lt;/p&gt;

&lt;p&gt;那怎么样做才算是优雅的做法呢？&lt;/p&gt;

&lt;h2 id=&#34;利用perl的export机制&#34;&gt;利用Perl的Export机制&lt;/h2&gt;

&lt;p&gt;在Exporter中，定义在%EXPORT_TAGS中的文件可以直接引用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tags      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$Lirian::Constants::EXPORT_TAGS;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $math_tags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tags&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{math}; &lt;span style=&#34;color:#75715e&#34;&gt;# [&amp;#39;CONST_PI&amp;#39;, &amp;#39;CONST_E&amp;#39;];&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parm_tags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tags&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{parm}; &lt;span style=&#34;color:#75715e&#34;&gt;# [&amp;#39;PARM_DB_NAME&amp;#39;, &amp;#39;PARM_DB_HOST&amp;#39;, &amp;#39;PARM_GIT_USER&amp;#39;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以拿到常量的名字了，此时我们便需要&lt;a href=&#34;https://stackoverflow.com/questions/2187682/how-do-i-access-a-constant-in-perl-whose-name-is-contained-in-a-variable&#34;&gt;在Perl中根据变量名获取变量值&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $name  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONST_PI&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Lirian::Constants&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;$name; &lt;span style=&#34;color:#75715e&#34;&gt;# 3.1416&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以在上一小节的问题中，我们可以得出一个更优雅的解决方案啦~&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate_config&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($conf) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tags      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$Lirian::Constants::EXPORT_TAGS;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parm_tags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tags&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{parm};
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parm_name (@$parm_tags) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parm_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Lirian::Constants&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;$parm_name;
            validate_parm($conf, $parm_value);
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大功告成！从此以后在加常量的同时，validate_config会自动地检验新增的配置选项啦~&lt;/p&gt;

&lt;p&gt;此时便可以使用&lt;a href=&#34;https://whatthecommit.com/&#34;&gt;一个酷炫的Git Commit Message&lt;/a&gt;来提交工作啦！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次有意义的吹B</title>
      <link>https://liriansu.com/posts/2015-06-12-a-chat-with-roommates/</link>
      <pubDate>Fri, 12 Jun 2015 22:06:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-06-12-a-chat-with-roommates/</guid>
      <description>&lt;p&gt;（一）引言&lt;/p&gt;

&lt;p&gt;我经历了一场绝妙的装B&lt;br /&gt;
可是这个地方太小写不下&lt;br /&gt;
——&lt;a href=&#34;https://weibo.com/n/ooCast&#34;&gt;@ooCast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（可能内含各种广告）&lt;/p&gt;

&lt;p&gt;（二）&lt;/p&gt;

&lt;p&gt;某天下午和室友们吹了一场有意义的B，&lt;br /&gt;
当时觉得不记下来的话，毕设也写不安稳，&lt;br /&gt;
但是最后权衡了一下，还是毕设特么重要，&lt;br /&gt;
所以直到毕设写完了才开始记录这次寝室谈话。&lt;/p&gt;

&lt;p&gt;记忆力和文笔都不好，请多担待。&lt;/p&gt;

&lt;p&gt;（三）租房&lt;/p&gt;

&lt;p&gt;话说最近在签三方的事情，和周丞一起去学生服务中心交表格。&lt;/p&gt;

&lt;p&gt;路上我问周丞租房子的事情，&lt;br /&gt;
然后相互吐槽了一下租房还真蛮贵的，&lt;br /&gt;
想住的离公司比较近的话一个月就要2k~3k。&lt;/p&gt;

&lt;p&gt;而且周丞懒，想租蘑菇公寓的房子，又要额外1k。&lt;/p&gt;

&lt;p&gt;不禁感慨了一番在魔都干个十年，&lt;br /&gt;
要被房子吃掉好多钱，&lt;br /&gt;
而且在这里买房子真不值。&lt;/p&gt;

&lt;p&gt;于是又探讨起了干十年就卷钱走人的可能性，&lt;br /&gt;
主要问题有2：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;很可能三十岁回老家的时候还是单身&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;回去以后是否有对口的工作&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;周丞觉得第一的话现在相亲市场这么发达，不慌，&lt;br /&gt;
他认为到时候他就是有房、有车、单身、没有不良嗜好的优质大叔了&lt;/p&gt;

&lt;p&gt;第二个问题倒挺忧伤的，&lt;br /&gt;
因为他查了一下，马兰坡Python程序员只有一个地方在招人：&lt;/p&gt;

&lt;p&gt;芒果TV。&lt;/p&gt;

&lt;p&gt;（四）毕业工作&lt;/p&gt;

&lt;p&gt;后来回到了寝室，问小赖打算怎么样。&lt;/p&gt;

&lt;p&gt;小赖说他出国没有理想的offer，想先gap一年，实习一下。&lt;/p&gt;

&lt;p&gt;我和周丞便怂恿他找我们内推，小赖便问一天多少钱，&lt;br /&gt;
我们表示实习钱差不多，基本上都是180/d，转正后工资才是重要的。&lt;/p&gt;

&lt;p&gt;小赖表示他不转正，这个不重要。&lt;/p&gt;

&lt;p&gt;过了一会他又忍不住问“像我们这种码农值多少钱？”&lt;/p&gt;

&lt;p&gt;于是我们展开了讨论，得出结论：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根据现状来看，第一年的基本上是100k/y到240k/y之间&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;正常的码农干个三年，几十万年薪是有的&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再不济，随便学点C艹，Java，每个月拿半狗（150k/y)是有的&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但是很少有码农能拿到百万年薪（周丞：知乎上就三个）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“走走走，看工作去” 我们三人凑在显示器前，默默打开了草榴…&lt;/p&gt;

&lt;p&gt;唔…开错网了，于是我们关掉了草榴，&lt;/p&gt;

&lt;p&gt;默默打开了赶集、智联、拉勾网、JobDeer和各种互联网公司的hr主页&lt;/p&gt;

&lt;p&gt;（五）职业去向&lt;/p&gt;

&lt;p&gt;到网上一搜，果然大部分都是招什么Java开发工程师，10k/m，要求三年工作经验。&lt;/p&gt;

&lt;p&gt;然后我们又吐槽了一下，居然要求程序员工作经验，太扯了，&lt;br /&gt;
殊不知有些人是复制粘贴编译改Bug循环了三年。&lt;/p&gt;

&lt;p&gt;我们觉得这个薪资太低了，果断按了 高级搜索-&amp;gt;筛选-&amp;gt;月薪大于50k&lt;/p&gt;

&lt;p&gt;然后出来的职位包夸：产品经理、美X网中国区总经理、总架构师blablabla。&lt;/p&gt;

&lt;p&gt;面面相觑，&lt;br /&gt;
“难道我们干几年就几乎全部要转管理了？”&lt;/p&gt;

&lt;p&gt;小赖表示他不服，他想当羽毛球教练（小赖：每次我去南体都觉得那个教练菜）&lt;/p&gt;

&lt;p&gt;我和周丞极力赞扬他：“你看，羽毛球这运动很好的，很多白富美喜欢。说不定你就被看上了！”&lt;/p&gt;

&lt;p&gt;于是我们就去网上搜了一下羽毛球教练的工资：6k一个月。&lt;/p&gt;

&lt;p&gt;小赖表示他还是当程序员吧。&lt;/p&gt;

&lt;p&gt;（六）钱的去向&lt;/p&gt;

&lt;p&gt;乐观的我表示没事，虽然我们挣得不多，但是我们用的也少呀，&lt;br /&gt;
比如我们的社交费用会比别人少很多。&lt;/p&gt;

&lt;p&gt;周丞：那不一定啊，我们会买游戏&lt;/p&gt;

&lt;p&gt;小赖：游戏又没很多钱的&lt;/p&gt;

&lt;p&gt;周丞：不不不，一个游戏虽然才几十刀，但是很多的还是很贵的&lt;/p&gt;

&lt;p&gt;我：这个总比那些社交活动钱少吧&amp;hellip;&lt;/p&gt;

&lt;p&gt;周丞：而且我们那边的人天天去洗脚&lt;/p&gt;

&lt;p&gt;我和小赖：啊？！？！？&lt;/p&gt;

&lt;p&gt;周丞说他们那边的人去洗脚是一种娱乐活动，&lt;br /&gt;
要一两百一人次。。。&lt;/p&gt;

&lt;p&gt;小赖表示这尼玛性价比太低了，还不如去大宝剑。&lt;/p&gt;

&lt;p&gt;于是我们打开了大众点评，发现闵行的大宝剑才300一次。&lt;/p&gt;

&lt;p&gt;我表示这个又不舒服又不安全，&lt;br /&gt;
还不如投资在以后的婚姻上呢。&lt;/p&gt;

&lt;p&gt;（七）择偶观&lt;/p&gt;

&lt;p&gt;我问“你们那边彩礼一般要多少钱？”&lt;/p&gt;

&lt;p&gt;周丞“啊？还要彩礼，为啥？两个人平等的婚姻也要彩礼？”&lt;/p&gt;

&lt;p&gt;小赖“我们那边都有彩礼的，毕竟嫁女儿嘛。”&lt;/p&gt;

&lt;p&gt;周丞“那我妈还嫁儿子呢？凭啥我没彩礼…”&lt;/p&gt;

&lt;p&gt;我“那你入赘就好了，入赘就不要彩礼”&lt;/p&gt;

&lt;p&gt;周丞“啥是入赘。。。？”&lt;/p&gt;

&lt;p&gt;小赖“就是对外宣称是你嫁过去了，然后你要住妹子家”&lt;/p&gt;

&lt;p&gt;周丞“这么好？！？！好啊！没问题”&lt;/p&gt;

&lt;p&gt;小赖“对，小孩还要跟妈妈姓”&lt;/p&gt;

&lt;p&gt;我“啊，我就跟我妈姓的啊，入赘的评判标准就这些了吗？”&lt;/p&gt;

&lt;p&gt;小赖“唔，好像就这些了…”&lt;/p&gt;

&lt;p&gt;一阵沉默……（分析利弊中）&lt;/p&gt;

&lt;p&gt;周丞表示其实不结婚也没啥，也就纯生物学意义上没完成传宗接代的功能，&lt;br /&gt;
假如真老了，还是没有老婆，那他就去捐精！&lt;/p&gt;

&lt;p&gt;于是我们就到&lt;a href=&#34;https://www.fairfaxcryobank.com/index.shtml&#34;&gt;美国著名精子库fairfaxcryobank&lt;/a&gt;去围观了一发。&lt;/p&gt;

&lt;p&gt;（八）饮食&lt;/p&gt;

&lt;p&gt;正讲着，郁翔回来了。&lt;/p&gt;

&lt;p&gt;由于他是魔都土著，我们就吐槽他在魔都有根据地，理论上有优势。&lt;/p&gt;

&lt;p&gt;郁翔吐槽说其实他在左下角工作，家在右上角，一样也要租房。&lt;/p&gt;

&lt;p&gt;说到租房，周丞又表示了忧郁：&lt;br /&gt;
以后饭怎么解决啊？&lt;/p&gt;

&lt;p&gt;我们说现在饿了么这么发达，以后吃外卖就好了，&lt;br /&gt;
而且自己做饭未必比外卖便宜。&lt;/p&gt;

&lt;p&gt;实在不行就请个小保姆嘛，说不定就发展出美好姻缘了。&lt;/p&gt;

&lt;p&gt;但是请小保姆好贵啊！&lt;/p&gt;

&lt;p&gt;郁翔表示这种东西跟程序员鼓励师一样不靠谱：&lt;br /&gt;
“假如有人在我写代码的时候在旁边说话，我肯定想抡死她”&lt;/p&gt;

&lt;p&gt;的确，&lt;br /&gt;
面向对象编程的时候不需要其他对象了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;——记一次有意义的吹B&lt;/p&gt;

&lt;p&gt;于 2015年06月12日晚10点&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Vagrant-up遇到mount no device的解决方案</title>
      <link>https://liriansu.com/posts/2015-05-15-vagrant-up-but-mount-no-device-zh/</link>
      <pubDate>Fri, 15 May 2015 10:29:05 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2015-05-15-vagrant-up-but-mount-no-device-zh/</guid>
      <description>&lt;p&gt;今天跑&lt;code&gt;vagrant up&lt;/code&gt;的时候遇到了这个问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; cvc-tools: Machine booted and ready!
==&amp;gt; cvc-tools: Checking for guest additions in VM...
==&amp;gt; cvc-tools: Configuring and enabling network interfaces...
==&amp;gt; cvc-tools: Mounting shared folders...
    cvc-tools: /work =&amp;gt; D:/work/
Failed to mount folders in Linux guest. This is usually because
the &amp;#34;vboxsf&amp;#34; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u devel`,gid=`getent group devel | cut -d:
-f3` work /work
mount -t vboxsf -o uid=`id -u devel`,gid=`id -g devel` work /work

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看了 &lt;a href=&#34;https://github.com/mitchellh/vagrant/issues/1657&#34;&gt;https://github.com/mitchellh/vagrant/issues/1657&lt;/a&gt;&lt;br /&gt;
以后，明白这是&lt;code&gt;yum update&lt;/code&gt;更新了内核，但是没有更新VirtualBox的连接的问题。&lt;/p&gt;

&lt;p&gt;于是重新添加一下VBox：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[lirian@localhost ~]$ sudo /etc/init.d/vboxadd setup
Removing existing VirtualBox non-DKMS kernel modules       [  OK  ]
Building the VirtualBox Guest Additions kernel modules
The headers for the current running kernel were not found. If the
following
module compilation fails then this could be the reason.
The missing package can be probably installed with
yum install kernel-devel-2.6.18-404.el5

Building the main Guest Additions module                   [FAILED]
(Look at /var/log/vboxadd-install.log to find out what went wrong)
Doing non-kernel setup of the Guest Additions              [  OK  ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据以上信息，得知现在在跑的内核开发包缺失，于是再跑一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yum install kernel-devel-2.6.18-404.el5```&#34; data-lang=&#34;yum install kernel-devel-2.6.18-404.el5```&#34;&gt;之后再vagrant up或者手动mount就可以解决问题了。

总结：vagrant up遇到mount error: no such device可以通过以下脚本解决：&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yum install kernel-devel-2.6.18-404.el5&lt;br /&gt;
/etc/init.d/vboxadd setup&lt;br /&gt;
mount -t vboxsf -o uid=&lt;code&gt;id -u devel&lt;/code&gt;,gid=&lt;code&gt;id -g devel&lt;/code&gt; work /work&lt;br /&gt;
```&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用Openpyxl做两个Excel文件的比对</title>
      <link>https://liriansu.com/posts/2014-08-28-compare-excel-with-openpyxl/</link>
      <pubDate>Thu, 28 Aug 2014 10:31:08 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2014-08-28-compare-excel-with-openpyxl/</guid>
      <description>&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;最近老是要做比对Excel报表的工作，于是想写一个Python的小脚本来做这个工作。&lt;br /&gt;
关于Python的Excel处理，以前只用过xlrd库，处理的是Office03的.xls文件。&lt;br /&gt;
这次写小工具的同时也是学习一下新的东西。&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;由于本次要比对的报表是Office07的.xlsx文件，上网查了一下Python怎么做比较合适。&lt;br /&gt;
看了几篇心得以后，敲定用Openpyxl（参考如下链接：）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gocalf.com/blog/python-read-write-excel.html&#34;&gt;Python处理Excel的四个工具&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是接下来是装Openpyxl，到官网上按照流程装了一发：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://pythonhosted.org/openpyxl/&#34;&gt;A Python Library: Openpyxl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于源码是到BitBucket上拖下来的，所以顺便还装了SourceTree。&lt;br /&gt;
据说SourceTree还有Git的相关功能，下次可以体验一下。&lt;/p&gt;

&lt;h2 id=&#34;使用openpyxl&#34;&gt;使用Openpyxl&lt;/h2&gt;

&lt;p&gt;Openpyxl装好以后直接import就能用啦：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openpyxl &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Openpyxl还提供了一个非常棒的教程&lt;del&gt;（有点过于简单&lt;/del&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://pythonhosted.org/openpyxl/tutorial.html&#34;&gt;Openpyxl Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Openpyxl还有个弊端就是文档不怎么详细，只能去翻源码。&lt;/p&gt;

&lt;h2 id=&#34;最终代码&#34;&gt;最终代码&lt;/h2&gt;

&lt;p&gt;可以到我写的PythonScripts里找到我写的版本：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/LKI/PythonScripts/tree/master/ExcelComparer&#34;&gt;PythonScripts - ExcelComparer&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的好友陈伟杰</title>
      <link>https://liriansu.com/posts/2014-07-20-my-friend-edward/</link>
      <pubDate>Sun, 20 Jul 2014 22:55:00 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2014-07-20-my-friend-edward/</guid>
      <description>&lt;h2 id=&#34;1&#34;&gt;(1)&lt;/h2&gt;

&lt;p&gt;莫泊桑或者是福楼拜说过：&lt;br /&gt;
要写好描写性的文章，&lt;br /&gt;
你至少要写40个人。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;综上所述，培根也说过：&lt;br /&gt;
知识就是力量，大家少吃培根。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我并不想写好描述性的文章。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我跟ED实在是太熟了，&lt;br /&gt;
不描写他一发简直心痒难耐。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2&#34;&gt;(2)&lt;/h2&gt;

&lt;p&gt;ED，中文的名字是陈伟杰，&lt;br /&gt;
英文名字是ED。&lt;/p&gt;

&lt;p&gt;跟别人介绍他的时候经常会是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“这是ED。”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;“诶！ED的意思难道是……？”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;“不是的啦…只是名字简写…”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是后来ED学会了一个新的词——蒟蒻。&lt;/p&gt;

&lt;h2 id=&#34;3&#34;&gt;(3)&lt;/h2&gt;

&lt;p&gt;我们口中的ED发音是&lt;code&gt;&#39;ed&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;不过因为叫的多了，&lt;br /&gt;
所以“阿达”，“阿达娃”这种称呼也出来了。&lt;/p&gt;

&lt;p&gt;有一次一个学弟对着他的名字念了个&lt;code&gt;,i:di:&#39;wəd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;于是ED就又多了一个“一滴喔的”这样奇怪的外号。&lt;/p&gt;

&lt;h2 id=&#34;4&#34;&gt;(4)&lt;/h2&gt;

&lt;p&gt;ED在大部分网站上的账号都是edward_mj。&lt;/p&gt;

&lt;p&gt;据他所说是因为edward这个名字实在是太常见了，&lt;br /&gt;
这样的账号都被抢注了。&lt;/p&gt;

&lt;p&gt;于是他只好加个mj的后缀，&lt;br /&gt;
意思是“马甲”。&lt;/p&gt;

&lt;p&gt;久而久之mj反而成了他的本体……&lt;/p&gt;

&lt;p&gt;现在浙大的同学都叫他“马甲”……&lt;/p&gt;

&lt;h2 id=&#34;5&#34;&gt;(5)&lt;/h2&gt;

&lt;p&gt;ED并不介意熟人怎么叫他。&lt;/p&gt;

&lt;p&gt;事实上对熟人在大部分事情上ED都相当随意。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某次我们annually跑到ED家附近去玩，&lt;br /&gt;
大家怂恿ED来BG一发，&lt;br /&gt;
ED就很鱼块地BG了一发。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最近ED用自己的服务器搭了个能上Google的业务，&lt;br /&gt;
他也直接拿出来给大家用了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6&#34;&gt;(6)&lt;/h2&gt;

&lt;p&gt;但是ED在生人面前看起来非常地羞涩&amp;amp;正经。&lt;/p&gt;

&lt;p&gt;由于混熟了以后大家对于ED感觉反差太大了，&lt;br /&gt;
于是ED获得了很多好友的一致评价：“（闷）骚”。&lt;/p&gt;

&lt;p&gt;至今还有很多人叫ED“骚杰”&lt;/p&gt;

&lt;p&gt;ED觉得非常蛋疼，&lt;br /&gt;
问我：“你说为什么会这样子捏”&lt;/p&gt;

&lt;p&gt;我想了想，&lt;br /&gt;
说：&lt;br /&gt;
“可能是因为你真的很（闷）骚吧。”&lt;/p&gt;

&lt;p&gt;其实骚也没什么，&lt;br /&gt;
屈原也骚。&lt;/p&gt;

&lt;h2 id=&#34;7&#34;&gt;(7)&lt;/h2&gt;

&lt;p&gt;初中的时候我在1班，&lt;br /&gt;
ED在2班，&lt;br /&gt;
本来理论上不会太熟，&lt;br /&gt;
但是我们在信息竞赛（OI）班里是同桌。&lt;/p&gt;

&lt;p&gt;初中的OI其实就是大浪淘沙，&lt;br /&gt;
由于很多假期都要留校，&lt;br /&gt;
实在是太寂寞了，&lt;br /&gt;
于是很多对此没多大兴趣的人都弃坑了。&lt;/p&gt;

&lt;p&gt;所以初一还有五、六十人参加的竞赛班，&lt;br /&gt;
到了初二就只剩我、ED、Li、LuLu、何升雨和孙艳梅了。&lt;/p&gt;

&lt;p&gt;人比较少，&lt;br /&gt;
我们每个人就有了自己固定的座位，&lt;br /&gt;
我就跟ED成了同桌。&lt;/p&gt;

&lt;p&gt;从初二到高三，&lt;br /&gt;
一直同桌了五年。&lt;/p&gt;

&lt;h2 id=&#34;8&#34;&gt;(8)&lt;/h2&gt;

&lt;p&gt;后来跟冯可聊天的时候，&lt;br /&gt;
她还很惊奇地跟我说：&lt;br /&gt;
“你也跟陈伟杰同桌呀。”&lt;/p&gt;

&lt;p&gt;冯可是ED小学时候的同桌，&lt;br /&gt;
她觉得“ED实在是太受了，&lt;br /&gt;
谁都能欺负他“&lt;/p&gt;

&lt;p&gt;这句话说的太对了。&lt;/p&gt;

&lt;p&gt;ED高一的时候坐在大灰和烨哥的中间，&lt;br /&gt;
那阵子他们两最大的爱好就是戳ED。&lt;/p&gt;

&lt;p&gt;ED又怕痒，&lt;br /&gt;
每次被戳都会像保卫萝卜里的萝卜一样抖动……&lt;/p&gt;

&lt;p&gt;于是大灰和烨哥就更喜欢戳ED了。&lt;/p&gt;

&lt;h2 id=&#34;9&#34;&gt;(9)&lt;/h2&gt;

&lt;p&gt;认识ED以后跟他聊天，&lt;br /&gt;
他说了一件初一的时候特别好玩的事情。&lt;/p&gt;

&lt;p&gt;当时我的一班和ED的二班，&lt;br /&gt;
语文老师是同一个人，&lt;br /&gt;
大学刚毕业的热血青年。&lt;/p&gt;

&lt;p&gt;有次晚上寝室卧谈，&lt;br /&gt;
ED他们寝室玩打电话的恶作剧游戏。&lt;/p&gt;

&lt;p&gt;有个同学就播了语文老师的电话：&lt;br /&gt;
“您好，&lt;br /&gt;
这里是红袖午夜情感电台。&lt;br /&gt;
情感故事请按1，&lt;br /&gt;
美眉聊天请按2……”&lt;/p&gt;

&lt;p&gt;然后（开着外放），&lt;br /&gt;
电话对面沉默了许久，&lt;br /&gt;
传来了一声“嘟”的按键声……&lt;/p&gt;

&lt;p&gt;他们一寝室强忍着笑，&lt;br /&gt;
问：&lt;/p&gt;

&lt;p&gt;“请问你按的是1还是2啊？……”&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;h2 id=&#34;10&#34;&gt;(10)&lt;/h2&gt;

&lt;p&gt;假期的时候在寝室的只有学奥赛的几个同学，&lt;br /&gt;
于是我、ED还有Bill三个人就睡在同一个寝室。&lt;/p&gt;

&lt;p&gt;当时ED有个翻盖的手机，&lt;br /&gt;
这手机侧面有个非常酷炫的功能键，&lt;br /&gt;
按一下就能兹兹地自动翻盖。&lt;/p&gt;

&lt;p&gt;我和Bill都非常喜欢玩这个按钮，&lt;br /&gt;
于是没有两天这个键就被我们玩坏了……&lt;br /&gt;
不灵了……&lt;/p&gt;

&lt;p&gt;我们三个人都感到了蛋疼……&lt;/p&gt;

&lt;h2 id=&#34;11&#34;&gt;(11)&lt;/h2&gt;

&lt;p&gt;ED很多时候会灵光一闪地表现出无以匹敌的2B气质…&lt;/p&gt;

&lt;p&gt;有次假期留校，&lt;br /&gt;
早上起来我们在阳台刷牙。&lt;/p&gt;

&lt;p&gt;ED刷着刷着，&lt;br /&gt;
突然感慨了一句：&lt;br /&gt;
“其实，我觉得我大腿还是比较粗壮的！”&lt;/p&gt;

&lt;p&gt;我愣了一下，&lt;br /&gt;
然后笑疯了……&lt;/p&gt;

&lt;p&gt;哈哈哈哈哈哈哈至今想起来还是想笑…&lt;br /&gt;
太逗B了……&lt;/p&gt;

&lt;h2 id=&#34;12&#34;&gt;(12)&lt;/h2&gt;

&lt;p&gt;其实ED很瘦，看起来跟竹竿似的。&lt;/p&gt;

&lt;p&gt;而且ED比平均身高都高&lt;br /&gt;
（就是在班里坐最后一排的水平&lt;/p&gt;

&lt;p&gt;几年前有次坐在我爸车上，&lt;br /&gt;
在跟我爸随便聊天，&lt;br /&gt;
我爸突然说：&lt;br /&gt;
“最近不是流行一个词‘高富帅’么，&lt;br /&gt;
很多人都被称为‘高富帅’，&lt;br /&gt;
我看啊，&lt;br /&gt;
陈伟杰才算是‘高富帅’…”&lt;/p&gt;

&lt;p&gt;不得不说我顿时膜拜起了我爸的博学，&lt;br /&gt;
和我刚学会的侧面描写……&lt;/p&gt;

&lt;h2 id=&#34;13&#34;&gt;(13)&lt;/h2&gt;

&lt;p&gt;ED家住在市中心，&lt;br /&gt;
我们有一个玩的非常好的朋友圈，&lt;br /&gt;
所以基本上每个假期我都会跑到他家住几天，&lt;br /&gt;
跟他在市里疯玩一圈。&lt;/p&gt;

&lt;p&gt;ED爸妈在生活上对ED非常好，&lt;br /&gt;
就算是晚饭我们在外面吃完回来，&lt;br /&gt;
晚上在房间里聊天上网，&lt;br /&gt;
他麻麻也会端碗切好的水果给他。&lt;/p&gt;

&lt;p&gt;ED家还养了只狗，&lt;br /&gt;
ED说这只狗智商很高。&lt;/p&gt;

&lt;p&gt;不过我看到的都是一只2B doge：&lt;/p&gt;

&lt;p&gt;地板拖得太干净太滑，&lt;br /&gt;
这狗爪子也干净，&lt;br /&gt;
所以只要一见到人，&lt;br /&gt;
它就会很开心地滑倒在地板上……&lt;/p&gt;

&lt;h2 id=&#34;14&#34;&gt;(14)&lt;/h2&gt;

&lt;p&gt;到了大学ED参加了ACM&lt;br /&gt;
(Association for Computing Machinery-International Collegiate Programming Contest)&lt;br /&gt;
（简单的来说就是世界大学生信息竞赛）&lt;/p&gt;

&lt;p&gt;大二大三带领着浙大从中国打到俄罗斯总决赛，&lt;br /&gt;
打了两届Final。&lt;/p&gt;

&lt;p&gt;做个比喻，&lt;br /&gt;
就像是2018世界杯，&lt;br /&gt;
ED带领浙大足球队冲出中国走向俄罗斯……&lt;br /&gt;
（这个比喻太奇怪了啦&lt;/p&gt;

&lt;p&gt;问ED在俄罗斯比赛之外有什么感想，&lt;br /&gt;
ED说：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;美眉太多了！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;俄罗斯的人为什么不学英语！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;国外的WIFI真难上！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;15&#34;&gt;(15)&lt;/h2&gt;

&lt;p&gt;长时间的逻辑训练让ED思路异常清晰。&lt;/p&gt;

&lt;p&gt;所以ED可以在任何情况下清楚地知道自己想要什么，&lt;br /&gt;
不想要什么。&lt;/p&gt;

&lt;p&gt;所以ED了解自己以后应该怎么发展，&lt;br /&gt;
哪些人可以帮到自己，&lt;br /&gt;
怎么做可以解决问题。&lt;/p&gt;

&lt;p&gt;所以ED没有女朋友……&lt;/p&gt;

&lt;h2 id=&#34;16&#34;&gt;(16)&lt;/h2&gt;

&lt;p&gt;这点ED也非常忧伤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ED：我这个人也不差，&lt;br /&gt;
为什么没有女朋友呢？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我：可能你太2B了…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ED：我也是很有威♂严的！…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我：那可能你太羞涩了…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ED：熟了以后我什么都敢做！…&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我只能说：那你蛋疼…！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ED：……&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ED：好吧…我蛋疼……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;17&#34;&gt;(17)&lt;/h2&gt;

&lt;p&gt;俗话说物以类聚，&lt;br /&gt;
ED跟我在很多频率上非常一致。&lt;/p&gt;

&lt;p&gt;这次ED来上海，&lt;br /&gt;
他神秘兮兮地问我：&lt;br /&gt;
“B站上那个&lt;br /&gt;
《老夫从来没见过这么漂亮的妹子》视频你看过没？”&lt;/p&gt;

&lt;p&gt;我：“哈？那是啥视频啊…”&lt;/p&gt;

&lt;p&gt;于是ED翻出来给我看，&lt;br /&gt;
我听了两秒钟：&lt;br /&gt;
“这不是马来西亚的四叶草么！”&lt;br /&gt;
（&lt;a href=&#34;https://www.acfun.cn/v/ac1195212）&#34;&gt;https://www.acfun.cn/v/ac1195212）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简直一拍即合。&lt;/p&gt;

&lt;h2 id=&#34;18&#34;&gt;(18)&lt;/h2&gt;

&lt;p&gt;ED最近把微信头像改成了钢炼里的EDWARD，&lt;br /&gt;
ED说他们不仅名字一样，&lt;br /&gt;
都有弟弟，&lt;br /&gt;
而且这个动画也挺好看的。&lt;/p&gt;

&lt;p&gt;ED以前的头像是阿狸，&lt;br /&gt;
他特别喜欢这只胖狐狸。&lt;/p&gt;

&lt;p&gt;于是那阵子他壁纸、表情、头像全是阿狸。&lt;/p&gt;

&lt;p&gt;后来ED喜欢散华礼弥。&lt;/p&gt;

&lt;p&gt;于是他把个人主页的封面图都改成了散华礼弥。&lt;br /&gt;
（&lt;a href=&#34;https://edward-mj.com）&#34;&gt;https://edward-mj.com）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;理工男喜欢一个东西就是这么一根筋。&lt;/p&gt;

&lt;h2 id=&#34;19&#34;&gt;(19)&lt;/h2&gt;

&lt;p&gt;三年前，ED去浙大之前我跟他说：&lt;/p&gt;

&lt;p&gt;“你到时候找到女朋友了一定跟我说，&lt;br /&gt;
我假期一定让你带她回来，&lt;br /&gt;
我肯定不会跑到你房里去玩了 ;-)”&lt;/p&gt;

&lt;p&gt;三年以后，ED非常忧虑地跟我说：&lt;/p&gt;

&lt;p&gt;“我觉得某种意义上浙大和交大是一样的…”&lt;/p&gt;

&lt;p&gt;我安慰ED：&lt;/p&gt;

&lt;p&gt;“没事的。你看你们学长2009，&lt;br /&gt;
他不也没有女朋友么，&lt;br /&gt;
他比你更悲剧呢。”&lt;/p&gt;

&lt;p&gt;顺带科普了一发2009与九阴真经的梗给ED……&lt;/p&gt;

&lt;h2 id=&#34;20&#34;&gt;(20)&lt;/h2&gt;

&lt;p&gt;中学的时候我就想，&lt;br /&gt;
ED应该就是我最好的朋友了。&lt;/p&gt;

&lt;p&gt;于是我和ED从来没有说过“多联系”这样的话。&lt;/p&gt;

&lt;p&gt;任何时候，&lt;br /&gt;
只要有什么好玩的事情，&lt;br /&gt;
郁闷的事情，&lt;br /&gt;
我都直接一句：&lt;/p&gt;

&lt;p&gt;“ED”&lt;/p&gt;

&lt;p&gt;戳开了聊天窗口。&lt;/p&gt;

&lt;p&gt;这就是我的好友，&lt;br /&gt;
陈伟杰。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>0x5f3759df 一个神奇的数字</title>
      <link>https://liriansu.com/posts/2014-03-07-magic-number/</link>
      <pubDate>Fri, 07 Mar 2014 14:11:31 +0000</pubDate>
      
      <guid>https://liriansu.com/posts/2014-03-07-magic-number/</guid>
      <description>&lt;p&gt;今天在看各种算法介绍的时候看到了这么一句话“神奇数字0x5f3759df并不是约翰·卡马克发明的。之所以一开始被误解，主要是许多对卡神光环膜拜已久的游戏程序员在读Quake3源码时吓尿了……”一下子引起了我的好奇心，在查阅了一些资料以后整理整个故事如下。&lt;/p&gt;

&lt;h2 id=&#34;雷神之锤3&#34;&gt;雷神之锤3&lt;/h2&gt;

&lt;p&gt;雷神之锤3（Quake3）是90年代的经典FPS游戏，不仅画面精美，而且整个程序优化得很好，在配置一般的电脑上也能流畅地运行。这主要归功于其3D引擎id Tech3，而此引擎是由约翰·卡马克（John Carmack）领导开发的。&lt;/p&gt;

&lt;p&gt;卡马克是一个美国码农，id Software的创始人之一，他因在3D技术上的杰出成就而文明。卡马克还是一个开源软件的倡导者，1996年他放出了雷神之锤的源代码，而一个程序员将其改写成了Linux的版本并发给了卡马克。卡马克没有认为这是侵权，反而是要求他的员工们以这个补丁为基础开发雷神之锤的Linux版本。后来的日子id Software也一样公布了雷神之锤2的源代码，在2005年，雷神之锤3的源代码也被放出来了。&lt;/p&gt;

&lt;p&gt;（这是官方下载地址&lt;a href=&#34;ftp://ftp.idsoftware.com/idstuff/source/quake3-1.32b-source.zip）&#34;&gt;ftp://ftp.idsoftware.com/idstuff/source/quake3-1.32b-source.zip）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们知道，越底层的函数调用越频繁，假如把底层函数优化做好了，效率自然就上去了，3D引擎归根到底还是数学运算。在最底层的运算函数中（game/code/q_math.c中），有许多有趣的函数，有些更是令人惊叹这究竟是如何编写的。&lt;/p&gt;

&lt;h2 id=&#34;神奇的0x5f3759df&#34;&gt;神奇的0x5f3759df&lt;/h2&gt;

&lt;p&gt;在运算函数文件中可以找到这么一个函数，它的作用是将一个数开方并取倒数，功能上跟系统函数(float)(1.0/sqrt(x))一样，但是效率上快了四倍：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float Q_rsqrt( float number )
{
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y = number;
    i = * ( long * ) &amp;amp;y;         // evil floating point bit level hacking
    i = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 ); // WHAT THE FUCK?
    y = * ( float * ) &amp;amp;i;
    y = y * ( threehalfs - ( x2 * y * y ) );       // 1st iteration
    // y = y * ( threehalfs - ( x2 * y * y ) );    // 2nd iteration, this can be removed

#ifndef Q3_VM
#ifdef __linux__
    assert( !isnan(y) ); // bk010122 - FPE?
#endif
#endif
    return y;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个函数最核心，最令人费解的就是标注了“WHAT THE FUCK”的那一句&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 );&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;再加上一句&lt;code&gt;y = y * ( threehalfs - ( x2 * y * y ) );&lt;/code&gt;就完成了求开方的运算。&lt;/p&gt;

&lt;p&gt;一般的求开方采用的都是牛顿迭代法，比如求sqrt(5)，那么先令A = 2然后B = 5 / A; A = (A + B) / 2;这样循环下去，A和B将会越来越接近，最终的结果就是根号五了。而卡马克给出的这个算法的牛逼之处在于它直接用了0x5f3759df一个数猜测了一个值，通过一次计算就很接近根号N的值了。这样省下了许多次迭代逼近的过程，那么函数效率则也就大大被优化了。&lt;/p&gt;

&lt;p&gt;普渡大学的数学家Chris Lomont了解到了这个数字以后很感兴趣，他打算研究一下这个数字的奥秘。这个Lomont也是一个牛人，精心研究以后他从理论上推导出了一个最佳猜测值：0x5f37642f，跟程序中的0x5f3759df十分接近。Lomont得出这个结果以后很满意，他拿自己这个数跟卡马克的神奇数字做速度比赛，结果卡马克赢了……谁也不知道卡马克是怎么求出这个数的……&lt;/p&gt;

&lt;p&gt;自己精心推导出的理论最佳值居然输给了卡马克，Lomont也是很不甘心，他用类似穷举的方法一个个地试过来，终于被他找到一个比卡马克的0x5f3759df要好一丁点的数字：0x5f375a86。于是Lomont很高兴地把这个结果写成了论文公之于世……（论文地址：&lt;a href=&#34;https://www.matrix67.com/data/InvSqrt.pdf）&#34;&gt;https://www.matrix67.com/data/InvSqrt.pdf）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个算法也有了自己的名字：平方根倒数速算算法（Fast Inverse Square Root）&lt;/p&gt;

&lt;h2 id=&#34;算法的发明者&#34;&gt;算法的发明者&lt;/h2&gt;

&lt;p&gt;因为约翰·卡马克是整个雷神之锤项目的开发者，所以起初很多人也就简单的认为神奇数字0x5f3759df是卡马克的杰作。但是后来卡马克本人在回复问询邮件的时候否定了这个观点，卡马克回忆可能是雷神之锤项目的一个资深码农Terje Mathisen写下了这段代码。而Mathisen回复邮件则表示他以前的确写过类似的代码，但他并不是先行者。现在了解到最早的实现是Gary Tarilli在SGI Indigo中实现的，但他也表示他只是对常数进行了一些改进，实际上他也不是作者。&lt;/p&gt;

&lt;p&gt;虽然并没有定论表示整个算法究竟是谁发明的，但是大家还是津津乐道于卡马克、和他的神奇数字0x5f3759df。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;br /&gt;
&lt;a href=&#34;https://www.guokr.com/post/90718/&#34;&gt;https://www.guokr.com/post/90718/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.matrix67.com/data/InvSqrt.pdf&#34;&gt;https://www.matrix67.com/data/InvSqrt.pdf&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.matrix67.com/blog/archives/362&#34;&gt;https://www.matrix67.com/blog/archives/362&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Fast_inverse_square_root&#34;&gt;https://en.wikipedia.org/wiki/Fast_inverse_square_root&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/John_Carmack&#34;&gt;https://en.wikipedia.org/wiki/John_Carmack&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%80%92%E6%95%B0%E9%80%9F%E7%AE%97%E6%B3%95&#34;&gt;https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%80%92%E6%95%B0%E9%80%9F%E7%AE%97%E6%B3%95&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>杰克之死</title>
      <link>https://liriansu.com/posts/2010-05-27-death-of-jack/</link>
      <pubDate>Thu, 27 May 2010 12:00:00 +0800</pubDate>
      
      <guid>https://liriansu.com/posts/2010-05-27-death-of-jack/</guid>
      <description>&lt;p&gt;“杰克死了。”&lt;/p&gt;

&lt;p&gt;“真的？不可思议！”&lt;/p&gt;

&lt;p&gt;“太可惜了，我一向看好他的。”&lt;/p&gt;

&lt;p&gt;“活该。”&lt;/p&gt;

&lt;p&gt;“死了他一个，还有后来人。”&lt;/p&gt;

&lt;p&gt;“杰克是谁？”&lt;/p&gt;

&lt;p&gt;“一个人总是这样，死了比活着更出名。”&lt;/p&gt;

&lt;p&gt;“听说奥巴马表达了哀思。”&lt;/p&gt;

&lt;p&gt;“可以放假吗？”&lt;/p&gt;

&lt;p&gt;“别管他，反正迟早要死的。”&lt;/p&gt;

&lt;p&gt;“前几天我还见过他呢。”&lt;/p&gt;

&lt;p&gt;“这可以拍成电影…”&lt;/p&gt;

&lt;p&gt;“我终于可以放心地出去逛街了。”&lt;/p&gt;

&lt;p&gt;“怎么现在到处都在讨论他？”&lt;/p&gt;

&lt;p&gt;“杰克已然成为了一种现象。”&lt;/p&gt;

&lt;p&gt;“我是他高中老师，我有话说…”&lt;/p&gt;

&lt;p&gt;“请问他…他…”&lt;/p&gt;

&lt;p&gt;“他乐于助人，挺好的…”&lt;/p&gt;

&lt;p&gt;“浮躁的风气始终困扰着中国。”&lt;/p&gt;

&lt;p&gt;“杰克死的好。”&lt;/p&gt;

&lt;p&gt;“她死了就死了，值得讨论吗？”&lt;/p&gt;

&lt;p&gt;“我觉得他不应该死…”&lt;/p&gt;

&lt;p&gt;“我反对，他应该死。”&lt;/p&gt;

&lt;p&gt;“Jack?Who do you mean?”&lt;/p&gt;

&lt;p&gt;“《泰晤士报》报道…”&lt;/p&gt;

&lt;p&gt;“这是一场精心准备的操作。”&lt;/p&gt;

&lt;p&gt;“昨晚他给我托梦了。”&lt;/p&gt;

&lt;p&gt;“其实他脚踏两条船被发现了。”&lt;/p&gt;

&lt;p&gt;“他的死是个迷。”&lt;/p&gt;

&lt;p&gt;“对比悲哀的杰克，讨论的人们更悲哀。”&lt;/p&gt;

&lt;p&gt;“捷克是成千上万死人中平凡而又特殊的一个。”&lt;/p&gt;

&lt;p&gt;“我活着…”&lt;/p&gt;

&lt;p&gt;“最近有人打着杰克的旗号行骗…”&lt;/p&gt;

&lt;p&gt;“他曾经喜欢过我，我觉得，他不配。”&lt;/p&gt;

&lt;p&gt;“只有聪明人才能看到杰克现象的本质。”&lt;/p&gt;

&lt;p&gt;“杰克不是现象…”&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
